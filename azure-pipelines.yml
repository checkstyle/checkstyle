# Maven
# Build your Java project and run tests with Apache Maven.
# Add steps that analyze code, save build artifacts, deploy, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/java

schedules:
  - cron: "1 0 * * 0"
    displayName: Weekly weekend build
    branches:
      include:
        - master

trigger:
  - master

pr:
  - master

strategy:
  matrix:
    # testing age of pr
    'pr-age':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh pr-age"
      skipCache: true
      requireDisplay: false

    # spelling
    'spelling':
      image: 'ubuntu-24.04'
      cmd: "./.ci/test-spelling-unknown-words.sh"
      skipCache: true
      requireDisplay: false

    # unit tests (openjdk17)
    'test':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test"
      requireDisplay: true

    # unit tests in German locale (openjdk17)
    'test-de':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-de"
      requireDisplay: true

    # unit tests in Spanish locale (openjdk17)
    'test-es':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-es"
      requireDisplay: true

    # unit tests in Finnish locale (openjdk17)
    'test-fi':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-fi"
      requireDisplay: true

    # unit tests in French locale (openjdk17)
    'test-fr':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-fr"
      requireDisplay: true

    # unit tests in Chinese locale (openjdk17)
    'test-zh':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-zh"
      requireDisplay: true

    # unit tests in Japanese locale (openjdk17)
    'test-ja':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-ja"
      requireDisplay: true

    # unit tests in Portuguese locale (openjdk17)
    'test-pt':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-pt"
      requireDisplay: true

    # unit tests in Turkish locale (openjdk17)
    'test-tr':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-tr"
      requireDisplay: true

    # unit tests in Russian locale (openjdk17)
    'test-ru':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-ru"
      requireDisplay: true

    # unit tests in Albanian locale (openjdk17)
    'test-al':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh test-al"
      requireDisplay: true

    # OpenJDK17 verify
    'OpenJDK11 verify':
      image: 'ubuntu-24.04'
      cmd: "./mvnw -e --no-transfer-progress verify"
      requireDisplay: true

    'MacOS JDK17 verify':
      image: 'macOS-14'
      cmd: "JAVA_HOME=$JAVA_HOME_17_X64 ./mvnw -e --no-transfer-progress verify"
      requireDisplay: false

    # versions to update
    'versions':
      image: 'ubuntu-24.04'
      cmd: "./.ci/validation.sh versions"
      onCronOnly: true
      requireDisplay: false

    # lint for .md files, OSX is used because there is problem to install gem on linux
    'markdownlint':
      image: 'macOS-14'
      cmd: "./.ci/validation.sh markdownlint"
      skipCache: true
      needMdl: true
      requireDisplay: false

pool:
  vmImage: $(image)

variables:
  MAVEN_CACHE_FOLDER: $(Pipeline.Workspace)/.m2/repository
  MAVEN_OPTS: '--show-version -Dmaven.repo.local=$(MAVEN_CACHE_FOLDER)'
  SKIP_CACHE: $(skipCache)
  IMAGE: $(image)
  ON_CRON_ONLY: $(onCronOnly)
  NEED_XMLSTARLET: $(needXmlstarlet)
  NEED_MDL: $(needMdl)
  BUILD_REASON: $[variables['Build.Reason']]
  REQUIRE_DISPLAY: $(requireDisplay)

steps:
  # Install xvfb for Linux GUI tests
  - bash: |
      sudo apt-get update
      sudo apt-get install -y xvfb
    displayName: 'Install xvfb'
    condition: |
      and(
        eq(variables['Agent.OS'], 'Linux'),
        eq(variables.REQUIRE_DISPLAY, 'true')
      )

  # Install xmlstarlet if needed
  - bash: |
      apt-fast install -y xmlstarlet
    condition: |
      and(
        ne(variables['Agent.OS'], 'Darwin'),
        eq(variables.NEED_XMLSTARLET, 'true')
      )

  # Install markdown linter if needed
  - bash: |
      gem install mdl
    condition: eq(variables.NEED_MDL, 'true')

  # Java installation
  - task: JavaToolInstaller@0
    inputs:
      versionSpec: 17
      jdkArchitectureOption: 'X64'
      jdkSourceOption: 'PreInstalled'

  # Maven caching
  - task: Cache@2
    inputs:
      key: 'maven | "$(Agent.OS)" | **/pom.xml'
      restoreKeys: |
        maven | "$(Agent.OS)"
        maven
      path: |
        $(MAVEN_CACHE_FOLDER)
        .mvn/wrapper
    displayName: Cache Maven local repo and wrapper
    condition: ne(variables.SKIP_CACHE, 'true')

  # Main build and test execution
  - bash: |
      set -e
      ./mvnw --version
      echo "ON_CRON_ONLY: $ON_CRON_ONLY"
      echo "BUILD_REASON: $BUILD_REASON"
      echo "REQUIRE_DISPLAY: $REQUIRE_DISPLAY"
      echo "AGENT_OS: $AGENT_OS"
      echo "cmd: $(cmd)"
      
      # Conditionally run with xvfb for Linux GUI tests
      if [ "$REQUIRE_DISPLAY" = "true" ] && [ "$AGENT_OS" = "Linux" ]; then
        echo "Starting xvfb for GUI tests"
        export DISPLAY=:99
        Xvfb :99 -screen 0 1024x768x24 > /dev/null 2>&1 &
        sleep 5
        eval "$(cmd)"
      else
        eval "$(cmd)"
      fi
      
      ./.ci/validation.sh git-diff
      ./.ci/validation.sh ci-temp-check
    displayName: 'Run build and validations'
    env:
      AGENT_OS: $(Agent.OS)
    condition: |
      or (
        ne(variables.ON_CRON_ONLY, 'true'),
        and(
          eq(variables.ON_CRON_ONLY, 'true'),
          eq(variables['Build.Reason'], 'Schedule')
        )
      )