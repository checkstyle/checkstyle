#####################################################################################
# GitHub Action to generate Checkstyle report.
#
# Workflow starts when:
# 1) issue comment - created
#
# Requirements:
# 1) secrets.AWS_ACCESS_KEY_ID - access key for AWS S3 service user
# 2) secrets.AWS_SECRET_ACCESS_KEY - security access key for AWS S3 service user
#
# If you need to change bucket name or region, change AWS_REGION and AWS_BUCKET_NAME variables.
# For another bucket, you will need to change the secrets.
#####################################################################################
name: Diff-Report
env:
  AWS_REGION: us-east-2
  AWS_BUCKET_NAME: "checkstyle-diff-reports"
  # yamllint disable-line rule:line-length
  DEFAULT_PROJECTS_LINK: "https://raw.githubusercontent.com/checkstyle/contribution/master/checkstyle-tester/projects-to-test-on-for-github-action.properties"
  USER_LOGIN: ${{ github.event.issue.user.login }}

on:
  issue_comment:
    types: [ created, edited ]

permissions:
  contents: read
  pull-requests: write

# allow diff reports to run concurrently
concurrency:
  group: ${{ github.workflow }}-${{ github.ref }}
  cancel-in-progress: false

jobs:
  # Parse PR Body, search for links to .properties and .xml files
  parse_body:
    if: github.event.comment.body == 'GitHub, generate report'
    runs-on: ubuntu-latest
    outputs:
      projects_link: ${{ steps.parse.outputs.projects_link }}
      config_link: ${{ steps.parse.outputs.config_link }}
      new_module_config_link: ${{ steps.parse.outputs.new_module_config_link }}
      patch_config_link: ${{ steps.parse.outputs.patch_config_link }}
      report_label: ${{ steps.parse.outputs.report_label }}
      branch: ${{ steps.branch.outputs.ref }}
      commit_sha: ${{ steps.branch.outputs.commit_sha }}

    steps:
      - uses: khan/pull-request-comment-trigger@master
        name: React with rocket on run
        with:
          trigger: ','
          reaction: rocket
        env:
          GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
      - run: 'echo We print it here for this action to work'
        if: 'true'
      - name: Getting PR description
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          PULL_REQUEST_URL: ${{ github.event.issue.pull_request.url }}
        run: |
          echo "$ISSUE_BODY" > text
          echo "$USER_LOGIN" > user
          wget -q "$PULL_REQUEST_URL" -O info.json
          jq --raw-output .head.ref info.json > branch
          jq --raw-output .head.sha info.json > commit_sha

      - name: Parsing content of PR description
        id: parse
        run: |
          grep "^Diff Regression projects:" text | cat > temp
          sed 's/Diff Regression projects: //' temp > projects_link
          echo "::set-output name=projects_link::$(cat projects_link)"

          grep "^Diff Regression config:" text | cat > temp
          sed 's/Diff Regression config: //' temp > config_link
          echo "::set-output name=config_link::$(cat config_link)"

          grep "^New module config:" text | cat > temp
          sed 's/New module config: //' temp > new_module_config_link
          echo "::set-output name=new_module_config_link::$(cat new_module_config_link)"

          grep "^Diff Regression patch config:" text | cat > temp
          sed 's/Diff Regression patch config: //' temp > patch_config_link
          echo "::set-output name=patch_config_link::$(cat patch_config_link)"

          grep "^Report label:" text | cat > temp
          sed 's/Report label: //' temp > report_label
          echo "::set-output name=report_label::$(cat report_label)"

      - name: Set branch
        id: branch
        run: |
          echo "::set-output name=ref::$(cat branch)"
          # shellcheck disable=SC2002
          echo "::set-output name=commit_sha::$(cat commit_sha | cut -c 1-7)"

          echo "GITHUB_OUTPUT:"
          # need to 'echo' to see output in Github CI
          # shellcheck disable=SC2005
          echo "$(cat "$GITHUB_OUTPUT")"

  make_report:
    runs-on: ubuntu-latest
    needs: parse_body
    if: needs.parse_body.outputs.config_link != ''
            || needs.parse_body.outputs.new_module_config_link != ''
    outputs:
      message: ${{ steps.out.outputs.message }}
    steps:

      - name: Download files
        env:
          NEW_MODULE_CONFIG_LINK: ${{ needs.parse_body.outputs.new_module_config_link }}
          DIFF_CONFIG_LINK: ${{ needs.parse_body.outputs.config_link }}
          PATCH_CONFIG_LINK: ${{ needs.parse_body.outputs.patch_config_link }}
          LINK_FROM_PR: ${{ needs.parse_body.outputs.projects_link }}
        run: |
          LINK="${LINK_FROM_PR:-$DEFAULT_PROJECTS_LINK}"
          wget -q "$LINK" -O project.properties
          if [ -n "$NEW_MODULE_CONFIG_LINK" ]; then
            wget -q "$NEW_MODULE_CONFIG_LINK" -O new_module_config.xml
          fi

          if [ -n "$DIFF_CONFIG_LINK" ]; then
            wget -q "$DIFF_CONFIG_LINK" -O diff_config.xml
          fi

          if [ -n "$PATCH_CONFIG_LINK" ]; then
            wget -q "$PATCH_CONFIG_LINK" -O patch_config.xml
          fi

      # fetch-depth - number of commits to fetch.
      # 0 indicates all history for all branches and tags.
      # 0, because we need access to all branches to create a report.
      # ref - branch to checkout.
      - name: Download checkstyle
        uses: actions/checkout@v3
        with:
          repository: ${{ env.USER_LOGIN }}/checkstyle
          ref: master
          path: checkstyle
          fetch-depth: 0

      # set main checkstyle repo as an upstream
      # Diff report will be generated taking upstream's master branch as a base branch
      - name: set upstream
        run: |
          cd checkstyle
          bash
          MAIN_REPO_GIT_URL="https://github.com/checkstyle/checkstyle.git"
          git remote add upstream $MAIN_REPO_GIT_URL
          git fetch upstream
          cd ../

      - name: Setup local maven cache
        uses: actions/cache@v2
        with:
          path: ~/.m2/repository
          key: checkstyle-maven-cache-${{ hashFiles('**/pom.xml') }}

      # fetch-depth default: 1
      # Don't need history for all branches and tags here.
      - name: Download contribution
        uses: actions/checkout@v2
        with:
          repository: checkstyle/contribution
          ref: master
          path: contribution

      - name: Prepare environment
        run: |
          mv project.properties ./contribution/checkstyle-tester/
          mv ./*.xml ./contribution/checkstyle-tester/
          sudo apt install groovy

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Generate report
        env:
          BRANCH: ${{ needs.parse_body.outputs.branch }}
        run: |
          cd contribution/checkstyle-tester
          bash
          REF="origin/$BRANCH"
          REPO="../../checkstyle"
          BASE_BRANCH="upstream/master"
          export MAVEN_OPTS="-Xmx2048m"
          if [ -f new_module_config.xml ]; then
            groovy diff.groovy -r "$REPO" -p "$REF" -pc new_module_config.xml -m single\
              -l project.properties -xm "-Dcheckstyle.failsOnError=false"\
              --allowExcludes
          elif [ -f patch_config.xml ]; then
            groovy diff.groovy -r "$REPO" -b "$BASE_BRANCH" -p "$REF" -bc diff_config.xml\
              -pc patch_config.xml -l project.properties -xm "-Dcheckstyle.failsOnError=false"\
              --allowExcludes
          else
            groovy diff.groovy -r "$REPO" -b "$BASE_BRANCH" -p "$REF" -c diff_config.xml\
              -l project.properties -xm "-Dcheckstyle.failsOnError=false"\
              --allowExcludes
          fi

      - name: Copy Report to AWS S3 Bucket
        env:
          LABEL: ${{ needs.parse_body.outputs.report_label }}
        run: |
         bash
         TIME=$(date +%Y%H%M%S)
         FOLDER="${{needs.parse_body.outputs.commit_sha}}_$TIME"
         DIFF="./contribution/checkstyle-tester/reports/diff"
         LINK="https://${{env.AWS_BUCKET_NAME}}.s3.${{env.AWS_REGION}}.amazonaws.com"
         aws s3 cp $DIFF "s3://${{env.AWS_BUCKET_NAME}}/$FOLDER/reports/diff/" --recursive
         if [ -n "$LABEL" ]; then
           echo "$LABEL: " > message
         fi
         echo "$LINK/$FOLDER/reports/diff/index.html" >> message

      - name: Set output
        id: out
        run: echo "::set-output name=message::$(cat message)"

  # should be always last step
  send_message:
    runs-on: ubuntu-latest
    needs: [ parse_body, make_report ]
    if: failure() || success()
    steps:

      - name: Get message
        env:
          MSG: ${{ needs.make_report.outputs.message }}
        run: |
         if [ -z "$MSG" ]; then
           JOBS_LINK="https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}"
           API_LINK="https://api.github.com/repos/checkstyle/checkstyle/actions/runs/"
           API_LINK="${API_LINK}${{github.run_id}}/jobs"
           wget $API_LINK -O info.json
           jq '.jobs' info.json > "jobs"
           jq '.[] | select(.conclusion == "failure") | .name' jobs > job_name
           jq '.[] | select(.conclusion == "failure") | .steps' jobs > steps
           jq '.[] | select(.conclusion == "failure") | .name' steps > step_name
           echo "Report generation job failed on phase $(cat job_name)," > message
           echo "step $(cat step_name).<br>Link: $JOBS_LINK" >> message
         else
           echo "$MSG" > message
         fi

      - name: Set message
        id: out
        run: echo "::set-output name=message::$(cat message)"

      - name: Comment PR
        uses: checkstyle/contribution/comment-action@master
        with:
          message: ${{steps.out.outputs.message}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
