#------------------------------------------------------------------------------------
# Github Action to generate Checkstyle report.
# 
# Workflow starts when:
# 1) issue comment - created
#
# Requirements:
# 1) secrets.AWS_ACCESS_KEY_ID - access key for AWS S3 service user
# 2) secrets.AWS_SECRET_ACCESS_KEY - security access key for AWS S3 service user
#
# If you need to change bucket name or region, change AWS_REGION and AWS_BUCKET_NAME variables.
# For another bucket, you will need to change the secrets.
#------------------------------------------------------------------------------------
name: Diff-Report
env:
  AWS_REGION: us-east-2
  AWS_BUCKET_NAME: "checkstyle-diff-reports"
  ISSUE_BODY: ${{github.event.issue.body}}

on:
  issue_comment:
    types: [created, edited]

jobs:
# Parse PR Body, search for links to .properties and .xml files
  parse_body:
    if: github.event.comment.body == 'GitHub, generate report'
    runs-on: ubuntu-latest
    outputs:
      projects_link: ${{ steps.parse.outputs.projects_link }}
      config_link: ${{ steps.parse.outputs.config_link }}
      new_module_config_link: ${{ steps.parse.outputs.new_module_config_link }}
      patch_config_link: ${{ steps.parse.outputs.patch_config_link }}
      user: ${{ steps.branch.outputs.user }}
      branch: ${{ steps.branch.outputs.ref }}
      
    steps:
     - uses: khan/pull-request-comment-trigger@master
       name: React with rocket on run
       with:
         trigger: 'GitHub, generate report'
         reaction: rocket
         prefix_only: true
       env:
         GITHUB_TOKEN: '${{ secrets.GITHUB_TOKEN }}'
     - run: ' '
       if: steps.check.outputs.triggered == 'true'
     - name: Getting PR description
       run: |
        echo "$ISSUE_BODY" > text
        echo "${{github.event.issue.user.login}}" > user
        wget -q "${{github.event.issue.pull_request.url}}" -O info.json
        jq .head.ref info.json > branch
        
     - name: Parsing content of PR description
       id: parse
       run: |
        grep "^Diff Regression projects:" text | cat > temp
        sed 's/Diff Regression projects: //' temp > projects_link
        echo ::set-output name=projects_link::$(cat projects_link)

        grep "^Diff Regression config:" text | cat > temp
        sed 's/Diff Regression config: //' temp > config_link
        echo ::set-output name=config_link::$(cat config_link)

        grep "^New module config:" text | cat > temp
        sed 's/New module config: //' temp > new_module_config_link
        echo ::set-output name=new_module_config_link::$(cat new_module_config_link)

        grep "^Diff Regression patch config:" text | cat > temp
        sed 's/Diff Regression patch config: //' temp > patch_config_link
        echo ::set-output name=patch_config_link::$(cat patch_config_link)
        
     - name: Set branch and username
       id: branch
       run: |
        echo ::set-output name=user::$(cat user)
        echo ::set-output name=ref::$(cat branch)

     
  make_report:
    runs-on: ubuntu-latest
    needs: parse_body
    if: needs.parse_body.outputs.projects_link != ''
          && (needs.parse_body.outputs.config_link != ''
            || needs.parse_body.outputs.new_module_config_link != '')
    outputs:
      message: ${{ steps.out.outputs.message}}
    steps: 
       
     - name: Download files
       run: |
        wget -q "${{needs.parse_body.outputs.projects_link}}" -O project.properties

        if [ ! -z  "${{needs.parse_body.outputs.new_module_config_link}}" ]; then
          wget -q "${{needs.parse_body.outputs.new_module_config_link}}" -O new_module_config.xml
        fi

        if [ ! -z  "${{needs.parse_body.outputs.config_link}}" ]; then
          wget -q "${{needs.parse_body.outputs.config_link}}" -O diff_config.xml
        fi

        if [ ! -z  "${{needs.parse_body.outputs.patch_config_link}}" ]; then
          wget -q "${{needs.parse_body.outputs.patch_config_link}}" -O patch_config.xml
        fi
        
     # fetch-depth - number of commits to fetch.
     # 0 indicates all history for all branches and tags.
     # 0, because we need access to all branches to create a report.
     # ref - branch to checkout.
     - name: Download checkstyle
       uses: actions/checkout@v2
       with:
        repository: ${{needs.parse_body.outputs.user}}/checkstyle
        ref: master
        path: checkstyle
        fetch-depth: 0

     # set main checkstyle repo as an upstream
     # Diff report will be generated taking upstream's master branch as a base branch
     - name: set upstream
       run: |
         cd checkstyle
         bash
         MAIN_REPO_GIT_URL="https://github.com/checkstyle/checkstyle.git"
         git remote add upstream $MAIN_REPO_GIT_URL
         git fetch upstream
         cd ../

     - name: Setup local maven cache
       uses: actions/cache@v2
       with:
         path: ~/.m2/repository
         key: checkstyle-maven-cache-${{ hashFiles('**/pom.xml') }}

     # fetch-depth default: 1
     # Don't need history for all branches and tags here.
     - name: Download contribution
       uses: actions/checkout@v2
       with:
        repository: checkstyle/contribution
        ref: master
        path: contribution

     - name: Prepare environment
       run: |
         mv project.properties ./contribution/checkstyle-tester/
         mv *.xml ./contribution/checkstyle-tester/
         sudo apt install groovy
         
     - name: Configure AWS Credentials
       uses: aws-actions/configure-aws-credentials@v1
       with:
        aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
        aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
        aws-region: ${{ env.AWS_REGION }}    
         
     - name: Generate report
       run: |
         cd contribution/checkstyle-tester
         bash
         REF="origin/${{needs.parse_body.outputs.branch}}"
         REPO="../../checkstyle"
         BASE_BRANCH="upstream/master"
         if [ -f new_module_config.xml ]; then
           groovy diff.groovy -r $REPO -p $REF -pc new_module_config.xml -m single\
             -l project.properties
         elif [ -f patch_config.xml ]; then
           groovy diff.groovy -r $REPO -b $BASE_BRANCH -p $REF -bc diff_config.xml\
             -pc patch_config.xml -l project.properties
         else
           groovy diff.groovy -r $REPO -b $BASE_BRANCH -p $REF -c diff_config.xml\
             -l project.properties
         fi

     - name: Copy Report to AWS S3 Bucket
       run: |
        bash
        TIME=`date +%Y%H%M%S`
        FOLDER="${{needs.parse_body.outputs.branch}}_$TIME"
        DIFF="./contribution/checkstyle-tester/reports/diff"
        LINK="https://${{env.AWS_BUCKET_NAME}}.s3.${{env.AWS_REGION}}.amazonaws.com"
        aws s3 cp $DIFF s3://${{env.AWS_BUCKET_NAME}}/$FOLDER/reports/diff/ --recursive
        echo $LINK/$FOLDER/reports/diff/index.html > message
        
     - name: Set output
       id: out
       run: echo ::set-output name=message::$(cat message)   
      
  # should be always last step
  send_message:
    runs-on: ubuntu-latest
    needs: [parse_body, make_report]
    if: failure() || success()
    steps:

      - name: Get message
        run: |
         if [ -z  "${{needs.make_report.outputs.message}}" ]; then
           JOBS_LINK="https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}"
           API_LINK="https://api.github.com/repos/checkstyle/checkstyle/actions/runs/"
           API_LINK="${API_LINK}${{github.run_id}}/jobs"
           wget $API_LINK -O info.json
           jq '.jobs' info.json > jobs
           jq '.[] | select(.conclusion == "failure") | .name' jobs > job_name
           jq '.[] | select(.conclusion == "failure") | .steps' jobs > steps
           jq '.[] | select(.conclusion == "failure") | .name' steps > step_name
           echo "Report generation job failed on phase $(cat job_name)," > message
           echo "step $(cat step_name).<br>Link: $JOBS_LINK" >> message
         else  
           echo "${{needs.make_report.outputs.message}}" > message
         fi
     
      - name: Set message
        id: out
        run: echo ::set-output name=message::$(cat message)

      - name: Comment PR
        uses: checkstyle/contribution/comment-action@master
        with:
          message: ${{steps.out.outputs.message}}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
