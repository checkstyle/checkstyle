#####################################################################################
# GitHub Action to generate Checkstyle report.
#
# Workflow starts when:
# 1) PR comment - created
#
# Requirements:
# 1) secrets.AWS_ACCESS_KEY_ID - access key for AWS S3 service user
# 2) secrets.AWS_SECRET_ACCESS_KEY - security access key for AWS S3 service user
#
# If you need to change bucket name or region, change AWS_REGION and AWS_BUCKET_NAME variables.
# For another bucket, you will need to change the secrets.
#####################################################################################
name: regression-report
env:
  AWS_REGION: us-east-2
  AWS_BUCKET_NAME: "checkstyle-diff-reports"
  USER_LOGIN: ${{ github.event.issue.user.login }}
  # yamllint disable-line rule:line-length
  DEFAULT_PROJECTS_LINK: "https://raw.githubusercontent.com/checkstyle/test-configs/main/extractor/src/main/resources/list-of-projects.yml"
  BASE_TEST_CONFIGS_URL: "https://raw.githubusercontent.com/checkstyle/test-configs/main"
  EXTRACTOR_VERSION: 2024-10-08
  DIFF_TOOL_VERSION: "1.0-SNAPSHOT-all"
  PATCH_DIFF_TOOL_VERSION: "0.1-SNAPSHOT"
  CACHE_KEY: "regression-report-${{ github.sha }}-${{ github.event.comment.id }}"
  GENERATED_CONFIGS_PATH: generated_configs

on:
  issue_comment:
    types: [ created ]

permissions:
  contents: read
  pull-requests: write
  actions: write

concurrency:
  group: ${{ github.run_id }}
  cancel-in-progress: true

jobs:
  check_pr_status:
    if: |
      github.event.issue.pull_request
      && (startsWith(github.event.comment.body, 'Github, generate report for ')
          ||  startsWith(github.event.comment.body, 'GitHub, generate report for ')
          ||  startsWith(github.event.comment.body,
                         'Github, generate report for configs in PR description')
          ||  startsWith(github.event.comment.body,
                         'GitHub, generate report for configs in PR description')
          ||  startsWith(github.event.comment.body,
                         'Github, generate report by config from')
          ||  startsWith(github.event.comment.body,
                         'GitHub, generate report by config from'))

    runs-on: ubuntu-latest
    steps:
      - name: Check PR status
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.issue.pull_request.url }}
        run: |
          PR_STATE=$(curl --fail-with-body -s -H "Authorization: token $GITHUB_TOKEN" \
                     -H "Accept: application/vnd.github.v3+json" \
                     "$PR_URL" | jq -r .state)
          if [ "$PR_STATE" != "open" ]; then
            echo "PR is not active"
            exit 1
          fi

  checkout_and_cache:
    runs-on: ubuntu-latest
    needs: [ check_pr_status ]
    outputs:
      pr_branch: ${{ steps.get_pr_details.outputs.branch }}
      commit_sha: ${{ steps.get_pr_details.outputs.commit_sha }}
    env:
      CACHE_KEY: "regression-report-${{ github.sha }}-${{ github.event.comment.id }}"
    steps:
      - name: Create .ci-temp directory
        run: mkdir -p .ci-temp

      - name: Get PR branch and fork details
        id: get_pr_details
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          PR_URL: ${{ github.event.issue.pull_request.url }}
        run: |
          PR_INFO="$(curl --fail-with-body -s -H "Authorization: token $GITHUB_TOKEN" "$PR_URL")"
          BRANCH="$(echo "$PR_INFO" | jq -r .head.ref)"
          FORK_REPO="$(echo "$PR_INFO" | jq -r .head.repo.full_name)"
          COMMIT_SHA="$(echo "$PR_INFO" | jq -r .head.sha)"
          {
            echo "branch=$BRANCH"
            echo "fork_repo=$FORK_REPO"
            echo "commit_sha=$COMMIT_SHA"
          } >> "$GITHUB_OUTPUT"

      - name: Checkout PR branch
        uses: actions/checkout@v4
        with:
          repository: ${{ steps.get_pr_details.outputs.fork_repo }}
          ref: ${{ steps.get_pr_details.outputs.branch }}

      - name: Checkout master branch
        uses: actions/checkout@v4
        with:
          repository: checkstyle/checkstyle
          path: .ci-temp/checkstyle

      - name: Setup Git remotes
        run: |
          cd .ci-temp/checkstyle
          git remote add upstream https://github.com/checkstyle/checkstyle.git
          git remote add forked https://github.com/${{ steps.get_pr_details.outputs.fork_repo }}.git
          git fetch upstream
          git fetch forked
          git checkout -b ${{ steps.get_pr_details.outputs.branch }} \
               forked/${{ steps.get_pr_details.outputs.branch }}

      - name: Save cache
        uses: actions/cache/save@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}

  parse_comment:
    runs-on: ubuntu-latest
    needs: [ check_pr_status, checkout_and_cache ]
    outputs:
      mode: ${{ steps.parse.outputs.mode }}
      config_bundle: ${{ steps.parse.outputs.config_bundle }}
      input_file: ${{ steps.parse.outputs.input_file }}
    steps:
      - name: React to comment
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'rocket'
            })

      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Parse comment
        id: parse
        env:
          COMMENT_BODY: ${{ github.event.comment.body }}
        run: |
          PATTERN_FOR_DESCRIPTION='^Git[Hh]ub, generate report for configs in PR description$'
          PATTERN_FOR='^Git[Hh]ub, generate report for'
          PATTERN_BY_CONFIG_FROM='^Git[Hh]ub, generate report by config from'

          if [[ "$COMMENT_BODY" =~ $PATTERN_FOR_DESCRIPTION ]]; then
            ./.ci/append-to-github-output.sh "mode" "configs_in_pr_description"

          elif [[ "$COMMENT_BODY" =~ $PATTERN_FOR ]]; then
            ./.ci/append-to-github-output.sh "mode" "existing_config_bundle"
            CONFIG_BUNDLE=$(echo "$COMMENT_BODY" | sed -E "s/$PATTERN_FOR //g")
            ./.ci/append-to-github-output.sh "config_bundle" "$CONFIG_BUNDLE"

          elif [[ "$COMMENT_BODY" =~ $PATTERN_BY_CONFIG_FROM ]]; then
            ./.ci/append-to-github-output.sh "mode" "generated_config_bundle"
            INPUT_FILE=$(echo "$COMMENT_BODY" | sed -E "s/$PATTERN_BY_CONFIG_FROM //g")
            ./.ci/append-to-github-output.sh "input_file" "$INPUT_FILE"

          else
            echo "No recognized pattern found in '$COMMENT_BODY'."
            exit 1
          fi

  handle_existing_config_bundle:
    needs: [ parse_comment, checkout_and_cache ]
    if: needs.parse_comment.outputs.mode == 'existing_config_bundle'
    runs-on: ubuntu-latest
    outputs:
      config_link: ${{ steps.set_links.outputs.config_link }}
      projects_link: ${{ steps.set_links.outputs.projects_link }}
      label: ${{ steps.create_label.outputs.label }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Set config and projects links
        id: set_links
        run: |
          BASE_URL="${{ env.BASE_TEST_CONFIGS_URL }}"
          CONFIG_BUNDLE="${{ needs.parse_comment.outputs.config_bundle }}"
          CONFIG_LINK="$BASE_URL/$CONFIG_BUNDLE/config.xml"
          PROJECTS_LINK="$BASE_URL/$CONFIG_BUNDLE/list-of-projects.yml"
          ./.ci/append-to-github-output.sh "config_link" "$CONFIG_LINK"
          ./.ci/append-to-github-output.sh "projects_link" "$PROJECTS_LINK"

      - name: Create label
        id: create_label
        run: |
          CONFIG_BUNDLE="${{ needs.parse_comment.outputs.config_bundle }}"
          LABEL="Report for $CONFIG_BUNDLE"
          ./.ci/append-to-github-output.sh "label" "$LABEL"

  handle_generated_config_bundle:
    needs: [ parse_comment, checkout_and_cache ]
    if: needs.parse_comment.outputs.mode == 'generated_config_bundle'
    runs-on: ubuntu-latest
    outputs:
      config_link: ${{ steps.generated_config_bundle.outputs.config_link }}
      projects_link: ${{ steps.generated_config_bundle.outputs.projects_link }}
      label: ${{ steps.create_label.outputs.label }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Find input file
        id: find_input_file
        run: |
          INPUT_FILE="${{ needs.parse_comment.outputs.input_file }}"
          WORKSPACE="${{ github.workspace }}"

          FOUND_FILES=$(find "$WORKSPACE/src" -type f -path "*$INPUT_FILE")

          if [ "$(echo "$FOUND_FILES" | wc -l)" -gt 1 ]; then
            echo "Error: Multiple matching files found"
            exit 1
          elif [ -z "$FOUND_FILES" ]; then
            echo "Error: Could not find input file"
            exit 1
          fi

          FOUND_FILE="$FOUND_FILES"
          ./.ci/append-to-github-output.sh "input_file" "$FOUND_FILE"

      - name: Download Extractor JAR
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "checkstyle/test-configs"
          tag: "extractor-${{env.EXTRACTOR_VERSION}}"
          fileName: "extractor-all-${{env.EXTRACTOR_VERSION}}.jar"

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Generate config
        id: generated_config_bundle
        env:
          DEFAULT_PROJECTS_LINK: ${{ env.DEFAULT_PROJECTS_LINK }}
        run: |
          FOUND_FILE="${{ steps.find_input_file.outputs.input_file }}"
          OUTPUT_DIR="${{ env.GENERATED_CONFIGS_PATH }}"
          mkdir -p "$OUTPUT_DIR"

          echo "Using input file: $FOUND_FILE"

          # Generate a unique name for the config file
          CONFIG_FILE_NAME=$(basename "$FOUND_FILE" .java)_config.xml
          CONFIG_FILE_PATH="$OUTPUT_DIR/$CONFIG_FILE_NAME"

          # Generate a name for the projects YAML file
          PROJECT_FILE_PATH="$OUTPUT_DIR/projects.yml"

          # Run the extractor
          java -jar extractor-all-${{env.EXTRACTOR_VERSION}}.jar \
            "$WORKSPACE" \
            --input-file "$FOUND_FILE" \
            "$CONFIG_FILE_PATH" \
            "$PROJECT_FILE_PATH"

          # Set the config and project file paths
          ./.ci/append-to-github-output.sh "config_link" "$CONFIG_FILE_PATH"
          ./.ci/append-to-github-output.sh "projects_link" "$PROJECT_FILE_PATH"

          # Print the contents of the files to the logs
          echo "Contents of CONFIG_FILE_PATH:"
          cat "$CONFIG_FILE_PATH"

      - name: Cache Generated Config and Project Files
        uses: actions/cache@v4
        with:
          path: ${{ env.GENERATED_CONFIGS_PATH }}
          key: ${{ env.CACHE_KEY }}-generated-configs

      - name: Extract filename and create label
        id: create_label
        run: |
          INPUT_FILE="${{ needs.parse_comment.outputs.input_file }}"
          FILENAME=$(basename "$INPUT_FILE")
          LABEL="Generated config for $FILENAME"
          ./.ci/append-to-github-output.sh "label" "$LABEL"

  handle_configs_in_pr_description:
    needs: [ parse_comment, checkout_and_cache ]
    if: needs.parse_comment.outputs.mode == 'configs_in_pr_description'
    runs-on: ubuntu-latest
    outputs:
      config_link: ${{ steps.parse_description.outputs.config_link }}
      projects_link: ${{ steps.parse_description.outputs.projects_link }}
      report_label: ${{ steps.parse_description.outputs.report_label }}
      patch_config_link: ${{ steps.parse_description.outputs.patch_config_link }}
      new_module_config_link: ${{ steps.parse_description.outputs.new_module_config_link }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Getting PR description
        env:
          ISSUE_BODY: ${{ github.event.issue.body }}
          PULL_REQUEST_URL: ${{ github.event.issue.pull_request.url }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .ci-temp
          # convert windows line endings to unix in event text
          echo "$ISSUE_BODY" > .ci-temp/windows.txt
          tr -d '\15\32' < .ci-temp/windows.txt > .ci-temp/text

      - name: Parsing content of PR description
        id: parse_description
        run: |
          ./.ci/diff-report.sh parse-pr-description-text

  download_configs:
    needs: [
      parse_comment,
      handle_existing_config_bundle,
      handle_generated_config_bundle,
      handle_configs_in_pr_description
    ]
    if: |
      always() &&
      (needs.handle_existing_config_bundle.result == 'success'
        || needs.handle_generated_config_bundle.result == 'success'
        || needs.handle_configs_in_pr_description.result == 'success')
    runs-on: ubuntu-latest
    outputs:
      report_label: >-
        ${{
          needs.handle_configs_in_pr_description.outputs.report_label
          || needs.handle_generated_config_bundle.outputs.label
          || needs.handle_existing_config_bundle.outputs.label
          || ''
        }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Restore Generated Config and Project Files
        if: needs.handle_generated_config_bundle.result == 'success'
        uses: actions/cache@v4
        with:
          path: ${{ env.GENERATED_CONFIGS_PATH }}
          key: ${{ env.CACHE_KEY }}-generated-configs

      - name: Process local-based generated Config and Project File
        if: needs.handle_generated_config_bundle.result == 'success'
        env:
          DIFF_CONFIG_LINK: ${{ needs.handle_generated_config_bundle.outputs.config_link }}
          DIFF_PROJECTS_LINK: ${{ needs.handle_generated_config_bundle.outputs.projects_link }}
        run: |
          mkdir -p .ci-temp
          echo "Config link: $DIFF_CONFIG_LINK"
          echo "Projects link: $DIFF_PROJECTS_LINK"
          cp "$DIFF_CONFIG_LINK" .ci-temp/diff_config.xml
          # Determine the projects file extension
          if [[ "$DIFF_PROJECTS_LINK" == *.properties ]]; then
            cp "$DIFF_PROJECTS_LINK" .ci-temp/projects.properties
          else
            cp "$DIFF_PROJECTS_LINK" .ci-temp/projects.yml
          fi

      - name: Download URL-based Config and Project File
        id: download_files
        if: needs.handle_existing_config_bundle.result == 'success'
          || needs.handle_configs_in_pr_description.result == 'success'
        env:
          DIFF_CONFIG_LINK: ${{
            needs.handle_existing_config_bundle.outputs.config_link
            || needs.handle_configs_in_pr_description.outputs.config_link
            }}
          PATCH_CONFIG_LINK: ${{
            needs.handle_configs_in_pr_description.outputs.patch_config_link
            || ''
            }}
          NEW_MODULE_CONFIG_LINK: ${{
            needs.handle_configs_in_pr_description.outputs.new_module_config_link
            || ''
            }}
          DIFF_PROJECTS_LINK: ${{
            needs.handle_existing_config_bundle.outputs.projects_link
            || needs.handle_configs_in_pr_description.outputs.projects_link
            || env.DEFAULT_PROJECTS_LINK
            }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .ci-temp
          if ! ./.ci/diff-report.sh download-files; then
            ./.ci/append-to-github-output.sh "failed" "true"
            exit 1
          fi

      - name: Cache config files
        uses: actions/cache@v4
        with:
          path: |
            .ci-temp/*.xml
            .ci-temp/projects.yml
            .ci-temp/projects.properties
          key: ${{ env.CACHE_KEY }}-config-files

  make_report:
    needs: [ download_configs, checkout_and_cache ]
    if: always() && needs.download_configs.result == 'success'
    runs-on: ubuntu-latest
    outputs:
      message: ${{ steps.out.outputs.message }}
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Restore config files from cache
        uses: actions/cache/restore@v4
        with:
          path: |
            .ci-temp/*.xml
            .ci-temp/projects.yml
            .ci-temp/projects.properties
          key: ${{ env.CACHE_KEY }}-config-files

      - name: Restore local maven cache
        uses: actions/cache/restore@v4
        with:
          path: ~/.m2/repository
          key: checkstyle-maven-cache-${{ hashFiles('**/pom.xml') }}

      - name: Download DiffTool JAR
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "checkstyle/test-configs"
          tag: "diff-java-tool-${{ env.DIFF_TOOL_VERSION }}"
          fileName: "diff-java-tool-${{ env.DIFF_TOOL_VERSION }}.jar"
          out-file-path: ".ci-temp"

      - name: Download patch-diff-report-tool JAR
        uses: robinraju/release-downloader@v1.8
        with:
          repository: "checkstyle/contribution"
          tag: "patch-diff-report-tool-${{ env.PATCH_DIFF_TOOL_VERSION }}"
          fileName: >-
            patch-diff-report-tool-${{ env.PATCH_DIFF_TOOL_VERSION }}-jar-with-dependencies.jar
          out-file-path: ".ci-temp"

      - name: Set up Java 21
        uses: actions/setup-java@v4
        with:
          distribution: 'temurin'
          java-version: '21'

      - name: Configure AWS Credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Print config.xml
        run: |
          echo "Contents of config.xml:"
          echo "-------------------------"
          if [ -f .ci-temp/diff_config.xml ]; then
            cat .ci-temp/diff_config.xml
          else
            echo "diff_config.xml not found"
          fi
          echo "-------------------------"

      - name: Print projects file
        run: |
          if [ -f .ci-temp/projects.yml ]; then
            echo "Contents of projects.yml:"
            echo "-------------------------------"
            cat .ci-temp/projects.yml
            echo "-------------------------------"
          elif [ -f .ci-temp/projects.properties ]; then
            echo "Contents of projects.properties:"
            echo "-------------------------------"
            cat .ci-temp/projects.properties
            echo "-------------------------------"
          else
            echo "No projects file found"
          fi

      - name: Print patch_config.xml
        run: |
          echo "Contents of patch_config.xml:"
          echo "-----------------------------"
          if [ -f .ci-temp/patch_config.xml ]; then
            cat .ci-temp/patch_config.xml
          else
            echo "patch_config.xml not found"
          fi
          echo "-----------------------------"

      - name: Print new_module_config.xml
        run: |
          echo "Contents of new_module_config.xml:"
          echo "-----------------------------------"
          if [ -f .ci-temp/new_module_config.xml ]; then
            cat .ci-temp/new_module_config.xml
          else
            echo "new_module_config.xml not found"
          fi
          echo "-----------------------------------"

      - name: Generate report
        run: |
          cd .ci-temp
          bash
          PR_BRANCH="${{ needs.checkout_and_cache.outputs.pr_branch }}"
          REPO="${{ github.workspace }}/.ci-temp/checkstyle"
          BASE_BRANCH="upstream/master"
          export MAVEN_OPTS="-Xmx5g"

          # Paths to config files
          DIFF_CONFIG="${{ github.workspace }}/.ci-temp/diff_config.xml"
          PATCH_CONFIG="${{ github.workspace }}/.ci-temp/patch_config.xml"
          NEW_MODULE_CONFIG="${{ github.workspace }}/.ci-temp/new_module_config.xml"

          # Determine the projects file path
          if [ -f "${{ github.workspace }}/.ci-temp/projects.yml" ]; then
            PROJECTS_FILE="${{ github.workspace }}/.ci-temp/projects.yml"
          elif [ -f "${{ github.workspace }}/.ci-temp/projects.properties" ]; then
            PROJECTS_FILE="${{ github.workspace }}/.ci-temp/projects.properties"
          else
            echo "Error: Projects file not found."
            exit 1
          fi

          # Paths to the JAR files
          DIFFTOOL_JAR="diff-java-tool-${{ env.DIFF_TOOL_VERSION }}.jar"
          PATCH_DIFF_TOOL_JAR="patch-diff-report-tool-\
          ${{ env.PATCH_DIFF_TOOL_VERSION }}-jar-with-dependencies.jar"

          # Run DiffTool with appropriate arguments
          if [ -f "$NEW_MODULE_CONFIG" ]; then
            echo "Generating report for new module"
            java -jar "$DIFFTOOL_JAR" -r "$REPO" -p "$PR_BRANCH" -pc "$NEW_MODULE_CONFIG" \
              -m single -l "$PROJECTS_FILE" -xm "-Dcheckstyle.failsOnError=false" \
              --allowExcludes --diffToolJarPath "$PATCH_DIFF_TOOL_JAR"
          elif [ -f "$PATCH_CONFIG" ]; then
            echo "Generating report with patch config"
            java -jar "$DIFFTOOL_JAR" -r "$REPO" -b "$BASE_BRANCH" \
              -p "$PR_BRANCH" -bc "$DIFF_CONFIG" \
              -pc "$PATCH_CONFIG" -l "$PROJECTS_FILE" -xm "-Dcheckstyle.failsOnError=false" \
              --allowExcludes --diffToolJarPath "$PATCH_DIFF_TOOL_JAR"
          else
            echo "Generating standard diff report"
            java -jar "$DIFFTOOL_JAR" -r "$REPO" -b "$BASE_BRANCH" -p "$PR_BRANCH" \
              -c "$DIFF_CONFIG" -l "$PROJECTS_FILE" -xm "-Dcheckstyle.failsOnError=false" \
              --allowExcludes --diffToolJarPath "$PATCH_DIFF_TOOL_JAR"
          fi

      - name: Copy Report to AWS S3 Bucket
        env:
          LABEL: ${{ needs.download_configs.outputs.report_label }}
          COMMIT_SHA: ${{ needs.checkout_and_cache.outputs.commit_sha }}
        run: |
          bash
          TIME=$(date +%Y%H%M%S)
          FOLDER="${COMMIT_SHA}_$TIME"
          DIFF="./.ci-temp/reports/diff"
          LINK="https://${{env.AWS_BUCKET_NAME}}.s3.${{env.AWS_REGION}}.amazonaws.com"
          aws s3 cp $DIFF "s3://${{env.AWS_BUCKET_NAME}}/$FOLDER/reports/diff/" --recursive
          if [ -n "$LABEL" ]; then
            echo "$LABEL: " > .ci-temp/message
          fi
          echo "$LINK/$FOLDER/reports/diff/index.html" >> .ci-temp/message

      - name: Set output
        id: out
        run: |
          ./.ci/append-to-github-output.sh "message" "$(cat .ci-temp/message)"

  add_sad_Emoji:
    needs: [ check_pr_status, parse_comment, make_report ]
    if: cancelled()
    runs-on: ubuntu-latest
    steps:
      - name: Add sad Emoji
        uses: actions/github-script@v7
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            github.rest.reactions.createForIssueComment({
              owner: context.repo.owner,
              repo: context.repo.repo,
              comment_id: context.payload.comment.id,
              content: 'confused'
            });

  # should be always last step
  send_message:
    runs-on: ubuntu-latest
    needs: [
      handle_generated_config_bundle,
      download_configs,
      make_report ]
    if: always()
      && (needs.make_report.result == 'failure'
          || needs.make_report.outputs.message != ''
          || needs.download_configs.result == 'failure'
          || needs.handle_generated_config_bundle.result == 'failure')
    steps:
      - name: Restore cache
        uses: actions/cache/restore@v4
        with:
          path: .
          key: ${{ env.CACHE_KEY }}
          fail-on-cache-miss: true

      - name: Get message
        env:
          MSG: ${{ needs.make_report.outputs.message }}
          DOWNLOAD_RESULT: ${{ needs.download_configs.result }}
          MAKE_REPORT_RESULT: ${{ needs.make_report.result }}
          GENERATED_CONFIG_RESULT: ${{ needs.handle_generated_config_bundle.result }}
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          mkdir -p .ci-temp
          JOBS_LINK="https://github.com/checkstyle/checkstyle/actions/runs/${{github.run_id}}"
          if [ "$DOWNLOAD_RESULT" == "failure" ]; then
            {
              echo "Failed to download or process the specified configuration(s)."
              echo "Error details: $DOWNLOAD_ERROR"
              echo "<br>Please ensure you've used one of the following commands correctly:"
              echo "- 'GitHub, generate report for <config_bundle_path>'"
              echo "- 'GitHub, generate report by config from <file_path>'"
              echo "- 'GitHub, generate report for configs in PR description'"
              echo "<br>And check that all specified configs or files exist and are valid."
              echo "<br>Link: $JOBS_LINK"
            } > .ci-temp/message
          elif [ "$GENERATED_CONFIG_RESULT" == "failure" ]; then
            {
              echo "Failed to generate config from the specified file."
              echo "Please ensure the file exists and the path is correct."
              echo "<br>Usage: 'GitHub, generate report by config from <file_path>'"
              echo "<br>Link: $JOBS_LINK"
            } > .ci-temp/message
          elif [ "$MAKE_REPORT_RESULT" == "failure" ]; then
            {
              echo "Report generation failed. Please check the logs for more details."
              echo "<br>Link: $JOBS_LINK"
            } > .ci-temp/message
          elif [ -z "$MSG" ]; then
            API_LINK="https://api.github.com/repos/checkstyle/checkstyle/actions/runs/${{github.run_id}}/jobs"
            curl --fail-with-body -X GET "${API_LINK}" \
              -H "Accept: application/vnd.github+json" \
              -H "Authorization: token $GITHUB_TOKEN" \
              -o .ci-temp/info.json
            jq '.jobs' .ci-temp/info.json > ".ci-temp/jobs"
            jq '.[] | select(.conclusion == "failure") | .name' .ci-temp/jobs > .ci-temp/job_name
            jq '.[] | select(.conclusion == "failure") | .steps' .ci-temp/jobs > .ci-temp/steps
            jq '.[] | select(.conclusion == "failure") | .name' .ci-temp/steps > .ci-temp/step_name
            {
              echo "Report generation failed on phase $(cat .ci-temp/job_name),"
              echo "step $(cat .ci-temp/step_name)."
              echo "<br>Link: $JOBS_LINK"
            } > .ci-temp/message
          else
            echo "$MSG" > .ci-temp/message
          fi

      - name: Set message
        id: out
        run: |
          ./.ci/append-to-github-output.sh "message" "$(cat .ci-temp/message)"

      - name: Comment PR
        uses: peter-evans/create-or-update-comment@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          repository: ${{ github.repository }}
          issue-number: ${{ github.event.issue.number }}
          body: ${{ steps.out.outputs.message }}
