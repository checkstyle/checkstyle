<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <head>
    <title>Metrics</title>
  </head>

  <body>
    <section name="Content">
      <macro name="toc">
        <param name="fromDepth" value="1"/>
        <param name="toDepth" value="1"/>
      </macro>
    </section>

    <section name="BooleanExpressionComplexity">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="BooleanExpressionComplexity_Description">
        <p>
          Restricts the number of boolean operators (<code>&#x26;&#x26;</code>, <code>||</code>,
          <code>&#x26;</code>, <code>|</code> and <code>^</code>) in an expression.
        </p>

        <p>
          Rationale: Too many conditions leads to code that is difficult
          to read and hence debug and maintain.
        </p>

        <p>
          Note that the operators <code>&#x26;</code> and
          <code>|</code> are not only integer bitwise operators, they are also the
          <a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-15.html#jls-15.22.2">
          non-shortcut versions</a> of the boolean operators
          <code>&#x26;&#x26;</code> and <code>||</code>.
        </p>
        <p>
          Note that <code>&#x26;</code>, <code>|</code> and <code>^</code> are not checked
          if they are part of constructor or method call
          because they can be applied to non boolean variables and
          Checkstyle does not know types of methods from different classes.
        </p>
      </subsection>

      <subsection name="Properties" id="BooleanExpressionComplexity_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>
                Specify the maximum number of boolean operations allowed in one
                expression.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>3</code></td>
              <td>3.4</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>
                subset of tokens
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAND">
                  LAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BAND">
                  BAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LOR">
                  LOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BOR">
                  BOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BXOR">
                  BXOR</a>
                  .
              </td>
              <td>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAND">
                    LAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BAND">
                  BAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LOR">
                  LOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BOR">
                  BOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BXOR">
                  BXOR</a>
                  .
              </td>
              <td>3.4</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="BooleanExpressionComplexity_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;BooleanExpressionComplexity&quot;/&gt;
        </source>
        <p>Code Example:</p>
        <source>
public class Test
{
  public static void main(String ... args)
  {
    boolean a = true;
    boolean b = false;

    boolean c = (a &amp; b) | (b ^ a);       // OK, 1(&amp;) + 1(|) + 1(^) = 3 (max allowed 3)

    boolean d = (a &amp; b) ^ (a || b) | a;  // violation, 1(&amp;) + 1(^) + 1(||) + 1(|) = 4
  }
}
        </source>
        <p>
          To configure the check with 5 allowed operation in boolean
          expression:
        </p>
        <source>
&lt;module name=&quot;BooleanExpressionComplexity&quot;&gt;
  &lt;property name=&quot;max&quot; value=&quot;5&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
public class Test
{
  public static void main(String ... args)
  {
    boolean a = true;
    boolean b = false;

    boolean c = (a &amp; b) | (b ^ a) | (a ^ b);   // OK, 1(&amp;) + 1(|) + 1(^) + 1(|) + 1(^) = 5

    boolean d = (a | b) ^ (a | b) ^ (a || b) &amp; b; // violation,
                                                 // 1(|) + 1(^) + 1(|) + 1(^) + 1(||) + 1(&amp;) = 6
  }
}
        </source>
        <p>
          To configure the check to ignore <code>&#x26;</code> and
          <code>|</code>:
        </p>
        <source>
&lt;module name="BooleanExpressionComplexity"&gt;
  &lt;property name="tokens" value="BXOR,LAND,LOR"/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
public class Test
{
  public static void main(String ... args)
  {
    boolean a = true;
    boolean b = false;

    boolean c = (!a &amp;&amp; b) | (a || !b) ^ a;    // OK, 1(&amp;&amp;) + 1(||) + 1(^) = 3
                                              // | is ignored here

    boolean d = a ^ (a || b) ^ (b || a) &amp; a; // violation, 1(^) + 1(||) + 1(^) + 1(||) = 4
                                             // &amp; is ignored here
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="BooleanExpressionComplexity_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+BooleanExpressionComplexity">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="BooleanExpressionComplexity_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22booleanExpressionComplexity%22">
            booleanExpressionComplexity</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="BooleanExpressionComplexity_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="BooleanExpressionComplexity_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="ClassDataAbstractionCoupling">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="ClassDataAbstractionCoupling_Description">
        <p>
          Measures the number of instantiations of other
          classes within the given class or record. This type of coupling is not
          caused by inheritance or the object oriented
          paradigm. Generally speaking, any data type with other data
          types as members or local variable that is an instantiation
          (object) of another class has data abstraction coupling (DAC).
          The higher the DAC, the more complex the structure of the class.
        </p>
        <p>
          This check processes files in the following way:
        </p>
        <ol>
          <li>
            Iterates over the list of tokens (defined below) and counts all mentioned classes.
            <ul>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT">
              PACKAGE_DEF</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#IMPORT">
              IMPORT</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF">
              CLASS_DEF</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF">
              INTERFACE_DEF</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF">
              ENUM_DEF</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_NEW">
              LITERAL_NEW</a>
              </li>
              <li>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF">
              RECORD_DEF</a>
              </li>
            </ul>
          </li>
          <li>
            If a class was imported with direct import (i.e.
            <code>import java.math.BigDecimal</code>), or the class was referenced with the
            package name (i.e. <code>java.math.BigDecimal value</code>) and the package was
            added to the <code>excludedPackages</code> parameter, the class does not
            increase complexity.
          </li>
          <li>
            If a class name was added to the <code>excludedClasses</code> parameter,
            the class does not increase complexity.
          </li>
        </ol>
      </subsection>

      <subsection name="Properties" id="ClassDataAbstractionCoupling_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>Specify the maximum threshold allowed.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>7</code></td>
              <td>3.4</td>
            </tr>
            <tr>
              <td>excludedClasses</td>
              <td>Specify user-configured class names to ignore.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>
                ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte,
                Character, Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet,
                Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException,
                IllegalStateException, IndexOutOfBoundsException, IntStream, Integer,
                LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map,
                NullPointerException, Object, Optional, OptionalDouble, OptionalInt, OptionalLong,
                Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short,
                SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder,
                SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void,
                boolean, byte, char, double, float, int, long, short, var, void</code>
              </td>
              <td>5.7</td>
            </tr>
            <tr>
              <td>excludeClassesRegexps</td>
              <td>Specify user-configured regular expressions to ignore classes.</td>
              <td><a href="property_types.html#RegularExpression">Regular Expressions</a></td>
              <td><code>^$</code></td>
              <td>7.7</td>
            </tr>
            <tr>
              <td>excludedPackages</td>
              <td>Specify user-configured packages to ignore.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>{}</code></td>
              <td>7.7</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="ClassDataAbstractionCoupling_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;/&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  Place place = new Place(); // Counted, 3
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  Place place = new Place(); // violation, total is 8
}
        </source>

        <p>
          To configure the check with a threshold of 2:
        </p>
        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;&gt;
  &lt;property name=&quot;max&quot; value=&quot;2&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  Place place = new Place(); // violation, total is 3
}
        </source>

        <p>
          To configure the check with three excluded classes <code>HashMap</code>,
          <code>HashSet</code> and <code>Place</code>:
        </p>
        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;&gt;
  &lt;property name=&quot;excludedClasses&quot; value=&quot;HashMap, HashSet, Place&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // Ignored
  Map map = new HashMap(); // Ignored
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  Place place = new Place(); // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // Ignored
  Map map = new HashMap(); // Ignored
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  Space space = new Space(); // violation, total is 8
}
        </source>

        <p>
          To configure the check to exclude classes with a regular expression
          <code>.*Reader$</code>:
        </p>
        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;&gt;
  &lt;property name=&quot;excludeClassesRegexps&quot; value=&quot;.*Reader$&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  BufferedReader br = new BufferedReader(); // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  File file = new File(); // violation, total is 8
}
        </source>

        <p>
          To configure the check with an excluded package <code>java.io</code>:
        </p>

        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;&gt;
  &lt;property name=&quot;excludedPackages&quot; value=&quot;java.io&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
import java.io.BufferedReader;

class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  BufferedReader br = new BufferedReader(); // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
import java.util.StringTokenizer;

class InputClassCoupling {
  Set set = new HashSet(); // HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // instantiation of 5 other user defined classes
  StringTokenizer st = new StringTokenizer(); // violation, total is 8
}
        </source>

        <p>
          Override property <code>excludedPackages</code> to mark some packages as excluded.
          Each member of <code>excludedPackages</code> should be a valid identifier:
        </p>
        <ul>
          <li>
            <code>java.util</code> - valid, excludes all classes inside <code>java.util</code>,
            but not from the subpackages.
          </li>
          <li>
            <code>java.util.</code> - invalid, should not end with a dot.
          </li>
          <li>
            <code>java.util.*</code> - invalid, should not end with a star.
          </li>
        </ul>
        <p>
          Note, that checkstyle will ignore all classes from the <code>java.lang</code>
          package and its subpackages, even if the <code>java.lang</code> was not listed in
          the <code>excludedPackages</code> parameter.
        </p>
        <p>
          Also note, that <code>excludedPackages</code> will not exclude classes, imported via
          wildcard (e.g. <code>import java.math.*</code>). Instead of wildcard import you should
          use direct import (e.g. <code>import java.math.BigDecimal</code>).
        </p>
        <p>
          Also note, that checkstyle will not exclude classes within the same file
          even if it was listed in the <code>excludedPackages</code> parameter. For example,
          assuming the config is
        </p>
        <source>
&lt;module name=&quot;ClassDataAbstractionCoupling&quot;&gt;
  &lt;property name=&quot;excludedPackages&quot; value=&quot;a.b&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          And the file <code>a.b.Foo.java</code> is:
        </p>
        <source>
package a.b;

import a.b.Bar;
import a.b.c.Baz;

class Foo {
  Bar bar; // Will be ignored, located inside ignored a.b package
  Baz baz; // Will not be ignored, located inside a.b.c package
  Data data; // Will not be ignored, same file

  class Data {
    Foo foo; // Will not be ignored, same file
  }
}
        </source>
        <p>
          The <code>bar</code> member will not be counted,
          since the <code>a.b</code> added to the <code>excludedPackages</code>.
          The <code>baz</code> member will be counted,
          since the <code>a.b.c</code> was not added to the <code>excludedPackages</code>.
          The <code>data</code> and <code>foo</code> members will be counted, as they are
          inside same file.
        </p>
      </subsection>

      <subsection name="Example of Usage" id="ClassDataAbstractionCoupling_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ClassDataAbstractionCoupling">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="ClassDataAbstractionCoupling_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22classDataAbstractionCoupling%22">
            classDataAbstractionCoupling</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="ClassDataAbstractionCoupling_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="ClassDataAbstractionCoupling_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="ClassFanOutComplexity">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="ClassFanOutComplexity_Description">
        <p>
          Checks the number of other types a given class/record/interface/enum/annotation
          relies on. Also the square of this has been shown to indicate the amount of
          maintenance required in functional programs (on a file basis) at least.
        </p>
        <p>
          This check processes files in the following way:
        </p>
        <ol>
          <li>
            Iterates over all tokens that might contain type reference.
          </li>
          <li>
            If a class was imported with direct import (i.e.
            <code>import java.math.BigDecimal</code>), or the class was referenced with the
            package name (i.e. <code>java.math.BigDecimal value</code>) and the package was
            added to the <code>excludedPackages</code> parameter, the class does not increase
            complexity.
          </li>
          <li>
            If a class name was added to the <code>excludedClasses</code> parameter,
            the class does not increase complexity.
          </li>
        </ol>
      </subsection>

      <subsection name="Properties" id="ClassFanOutComplexity_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>Specify the maximum threshold allowed.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>20</code></td>
              <td>3.4</td>
            </tr>
            <tr>
              <td>excludedClasses</td>
              <td>Specify user-configured class names to ignore.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>
                ArrayIndexOutOfBoundsException, ArrayList, Boolean, Byte,
                Character, Class, Collection, Deprecated, Deque, Double, DoubleStream, EnumSet,
                Exception, Float, FunctionalInterface, HashMap, HashSet, IllegalArgumentException,
                IllegalStateException, IndexOutOfBoundsException, IntStream, Integer,
                LinkedHashMap, LinkedHashSet, LinkedList, List, Long, LongStream, Map,
                NullPointerException, Object, Optional, OptionalDouble, OptionalInt, OptionalLong,
                Override, Queue, RuntimeException, SafeVarargs, SecurityException, Set, Short,
                SortedMap, SortedSet, Stream, String, StringBuffer, StringBuilder,
                SuppressWarnings, Throwable, TreeMap, TreeSet, UnsupportedOperationException, Void,
                boolean, byte, char, double, float, int, long, short, var, void</code>
              </td>
              <td>5.7</td>
            </tr>
            <tr>
              <td>excludeClassesRegexps</td>
              <td>Specify user-configured regular expressions to ignore classes.</td>
              <td><a href="property_types.html#RegularExpression">Regular Expressions</a></td>
              <td><code>^$</code></td>
              <td>7.7</td>
            </tr>
            <tr>
              <td>excludedPackages</td>
              <td>
                Specify user-configured packages to ignore. All excluded packages
                should end with a period, so it also appends a dot to a package name.
              </td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>{}</code></td>
              <td>7.7</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="ClassFanOutComplexity_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;/&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  Place place = new Place(); // Counted, 3
  int value = 10; // int is ignored due to default excludedClasses property
  void method() {
    var result = "result"; // var is ignored due to default excludedClasses property
  }
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // mention of 18 other user defined classes
  Place place = new Place(); // violation, total is 21
}
        </source>

        <p>
          To configure the check with a threshold of 2:
        </p>
        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;&gt;
  &lt;property name=&quot;max&quot; value=&quot;2&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  Place place = new Place(); // violation, total is 3
}
        </source>

        <p>
          To configure the check with three excluded classes <code>HashMap</code>,
          <code>HashSet</code> and <code>Place</code>:
        </p>
        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;&gt;
  &lt;property name=&quot;excludedClasses&quot; value=&quot;HashMap, HashSet, Place&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set counted 1, HashSet ignored
  Map map = new HashMap(); // Map counted 2, HashMap ignored
  Date date = new Date(); // Counted, 3
  Time time = new Time(); // Counted, 4
  // mention of 16 other user defined classes
  Place place = new Place(); // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set counted 1, HashSet ignored
  Map map = new HashMap(); // Map counted 2, HashMap ignored
  Date date = new Date(); // Counted, 3
  Time time = new Time(); // Counted, 4
  // mention of 16 other user defined classes
  Space space = new Space(); // violation, total is 21
}
        </source>

        <p>
          To configure the check to exclude classes with a regular expression
          <code>.*Reader$</code>:
        </p>
        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;&gt;
  &lt;property name=&quot;excludeClassesRegexps&quot; value=&quot;.*Reader$&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // mention of 18 other user defined classes
  BufferedReader br; // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // mention of 18 other user defined classes
  File file; // violation, total is 21
}
        </source>

        <p>
          To configure the check with an excluded package <code>java.io</code>:
        </p>

        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;&gt;
  &lt;property name=&quot;excludedPackages&quot; value=&quot;java.io&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <p>
          The check passes without violations in the following:
        </p>
        <source>
import java.io.BufferedReader;

class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // mention of 18 other user defined classes
  BufferedReader br; // Ignored
}
        </source>

        <p>
          The check results in a violation in the following:
        </p>
        <source>
import java.util.StringTokenizer;

class InputClassComplexity {
  Set set = new HashSet(); // Set, HashSet ignored due to default excludedClasses property
  Map map = new HashMap(); // Map, HashMap ignored due to default excludedClasses property
  Date date = new Date(); // Counted, 1
  Time time = new Time(); // Counted, 2
  // mention of 18 other user defined classes
  StringTokenizer st; // violation, total is 21
}
        </source>

        <p>
          Override property <code>excludedPackages</code> to mark some packages as excluded.
          Each member of <code>excludedPackages</code> should be a valid identifier:
        </p>
        <ul>
          <li>
            <code>java.util</code> - valid, excludes all classes inside <code>java.util</code>,
            but not from the subpackages.
          </li>
          <li>
            <code>java.util.</code> - invalid, should not end with a dot.
          </li>
          <li>
            <code>java.util.*</code> - invalid, should not end with a star.
          </li>
        </ul>
        <p>
          Note, that checkstyle will ignore all classes from the <code>java.lang</code>
          package and its subpackages, even if the <code>java.lang</code> was not listed in
          the <code>excludedPackages</code> parameter.
        </p>
        <p>
          Also note, that <code>excludedPackages</code> will not exclude classes, imported via
          wildcard (e.g. <code>import java.math.*</code>). Instead of wildcard import you should
          use direct import (e.g. <code>import java.math.BigDecimal</code>).
        </p>
        <p>
          Also note, that checkstyle will not exclude classes within the same file
          even if it was listed in the <code>excludedPackages</code> parameter. For example,
          assuming the config is
        </p>
        <source>
&lt;module name=&quot;ClassFanOutComplexity&quot;&gt;
  &lt;property name=&quot;excludedPackages&quot; value=&quot;a.b&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          And the file <code>a.b.Foo.java</code> is:
        </p>
        <source>
package a.b;

import a.b.Bar;
import a.b.c.Baz;

class Foo {
  Bar bar; // Will be ignored, located inside ignored a.b package
  Baz baz; // Will not be ignored, located inside a.b.c package
  Data data; // Will not be ignored, same file

  class Data {
    Foo foo; // Will not be ignored, same file
  }
}
        </source>
        <p>
          The <code>bar</code> member will not be counted,
          since the <code>a.b</code> added to the <code>excludedPackages</code>.
          The <code>baz</code> member will be counted,
          since the <code>a.b.c</code> was not added to the <code>excludedPackages</code>.
          The <code>data</code> and <code>foo</code> members will be counted, as they are
          inside same file.
        </p>
      </subsection>

      <subsection name="Example of Usage" id="ClassFanOutComplexity_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ClassFanOutComplexity">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="ClassFanOutComplexity_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22classFanOutComplexity%22">
            classFanOutComplexity</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="ClassFanOutComplexity_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="ClassFanOutComplexity_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="CyclomaticComplexity">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="CyclomaticComplexity_Description">
        <p>
          Checks cyclomatic complexity against a specified limit.
          It is a measure of the minimum number of
          possible paths through the source and therefore the number of
          required tests, it is not a about quality of code!
          It is only applied to methods, c-tors,
          <a href="https://docs.oracle.com/javase/tutorial/java/javaOO/initial.html">
          static initializers and instance initializers</a>.
        </p>
        <p>
          The complexity is equal to the number of decision points <code> + 1</code>.
          Decision points: <code>if</code>, <code>while</code>
          , <code>do</code>, <code>for</code>, <code>?:</code>, <code>catch</code>
          , <code>switch</code>, <code>case</code>
          statements and operators <code>&#x26;&#x26;</code> and <code>||</code>
          in the body of target.
        </p>
        <p>
          By pure theory level 1-4 is considered easy to test, 5-7 OK, 8-10
          consider re-factoring to ease testing, and 11+ re-factor now as testing will be painful.
        </p>
        <p>
          When it comes to code quality measurement by this metric
          level 10 is very good level as a ultimate target (that is hard to archive).
          Do not be ashamed to have complexity level 15 or even higher,
          but keep it below 20 to catch really bad designed code automatically.
        </p>
        <p>
          Please use Suppression to avoid violations on cases that could not be split in few
          methods without damaging readability of code or encapsulation.
        </p>
      </subsection>

      <subsection name="Properties" id="CyclomaticComplexity_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>Specify the maximum threshold allowed.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>10</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>switchBlockAsSingleDecisionPoint</td>
              <td>Control whether to treat the whole switch block as a single decision point.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.11</td>
            </tr>

            <tr>
              <td>tokens</td>
              <td>tokens to check</td>

              <td>
                subset of tokens
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_WHILE">
                  LITERAL_WHILE</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO">
                  LITERAL_DO</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">
                  LITERAL_FOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                  LITERAL_IF</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_SWITCH">
                  LITERAL_SWITCH</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CASE">
                  LITERAL_CASE</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
                  LITERAL_CATCH</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#QUESTION">
                  QUESTION</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAND">
                  LAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LOR">
                  LOR</a>
                  .
              </td>

              <td>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_WHILE">
                  LITERAL_WHILE</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO">
                  LITERAL_DO</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">
                  LITERAL_FOR</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                  LITERAL_IF</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_SWITCH">
                  LITERAL_SWITCH</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CASE">
                  LITERAL_CASE</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
                  LITERAL_CATCH</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#QUESTION">
                  QUESTION</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAND">
                  LAND</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LOR">
                  LOR</a>
                  .
              </td>
              <td>3.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="CyclomaticComplexity_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;CyclomaticComplexity&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
class CyclomaticComplexity {
  // Cyclomatic Complexity = 11
  int a, b, c, d, n;
  public void foo() { // 1, function declaration
    if (a == 1) { // 2, if
      fun1();
    } else if (a == b // 3, if
      &amp;&amp; a == c) { // 4, &amp;&amp; operator
      if (c == 2) { // 5, if
        fun2();
      }
    } else if (a == d) { // 6, if
      try {
        fun4();
      } catch (Exception e) { // 7, catch
      }
    } else {
      switch(n) {
        case 1: // 8, case
          fun1();
          break;
        case 2: // 9, case
          fun2();
          break;
        case 3: // 10, case
          fun3();
          break;
        default:
          break;
      }
    }
    d = a &lt; 0 ? -1 : 1; // 11, ternary operator
  }
}
        </source>
        <p>
          To configure the check with a threshold of 4 and check only for while and do-while loops:
        </p>
        <source>
&lt;module name=&quot;CyclomaticComplexity&quot;&gt;
  &lt;property name=&quot;max&quot; value=&quot;4&quot;/&gt;
  &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_WHILE, LITERAL_DO&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
class CyclomaticComplexity {
  // Cyclomatic Complexity = 5
  int a, b, c, d;
  public void foo() { // 1, function declaration
    while (a &lt; b // 2, while
      &amp;&amp; a &gt; c) {
      fun();
    }
    if (a == b) {
      do { // 3, do
        fun();
      } while (d);
    } else if (c == d) {
      while (c &gt; 0) { // 4, while
        fun();
      }
      do { // 5, do-while
        fun();
      } while (a);
    }
  }
}
        </source>
        <p>
          To configure the check to consider switch-case block as one decision point.
        </p>
        <source>
&lt;module name=&quot;CyclomaticComplexity&quot;&gt;
  &lt;property name=&quot;switchBlockAsSingleDecisionPoint&quot; value=&quot;true&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
class CyclomaticComplexity {
  // Cyclomatic Complexity = 11
  int a, b, c, d, e, n;
  public void foo() { // 1, function declaration
    if (a == b) { // 2, if
      fun1();
    } else if (a == 0 // 3, if
      &amp;&amp; b == c) { // 4, &amp;&amp; operator
      if (c == -1) { // 5, if
        fun2();
      }
    } else if (a == c // 6, if
      || a == d) { // 7, || operator
      fun3();
    } else if (d == e) { // 8, if
      try {
        fun4();
      } catch (Exception e) { // 9, catch
      }
    } else {
      switch(n) { // 10, switch
        case 1:
          fun1();
          break;
        case 2:
          fun2();
          break;
        default:
          break;
      }
    }
    a = a &gt; 0 ? b : c; // 11, ternary operator
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="CyclomaticComplexity_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+CyclomaticComplexity">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="CyclomaticComplexity_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22cyclomaticComplexity%22">
            cyclomaticComplexity</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="CyclomaticComplexity_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="CyclomaticComplexity_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="JavaNCSS">
      <p>Since Checkstyle 3.5</p>
      <subsection name="Description" id="JavaNCSS_Description">
        <p>
          Determines complexity of methods, classes and files by
          counting the Non Commenting Source Statements (NCSS). This
          check adheres to the <a
          href="http://www.kclee.de/clemens/java/javancss/#specification">
          specification</a> for the
          <a href="http://www.kclee.de/clemens/java/javancss/">JavaNCSS-Tool</a>
          written by <b>Chr. Clemens Lee</b>.
        </p>
        <p>
          Roughly said the NCSS metric is calculated by
          counting the source lines which are not comments, (nearly)
          equivalent to counting the semicolons and opening curly braces.
        </p>
        <p>
          The NCSS for a class is summarized from the NCSS
          of all its methods, the NCSS of its nested classes and the
          number of member variable declarations.
        </p>
        <p>
          The NCSS for a file is summarized from the ncss of all its top level classes,
          the number of imports and the package declaration.
        </p>

        <p>
          Rationale: Too large methods and classes are hard to read and
          costly to maintain. A large NCSS number often means that a
          method or class has too many responsibilities and/or
          functionalities which should be decomposed into smaller units.
        </p>
      </subsection>

      <subsection name="Properties" id="JavaNCSS_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>methodMaximum</td>
              <td>
                Specify the maximum allowed number of non commenting lines in a
                method.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>50</code></td>
              <td>3.5</td>
            </tr>
            <tr>
              <td>classMaximum</td>
              <td>
                Specify the maximum allowed number of non commenting lines in a
                class.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>1500</code></td>
              <td>3.5</td>
            </tr>
            <tr>
              <td>fileMaximum</td>
              <td>
                Specify the maximum allowed number of non commenting lines in a
                file including all top level and nested classes.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>2000</code></td>
              <td>3.5</td>
            </tr>
            <tr>
              <td>recordMaximum</td>
              <td>
                  Specify the maximum allowed number of non commenting lines in a
                  record.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>150</code></td>
              <td>8.36</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="JavaNCSS_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;JavaNCSS&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public void test() {
  System.out.println("Line 1");
  // another 48 lines of code
  System.out.println("Line 50") // OK
  System.out.println("Line 51") // violation, the method crosses 50 non commented lines
}
        </source>
        <p>
          To configure the check with 40 allowed non commented lines for a method:
        </p>
        <source>
&lt;module name=&quot;JavaNCSS&quot;&gt;
  &lt;property name=&quot;methodMaximum&quot; value=&quot;40&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public void test() {
  System.out.println("Line 1");
  // another 38 lines of code
  System.out.println("Line 40") // OK
  System.out.println("Line 41") // violation, the method crosses 40 non commented lines
}
        </source>
        <p>
          To configure the check to set limit of non commented lines in class to 100:
        </p>
        <source>
&lt;module name="JavaNCSS"&gt;
  &lt;property name="classMaximum" value="100"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test {
  public void test() {
    System.out.println("Line 1");
    // another 47 lines of code
    System.out.println("Line 49");
  }

  public void test1() {
    System.out.println("Line 50");  // OK
    // another 47 lines of code
    System.out.println("Line 98"); // violation
  }
}
        </source>
        <p>
          To configure the check to set limit of non commented lines in file to 200:
        </p>
        <source>
&lt;module name="JavaNCSS"&gt;
  &lt;property name="fileMaximum" value="200"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test1 {
  public void test() {
    System.out.println("Line 1");
    // another 48 lines of code
    System.out.println("Line 49");
  }

  public void test1() {
    System.out.println("Line 50");
    // another 47 lines of code
    System.out.println("Line 98"); // OK
  }
}

class Test2 {
  public void test() {
    System.out.println("Line 150"); // OK
  }

  public void test1() {
    System.out.println("Line 200"); // violation
  }
}
        </source>

      </subsection>
      <subsection name="Example of Usage" id="JavaNCSS_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+JavaNCSS">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="JavaNCSS_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22ncss.class%22">
            ncss.class</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22ncss.file%22">
            ncss.file</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22ncss.method%22">
            ncss.method</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22ncss.record%22">
            ncss.record</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="JavaNCSS_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="JavaNCSS_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="NPathComplexity">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="NPathComplexity_Description">
        <p>
          Checks the NPATH complexity against a specified limit.
        </p>
        <p>
          The NPATH metric computes the number of possible execution
          paths through a function(method). It takes into account the nesting of
          conditional statements and multi-part boolean expressions
          (A &amp;&amp; B, C || D, E ? F :G and their combinations).
        </p>
        <p>
          The NPATH metric was designed base on Cyclomatic complexity to
          avoid problem of Cyclomatic complexity metric like nesting level within a
          function(method).
        </p>
        <p>
          Metric was described at <a href="http://dl.acm.org/citation.cfm?id=42379">
          "NPATH: a measure of execution pathcomplexity and its applications"</a>.
          If you need detailed description of algorithm, please read that article,
          it is well written and have number of examples and details.
        </p>

        <p>Here is some quotes:</p>

        <blockquote>An NPATH threshold value of 200 has been established
          for a function. The value 200 is based on studies done
          at AT&amp;T Bell Laboratories [1988 year].
        </blockquote>

        <blockquote>
          Some of the most effective methods of reducing the NPATH value include:
          <ul>
            <li>distributing functionality;</li>
            <li>implementing multiple if statements as a switch statement;</li>
            <li>
              creating a separate function for logical expressions with a high
              count of variables and (&amp;&amp;) and or (||) operators.
            </li>
          </ul>
        </blockquote>

        <blockquote>
        Although strategies to reduce the NPATH complexity
        of functions are important, care must be taken not to
        distort the logical clarity of the software by applying a
        strategy to reduce the complexity of functions. That is,
        there is a point of diminishing return beyond which a
        further attempt at reduction of complexity distorts the
        logical clarity of the system structure.
        </blockquote>

        <div class="wrapper">
          <table>
            <caption>Examples</caption>
            <thead><tr><th>Structure</th><th> Complexity expression </th></tr></thead>
            <tr><td>if ([expr]) { [if-range] }</td><td>NP(if-range) + 1 + NP(expr)</td></tr>
            <tr><td>if ([expr]) { [if-range] } else { [else-range] }</td><td>NP(if-range)
                    + NP(else-range) + NP(expr)</td></tr>
            <tr>
              <td>while ([expr]) { [while-range] } </td><td>NP(while-range) + NP(expr) + 1</td>
            </tr>
            <tr><td>do { [do-range] } while ([expr])</td><td>NP(do-range) + NP(expr) + 1</td></tr>
            <tr><td>for([expr1]; [expr2]; [expr3]) { [for-range] }</td><td>NP(for-range) + NP(expr1)
                    + NP(expr2) + NP(expr3) + 1</td></tr>
            <tr><td>switch ([expr]) { case : [case-range] default: [default-range] }</td>
              <td>S(i=1:i=n)NP(case-range[i]) + NP(default-range) + NP(expr)</td>
            </tr>
            <tr><td>[expr1] ? [expr2] : [expr3]</td><td>NP(expr1) + NP(expr2) + NP(expr3) + 2
            </td></tr>
            <tr><td>goto label</td><td>1</td></tr>
            <tr><td>break</td><td>1</td></tr>
            <tr><td>Expressions</td><td>Number of &amp;&amp; and || operators in expression. No
                    operators - 0</td></tr>
            <tr><td>continue</td><td>1</td></tr>
            <tr><td>return</td><td>1</td></tr>
            <tr><td>Statement (even sequential statements)</td><td>1</td></tr>
            <tr><td>Empty block {}</td><td>1</td></tr>
            <tr><td>Function call</td><td>1</td></tr>
            <tr><td>Function(Method) declaration or Block</td><td>P(i=1:i=N)NP(Statement[i])</td>
            </tr>
          </table>
        </div>

        <p>
          <b>Rationale:</b> Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions(methods) that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.
          <b>Please do not be fanatic with limit 200</b>
          - choose number that suites your project style. Limit 200 is
          empirical number base on some sources of at AT&amp;T Bell Laboratories
          of 1988 year.
        </p>
      </subsection>

      <subsection name="Properties" id="NPathComplexity_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>Specify the maximum threshold allowed.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>200</code></td>
              <td>3.4</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="NPathComplexity_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;NPathComplexity&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public abstract class Test {

final int a = 0;
int b = 0;

public void foo() { // OK, NPath complexity is less than default threshold
  // function consists of one if-else block with an NPath Complexity of 3
  if (a &gt; 10) {
    if (a &gt; b) { // nested if-else decision tree adds 2 to the complexity count
      buzz();
    } else {
      fizz();
    }
  } else { // last possible outcome of the main if-else block, adds 1 to complexity
    buzz();
  }
}

public void boo() { // violation, NPath complexity is 217 (max allowed is 200)
  // looping through 3 switch statements produces 6^3 + 1 (217) possible outcomes
  for(int i = 0; i &lt; b; i++) { // for statement adds 1 to final complexity
    switch(i) { // each independent switch statement multiplies complexity by 6
      case a:
        // ternary with &amp;&amp; adds 3 to switch's complexity
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        // ternary with || adds 3 to switch's complexity
        print(f(i) || g(i) ? fizz() : buzz());
    }
    switch(i - 1) { // multiplies complexity by 6
      case a:
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        print(f(i) || g(i) ? fizz() : buzz());
    }
    switch(i + 1) { // multiplies complexity by 6
      case a:
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        print(f(i) || g(i) ? fizz() : buzz());
    }
  }
}

public abstract boolean f(int x);
public abstract boolean g(int x);
public abstract String fizz();
public abstract String buzz();
public abstract void print(String str);
}
        </source>
        <p>
          To configure the check with a threshold of 100:
        </p>
        <source>
&lt;module name=&quot;NPathComplexity&quot;&gt;
  &lt;property name=&quot;max&quot; value=&quot;100&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public abstract class Test1 {
public void foo() { // violation, NPath complexity is 128 (max allowed is 100)
  int a,b,t,m,n;
  a=b=t=m=n = 0;

  // Complexity is achieved by choosing from 2 options 7 times (2^7 = 128 possible outcomes)
  if (a &gt; b) { // non-nested if-else decision tree multiplies complexity by 2
    bar();
  } else {
    baz();
  }

  print(t &gt; 1 ? bar() : baz()); // 5 ternary statements multiply complexity by 2^5
  print(t &gt; 2 ? bar() : baz());
  print(t &gt; 3 ? bar() : baz());
  print(t &gt; 4 ? bar() : baz());
  print(t &gt; 5 ? bar() : baz());

  if (m &gt; n) { // multiplies complexity by 2
    baz();
  } else {
    bar();
  }
}

public abstract String bar();
public abstract String baz();
public abstract void print(String str);
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="NPathComplexity_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NPathComplexity">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="NPathComplexity_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22npathComplexity%22">
            npathComplexity</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="NPathComplexity_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="NPathComplexity_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
