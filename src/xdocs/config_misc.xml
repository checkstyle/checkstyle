<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <head>
    <title>Miscellaneous</title>
  </head>

  <body>
    <section name="Content">
      <macro name="toc">
        <param name="fromDepth" value="1"/>
        <param name="toDepth" value="1"/>
      </macro>
    </section>

    <section name="ArrayTypeStyle">
      <p>Since Checkstyle 3.1</p>
      <subsection name="Description" id="ArrayTypeStyle_Description">
        <p>
          Checks the style of array type definitions. Some like Java style:
          <code>public static void main(String[] args)</code> and some like
          C style: <code>public static void main(String args[])</code>.
        </p>
        <p>
          By default the Check enforces Java style.
        </p>
        <p>
          This check strictly enforces only Java style for method return types
          regardless of the value for 'javaStyle'. For example, <code>byte[] getData()</code>.
          This is because C doesn't compile methods with array declarations on the name.
        </p>
      </subsection>

      <subsection name="Properties" id="ArrayTypeStyle_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>javaStyle</td>
              <td>
                Control whether to enforce Java style (true) or C style (false).
              </td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>true</code></td>
              <td>3.1</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="ArrayTypeStyle_Examples">
        <p>
          To configure the check to enforce Java style:
        </p>
        <source>
&lt;module name=&quot;ArrayTypeStyle&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public class MyClass {
  int[] nums; // OK
  String strings[]; // violation

  char[] toCharArray() { // OK
    return null;
  }

  byte getData()[] { // violation
    return null;
  }
}
        </source>
        <p>
          To configure the check to enforce C style:
        </p>
        <source>
&lt;module name=&quot;ArrayTypeStyle&quot;&gt;
  &lt;property name=&quot;javaStyle&quot; value=&quot;false&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public class MyClass {
  int[] nums; // violation
  String strings[]; // OK

  char[] toCharArray() { // OK
    return null;
  }

  byte getData()[] { // violation
    return null;
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="ArrayTypeStyle_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ArrayTypeStyle">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ArrayTypeStyle">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ArrayTypeStyle">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="ArrayTypeStyle_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22array.type.style%22">
            array.type.style</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="ArrayTypeStyle_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="ArrayTypeStyle_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="AvoidEscapedUnicodeCharacters">
      <p>Since Checkstyle 5.8</p>
      <subsection name="Description" id="AvoidEscapedUnicodeCharacters_Description">
        <p>
          Restricts using
          <a href = "https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.3">
          Unicode escapes</a> (such as \u221e).
          It is possible to allow using escapes for
          <a href="https://en.wiktionary.org/wiki/Appendix:Control_characters">
              non-printable, control characters</a>.
          Also, this check can be configured to allow using escapes
          if trail comment is present. By the option it is possible to
          allow using escapes if literal contains only them.
        </p>
      </subsection>

      <subsection name="Properties" id="AvoidEscapedUnicodeCharacters_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>allowEscapesForControlCharacters</td>
              <td>Allow use escapes for non-printable, control characters.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.8</td>
            </tr>
            <tr>
              <td>allowByTailComment</td>
              <td>Allow use escapes if trail comment is present.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.8</td>
            </tr>
            <tr>
              <td>allowIfAllCharactersEscaped</td>
              <td>Allow if all characters in literal are escaped.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.8</td>
            </tr>
            <tr>
              <td>allowNonPrintableEscapes</td>
              <td>Allow use escapes for non-printable, whitespace characters.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.8</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="AvoidEscapedUnicodeCharacters_Examples">
        <p>
            To configure the check:
        </p>
        <source>
&lt;module name=&quot;AvoidEscapedUnicodeCharacters&quot;/&gt;
        </source>
        <p>
          Examples of using Unicode:
        </p>
        <source>
String unitAbbrev = "Î¼s";      // Best: perfectly clear even without a comment.
String unitAbbrev = "\u03bcs"; // Poor: the reader has no idea what this is.
        </source>
        <p>
          An example of non-printable, control characters.
        </p>
        <source>
return '\ufeff' + content; // byte order mark
        </source>
        <p>
          An example of how to configure the check to allow using escapes
          for non-printable, control characters:
        </p>
        <source>
&lt;module name="AvoidEscapedUnicodeCharacters"&gt;
  &lt;property name="allowEscapesForControlCharacters" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example of using escapes with trail comment:
        </p>
        <source>
String unitAbbrev = "\u03bcs"; // Greek letter mu, "s"
String textBlockUnitAbbrev = """
          &#92;u03bcs"""; // Greek letter mu, "s"
        </source>
        <p>
          An example of how to configure the check to allow using escapes
          if trail comment is present:
        </p>
        <source>
&lt;module name="AvoidEscapedUnicodeCharacters"&gt;
  &lt;property name="allowByTailComment" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example of using escapes if literal contains only them:
        </p>
        <source>
String unitAbbrev = "\u03bc\u03bc\u03bc";
        </source>
        <p>
          An example of how to configure the check to allow escapes
          if literal contains only them:
        </p>
        <source>
&lt;module name="AvoidEscapedUnicodeCharacters"&gt;
  &lt;property name="allowIfAllCharactersEscaped" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>
          An example of how to configure the check to allow using escapes
          for non-printable, whitespace characters:
        </p>
        <source>
&lt;module name="AvoidEscapedUnicodeCharacters"&gt;
  &lt;property name="allowNonPrintableEscapes" value="true"/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="AvoidEscapedUnicodeCharacters_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+AvoidEscapedUnicodeCharacters">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+AvoidEscapedUnicodeCharacters">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="AvoidEscapedUnicodeCharacters_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22forbid.escaped.unicode.char%22">
            forbid.escaped.unicode.char</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="AvoidEscapedUnicodeCharacters_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="AvoidEscapedUnicodeCharacters_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="CommentsIndentation">
      <p>Since Checkstyle 6.10</p>
      <subsection name="Description" id="CommentsIndentation_Description">
        <p>
          Controls the indentation between comments and surrounding code.
          Comments are indented at the same level as the surrounding code.
          Detailed info about such convention can be found
          <a href="styleguides/google-java-style-20180523/javaguide.html#s4.8.6.1-block-comment-style">
          here</a>
        </p>
        <p>Please take a look at the following examples to understand how the check works:</p>

        <p>Example #1: Block comments.</p>
        <source>
1   /*
2    * it is Ok
3    */
4   boolean bool = true;
5
6     /* violation
7      * (block comment should have the same indentation level as line 9)
8      */
9   double d = 3.14;
        </source>
        <p>Example #2: Comment is placed at the end of the block and has previous statement.</p>
        <source>
1   public void foo1() {
2     foo2();
3     // it is OK
4   }
5
6   public void foo2() {
7     foo3();
8       // violation (comment should have the same indentation level as line 7)
9   }
        </source>
        <p>Example #3: Comment is used as a single line border to separate groups of methods.</p>
        <source>
1   /////////////////////////////// it is OK
2
3   public void foo7() {
4     int a = 0;
5   }
6
7     ///////////////////////////// violation (should have the same indentation level as line 9)
8
9   public void foo8() {}
        </source>
        <p>Example #4: Comment has distributed previous statement.</p>
        <source>
1   public void foo11() {
2     CheckUtil
3       .getFirstNode(new DetailAST())
4       .getFirstChild()
5       .getNextSibling();
6     // it is OK
7   }
8
9   public void foo12() {
10    CheckUtil
11      .getFirstNode(new DetailAST())
12      .getFirstChild()
13      .getNextSibling();
14              // violation (should have the same indentation level as line 10)
15  }
        </source>
        <p>
          Example #5: Single line block comment is placed within an empty code block.
          Note, if comment is placed at the end of the empty code block, we have Checkstyle's
          limitations to clearly detect user intention of explanation target - above or below. The
          only case we can assume as a violation is when a single line comment within the empty
          code block has indentation level that is lower than the indentation level of the closing
          right curly brace.
        </p>
        <source>
1   public void foo46() {
2     // comment
3     // block
4     // it is OK (we cannot clearly detect user intention of explanation target)
5   }
6
7   public void foo46() {
8  // comment
9  // block
10 // violation (comment should have the same indentation level as line 11)
11  }
        </source>
        <p>Example #6: 'fallthrough' comments and similar.</p>
        <source>
0   switch(a) {
1     case "1":
2       int k = 7;
3       // it is OK
4     case "2":
5       int k = 7;
6     // it is OK
7     case "3":
8       if (true) {}
9           // violation (should have the same indentation level as line 8 or 10)
10    case "4":
11    case "5": {
12      int a;
13    }
14    // fall through (it is OK)
15    case "12": {
16      int a;
17    }
18    default:
19      // it is OK
20  }
        </source>
        <p>Example #7: Comment is placed within a distributed statement.</p>
        <source>
1   String breaks = "J"
2   // violation (comment should have the same indentation level as line 3)
3       + "A"
4       // it is OK
5       + "V"
6       + "A"
7   // it is OK
8   ;
        </source>
        <p>
          Example #8: Comment is placed within an empty case block.
          Note, if comment is placed at the end of the empty case block, we have Checkstyle's
          limitations to clearly detect user intention of explanation target - above or below. The
          only case we can assume as a violation is when a single line comment within the empty case
          block has indentation level that is lower than the indentation level of the next case
          token.
        </p>
        <source>
1   case 4:
2     // it is OK
3   case 5:
4  // violation (should have the same indentation level as line 3 or 5)
5   case 6:
        </source>
        <p>Example #9: Single line block comment has previous and next statement.</p>
        <source>
1   String s1 = "Clean code!";
2      s.toString().toString().toString();
3   // single line
4   // block
5   // comment (it is OK)
6   int a = 5;
7
8   String s2 = "Code complete!";
9    s.toString().toString().toString();
10            // violation (should have the same indentation level as line 11)
11       // violation (should have the same indentation level as line 12)
12     // violation (should have the same indentation level as line 13)
13  int b = 18;
        </source>
        <p>Example #10: Comment within the block tries to describe the next code block.</p>
        <source>
1   public void foo42() {
2     int a = 5;
3     if (a == 5) {
4       int b;
5       // it is OK
6      } else if (a ==6) { ... }
7   }
8
9   public void foo43() {
10    try {
11      int a;
12     // Why do we catch exception here? - violation (not the same indentation as line 11)
13     } catch (Exception e) { ... }
14  }
        </source>
      </subsection>
      <subsection name="Properties" id="CommentsIndentation_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>
                subset of tokens
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SINGLE_LINE_COMMENT">
                  SINGLE_LINE_COMMENT</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BLOCK_COMMENT_BEGIN">
                  BLOCK_COMMENT_BEGIN</a>
                  .
              </td>
              <td>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#SINGLE_LINE_COMMENT">
                  SINGLE_LINE_COMMENT</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#BLOCK_COMMENT_BEGIN">
                  BLOCK_COMMENT_BEGIN</a>
                  .
              </td>
              <td>6.10</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="CommentsIndentation_Examples">
        <p>
          To configure the Check:
        </p>
        <source>
&lt;module name=&quot;CommentsIndentation&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="CommentsIndentation_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+CommentsIndentation">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+CommentsIndentation">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="CommentsIndentation_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22comments.indentation.block%22">
            comments.indentation.block</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22comments.indentation.single%22">
            comments.indentation.single</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="CommentsIndentation_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.indentation
        </p>
      </subsection>

      <subsection name="Parent Module" id="CommentsIndentation_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="DescendantToken">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="DescendantToken_Description">
        <p>
          Checks for restricted tokens beneath other tokens.
        </p>

        <p>
          WARNING: This is a very powerful and flexible check, but, at the
          same time, it is low-level and very implementation-dependent because
          its results depend on the grammar we use to build abstract syntax
          trees. Thus we recommend using other checks when they provide the
          desired functionality. Essentially, this check just works on the level
          of an abstract syntax tree and knows nothing about language structures.
        </p>
      </subsection>

      <subsection name="Properties" id="DescendantToken_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>limitedTokens</td>
              <td>Specify set of tokens with limited occurrences as descendants.</td>
              <td>
                subset of tokens
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html">TokenTypes</a>
              </td>
              <td><code>{}</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>minimumDepth</td>
              <td>Specify the minimum depth for descendant counts.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>maximumDepth</td>
              <td>Specify the maximum depth for descendant counts.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>2147483647</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>minimumNumber</td>
              <td>Specify a minimum count for descendants.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>maximumNumber</td>
              <td>Specify a maximum count for descendants.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>2147483647</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>sumTokenCounts</td>
              <td>
                Control whether the number of tokens found should be calculated
                from the sum of the individual token counts.
              </td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.0</td>
            </tr>
            <tr>
              <td>minimumMessage</td>
              <td>Define the violation message when the minimum count is not reached.</td>
              <td><a href="property_types.html#String">String</a></td>
              <td><code>null</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>maximumMessage</td>
              <td>Define the violation message when the maximum count is exceeded.</td>
              <td><a href="property_types.html#String">String</a></td>
              <td><code>null</code></td>
              <td>3.2</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>set of any supported
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html">
                    tokens</a>
              </td>
              <td><code>empty</code></td>
              <td>3.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="DescendantToken_Examples">
        <p>
          To configure the check to produce a violation on a switch statement
          with no default case:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_SWITCH"/&gt;
  &lt;property name="maximumDepth" value="2"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_DEFAULT"/&gt;
  &lt;property name="minimumNumber" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a
          condition in <code>for</code> which performs no check:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="FOR_CONDITION"/&gt;
  &lt;property name="limitedTokens" value="EXPR"/&gt;
  &lt;property name="minimumNumber" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on
          comparing <code>this</code> with <code>null</code> (i.e. <code>this ==
          null</code> and <code>this != null</code>):
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="EQUAL,NOT_EQUAL"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_THIS,LITERAL_NULL"/&gt;
  &lt;property name="maximumNumber" value="1"/&gt;
  &lt;property name="maximumDepth" value="1"/&gt;
  &lt;property name="sumTokenCounts" value="true"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a <code>String</code>
          literal equality check:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="EQUAL,NOT_EQUAL"/&gt;
  &lt;property name="limitedTokens" value="STRING_LITERAL"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
  &lt;property name="maximumDepth" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on an assert statement
          that may have side effects (formatted for browser display):
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_ASSERT"/&gt;
  &lt;property name="limitedTokens" value="ASSIGN,DEC,INC,POST_DEC,
    POST_INC,PLUS_ASSIGN,MINUS_ASSIGN,STAR_ASSIGN,DIV_ASSIGN,MOD_ASSIGN,
    BSR_ASSIGN,SR_ASSIGN,SL_ASSIGN,BAND_ASSIGN,BXOR_ASSIGN,BOR_ASSIGN,
    METHOD_CALL"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on an initializer in
          <code>for</code> performs no setup (where a <code>while</code>
          statement could be used instead):
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="FOR_INIT"/&gt;
  &lt;property name="limitedTokens" value="EXPR"/&gt;
  &lt;property name="minimumNumber" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a switch that is
          nested in another switch:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_SWITCH"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_SWITCH"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
  &lt;property name="minimumDepth" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a return statement
          from within a catch or finally block:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_FINALLY,LITERAL_CATCH"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_RETURN"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a try statement
          within a catch or finally block:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_CATCH,LITERAL_FINALLY"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_TRY"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
&lt;/module&gt;
        </source>

        <p>To configure the check to produce a violation on a switch with too many cases:</p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_SWITCH"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_CASE"/&gt;
  &lt;property name="maximumDepth" value="2"/&gt;
  &lt;property name="maximumNumber" value="10"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a method with
          too many local variables:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="METHOD_DEF"/&gt;
  &lt;property name="limitedTokens" value="VARIABLE_DEF"/&gt;
  &lt;property name="maximumDepth" value="2"/&gt;
  &lt;property name="maximumNumber" value="10"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a method
          with too many returns:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="METHOD_DEF"/&gt;
  &lt;property name="limitedTokens" value="LITERAL_RETURN"/&gt;
  &lt;property name="maximumNumber" value="3"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on an interface
          with too many fields:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="INTERFACE_DEF"/&gt;
  &lt;property name="limitedTokens" value="VARIABLE_DEF"/&gt;
  &lt;property name="maximumDepth" value="2"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a method
          which throws too many exceptions:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="LITERAL_THROWS"/&gt;
  &lt;property name="limitedTokens" value="IDENT"/&gt;
  &lt;property name="maximumNumber" value="1"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a method
          with too many expressions:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="METHOD_DEF"/&gt;
  &lt;property name="limitedTokens" value="EXPR"/&gt;
  &lt;property name="maximumNumber" value="200"/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on an empty statement:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="EMPTY_STAT"/&gt;
  &lt;property name="limitedTokens" value="EMPTY_STAT"/&gt;
  &lt;property name="maximumNumber" value="0"/&gt;
  &lt;property name="maximumDepth" value="0"/&gt;
  &lt;property name="maximumMessage"
    value="Empty statement is not allowed."/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to produce a violation on a class
          with too many fields:
        </p>
        <source>
&lt;module name="DescendantToken"&gt;
  &lt;property name="tokens" value="CLASS_DEF"/&gt;
  &lt;property name="limitedTokens" value="VARIABLE_DEF"/&gt;
  &lt;property name="maximumDepth" value="2"/&gt;
  &lt;property name="maximumNumber" value="10"/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="DescendantToken_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+DescendantToken">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="DescendantToken_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22descendant.token.max%22">
            descendant.token.max</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22descendant.token.min%22">
            descendant.token.min</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22descendant.token.sum.max%22">
            descendant.token.sum.max</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22descendant.token.sum.min%22">
            descendant.token.sum.min</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="DescendantToken_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="DescendantToken_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="FinalParameters">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="FinalParameters_Description">
        <p>
          Checks that parameters for methods, constructors, catch and for-each blocks are
          final. Interface, abstract, and native methods are not checked: the final
          keyword does not make sense for interface, abstract, and native method
          parameters as there is no code that could modify the parameter.
        </p>

        <p>
          Rationale: Changing the value of parameters during the execution of
          the method's algorithm can be confusing and should be avoided. A
          great way to let the Java compiler prevent this coding style is to
          declare parameters final.
        </p>
      </subsection>

      <subsection name="Properties" id="FinalParameters_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>ignorePrimitiveTypes</td>
              <td>Ignore primitive types as parameters.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.2</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>
                subset of tokens
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
                  METHOD_DEF</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CTOR_DEF">
                  CTOR_DEF</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
                  LITERAL_CATCH</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#FOR_EACH_CLAUSE">
                  FOR_EACH_CLAUSE</a>
                  .
              </td>
              <td>
                <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
                  METHOD_DEF</a>
                , <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CTOR_DEF">
                  CTOR_DEF</a>
                  .
              </td>
              <td>3.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="FinalParameters_Examples">
        <p>
          To configure the check to enforce final parameters for methods and
          constructors:
        </p>
        <source>
&lt;module name=&quot;FinalParameters&quot;/&gt;
        </source>

        <p>
          To configure the check to enforce final parameters only for
          constructors:
        </p>
        <source>
&lt;module name=&quot;FinalParameters&quot;&gt;
  &lt;property name=&quot;tokens&quot; value=&quot;CTOR_DEF&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          To configure the check to allow ignoring
          <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/datatypes.html">
           primitive datatypes</a> as parameters:
        </p>
        <source>
&lt;module name=&quot;FinalParameters&quot;&gt;
  &lt;property name=&quot;ignorePrimitiveTypes&quot; value=&quot;true&quot;/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="FinalParameters_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+FinalParameters">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+FinalParameters">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="FinalParameters_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22final.parameter%22">
            final.parameter</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="FinalParameters_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="FinalParameters_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="Indentation">
      <p>Since Checkstyle 3.1</p>
      <subsection name="Description" id="Indentation_Description">
        <p>
          Checks correct indentation of Java code.
        </p>

        <p>
          The idea behind this is that while pretty printers are
          sometimes convenient for bulk reformats of legacy code, they often
          either aren't configurable enough or just can't anticipate how
          format should be done. Sometimes this is personal preference, other
          times it is practical experience. In any case, this check should
          just ensure that a minimal set of indentation rules is followed.
        </p>
        <p>
          Basic offset indentation is used for indentation inside code blocks.
          For any lines that span more than 1, line wrapping indentation is used for those
          lines after the first.
          Brace adjustment, case, and throws indentations are all used only if those specific
          identifiers start the line. If, for example, a brace is used in the middle of the line,
          its indentation will not take effect.
          All indentations have an accumulative/recursive effect when they are triggered. If
          during a line wrapping, another code block is found and it doesn't end on that same
          line, then the subsequent lines afterwards, in that new code block, are increased on
          top of the line wrap and any indentations above it.
        </p>
        <p>Example:</p>
        <source>
if ((condition1 &amp;&amp; condition2)
        || (condition3 &amp;&amp; condition4)    // line wrap with bigger indentation
        ||!(condition5 &amp;&amp; condition6)) { // line wrap with bigger indentation
  field.doSomething()                    // basic offset
      .doSomething()                     // line wrap
      .doSomething( c -> {               // line wrap
        return c.doSome();               // basic offset
      });
}
        </source>
      </subsection>

      <subsection name="Properties" id="Indentation_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>basicOffset</td>
              <td>
                Specify how far new indentation level should be indented when on the next line.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>4</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>braceAdjustment</td>
              <td>Specify how far a braces should be indented when on the next line.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>caseIndent</td>
              <td>Specify how far a case label should be indented when on next line.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>4</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>throwsIndent</td>
              <td>Specify how far a throws clause should be indented when on next line.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>4</code></td>
              <td>5.7</td>
            </tr>
            <tr>
              <td>arrayInitIndent</td>
              <td>Specify how far an array initialisation should be indented when on next line.</td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>4</code></td>
              <td>5.8</td>
            </tr>
            <tr>
              <td>lineWrappingIndentation</td>
              <td>
                Specify how far continuation line should be indented when line-wrapping is present.
              </td>
              <td><a href="property_types.html#int">int</a></td>
              <td><code>4</code></td>
              <td>5.9</td>
            </tr>
            <tr>
              <td>forceStrictCondition</td>
              <td>Force strict indent level in line wrapping case. If value is true, line wrap
                  indent have to be same as lineWrappingIndentation parameter. If value is false,
                  line wrap indent could be bigger on any value user would like.</td>
              <td><a href="property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.3</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Indentation_Examples">
        <p>
          To configure the default check:
        </p>
        <source>
&lt;module name=&quot;Indentation&quot;/&gt;
        </source>
        <p>
          Example of Compliant code for default configuration
          (in comment name of property that controls indentations):
        </p>
        <source>
class Test {
    String field;               // basicOffset
    int[] arr = {               // basicOffset
        5,                      // arrayInitIndent
        6 };                    // arrayInitIndent
    void bar() throws Exception // basicOffset
    {                           // braceAdjustment
        foo();                  // basicOffset
    }                           // braceAdjustment
    void foo() {                // basicOffset
        if ((cond1 &amp;&amp; cond2)    // basicOffset
                  || (cond3 &amp;&amp; cond4)    // lineWrappingIndentation, forceStrictCondition
                  ||!(cond5 &amp;&amp; cond6)) { // lineWrappingIndentation, forceStrictCondition
            field.doSomething()          // basicOffset
                .doSomething()           // lineWrappingIndentation and forceStrictCondition
                .doSomething( c -> {     // lineWrappingIndentation and forceStrictCondition
                    return c.doSome();   // basicOffset
                });
        }
    }
    void fooCase()                // basicOffset
        throws Exception {        // throwsIndent
        switch (field) {          // basicOffset
            case "value" : bar(); // caseIndent
        }
    }
}
        </source>
        <p>
          To configure the check to enforce the indentation style recommended by
          Oracle:
        </p>

        <source>
&lt;module name=&quot;Indentation&quot;&gt;
  &lt;property name=&quot;caseIndent&quot; value=&quot;0&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example of Compliant code for default configuration
          (in comment name of property that controls indentation):
        </p>
        <source>
void fooCase() {          // basicOffset
    switch (field) {      // basicOffset
    case "value" : bar(); // caseIndent
    }
}
        </source>
        <p>
          To configure the Check to enforce strict condition in line-wrapping validation.
        </p>
        <source>
&lt;module name=&quot;Indentation&quot;&gt;
  &lt;property name=&quot;forceStrictCondition&quot; value=&quot;true&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Such config doesn't allow next cases
          even code is aligned further to the right for better reading:
        </p>
        <source>
void foo(String aFooString,
        int aFooInt) { // indent:8 ; expected: 4; violation, because 8 != 4
    if (cond1
        || cond2) {
        field.doSomething()
            .doSomething();
    }
    if ((cond1 &amp;&amp; cond2)
              || (cond3 &amp;&amp; cond4)    // violation
              ||!(cond5 &amp;&amp; cond6)) { // violation
        field.doSomething()
             .doSomething()          // violation
             .doSomething( c -> {    // violation
                 return c.doSome();
            });
    }
}
        </source>
        <p>
          But if forceStrictCondition = false, this code is valid:
        </p>
        <source>
void foo(String aFooString,
        int aFooInt) { // indent:8 ; expected: > 4; ok, because 8 > 4
    if (cond1
        || cond2) {
        field.doSomething()
            .doSomething();
    }
    if ((cond1 &amp;&amp; cond2)
              || (cond3 &amp;&amp; cond4)
              ||!(cond5 &amp;&amp; cond6)) {
        field.doSomething()
             .doSomething()
             .doSomething( c -> {
                 return c.doSome();
            });
    }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Indentation_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+Indentation">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+Indentation">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Indentation_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22indentation.child.error%22">
            indentation.child.error</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22indentation.child.error.multi%22">
            indentation.child.error.multi</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22indentation.error%22">
            indentation.error</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Findentation+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22indentation.error.multi%22">
            indentation.error.multi</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Indentation_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.indentation
        </p>
      </subsection>

      <subsection name="Parent Module" id="Indentation_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="NewlineAtEndOfFile">
      <p>Since Checkstyle 3.1</p>
      <subsection name="Description" id="NewlineAtEndOfFile_Description">
        <p>
          Checks whether files end with a line separator.
        </p>

        <p>
          Rationale: Any source files and text files in general should
          end with a line separator to let other easily add new content
          at the end of file and "diff" command does not show previous lines as changed.
        </p>
        <p>
          Example (line 36 should not be in diff):
        </p>
        <source>
@@ -32,4 +32,5 @@ ForbidWildcardAsReturnTypeCheck.returnTypeClassNamesIgnoreRegex
PublicReferenceToPrivateTypeCheck.name = Public Reference To Private Type

StaticMethodCandidateCheck.name = Static Method Candidate
-StaticMethodCandidateCheck.desc = Checks whether private methods should be declared as static.
\ No newline at end of file
+StaticMethodCandidateCheck.desc = Checks whether private methods should be declared as static.
+StaticMethodCandidateCheck.skippedMethods = Method names to skip during the check.
        </source>
        <p>
          It can also trick the VCS to report the wrong owner for such lines.
          An engineer who has added nothing but a newline character becomes
          the last known author for the entire line. As a result, a mate can ask
          him a question to which he will not give the correct answer.
        </p>
        <p>
          Old Rationale: CVS source control management
          systems will even print a warning when it
          encounters a file that doesn't end with a line separator.
        </p>
        <p>
          Attention: property fileExtensions works with files that are passed by similar property
          for at <a href="config.html#Checker">Checker</a>.
          Please make sure required file extensions are mentioned at Checker's fileExtensions
          property.
        </p>
      </subsection>

      <subsection name="Notes" id="NewlineAtEndOfFile_Notes">
        <p>
          This will check against the platform-specific default line separator.
        </p>
        <p>
          It is also possible to enforce the use of a specific line-separator
          across platforms, with the <code>lineSeparator</code> property.
        </p>
      </subsection>

      <subsection name="Properties" id="NewlineAtEndOfFile_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>lineSeparator</td>
              <td>Specify the type of line separator.</td>
              <td><a href="property_types.html#LineSeparatorOption">LineSeparatorOption</a></td>
              <td><code>lf_cr_crlf</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>fileExtensions</td>
              <td>Specify the file type extension of the files to check.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>all files</code></td>
              <td>3.1</td>
            </tr>

          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="NewlineAtEndOfFile_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;NewlineAtEndOfFile&quot;/&gt;
        </source>
        <p>Example:</p>
        <source>
// File ending with a new line
public class Test {â¤¶
â¤¶
}â¤¶ // ok
Note: The comment // ok is a virtual, not actually present in the file

// File ending without a new line
public class Test1 {â¤¶
â¤¶
} // violation, the file does not end with a new line
        </source>

        <p>
          To configure the check to always use Unix-style line separators:
        </p>
        <source>
&lt;module name=&quot;NewlineAtEndOfFile&quot;&gt;
  &lt;property name=&quot;lineSeparator&quot; value=&quot;lf&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
// File ending with a new line
public class Test {â¤¶
â¤¶
}â¤¶ // ok
Note: The comment // ok is a virtual, not actually present in the file

// File ending without a new line
public class Test1 {â¤¶
â¤¶
}ââ¤¶ // violation, expected line ending for file is LF(\n), but CRLF(\r\n) is detected
        </source>

        <p>
          To configure the check to work only on Java, XML and Python files:
        </p>
        <source>
&lt;module name=&quot;NewlineAtEndOfFile&quot;&gt;
  &lt;property name=&quot;fileExtensions&quot; value=&quot;java, xml, py&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
// Any java file
public class Test {â¤¶
} // violation, file should end with a new line.

// Any py file
print("Hello World") // violation, file should end with a new line.

// Any txt file
This is a sample text file. // ok, this file is not specified in the config.
        </source>
      </subsection>

      <subsection name="Example of Usage" id="NewlineAtEndOfFile_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NewlineAtEndOfFile">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NewlineAtEndOfFile">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="NewlineAtEndOfFile_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22noNewlineAtEOF%22">
            noNewlineAtEOF</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22unable.open%22">
            unable.open</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22wrong.line.end%22">
            wrong.line.end</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="NewlineAtEndOfFile_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="NewlineAtEndOfFile_Parent_Module">
        <p>
          <a href="config.html#Checker">Checker</a>
        </p>
      </subsection>
    </section>

    <section name="NoCodeInFile">
      <p>Since Checkstyle 8.33</p>

      <subsection name="Description" id="NoCodeInFile_Description">
        <p>
          Checks whether file contains code.
          Files which are considered to have no code:
        </p>
        <ul>
          <li>
            File with no text
          </li>
          <li>
            File with single line comment(s)
          </li>
          <li>
            File with a multi line comment(s).
          </li>
        </ul>
      </subsection>

      <subsection name="Examples" id="NoCodeInFile_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;NoCodeInFile&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <p>
          Content of the files:
        </p>
        <source>
// single line comment // violation
        </source>
        <source>
/* // violation
 block comment
*/
        </source>
      </subsection>

      <subsection name="Example of Usage" id="NoCodeInFile_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NoCodeInFile">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="NoCodeInFile_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22nocode.in.file%22">
            nocode.in.file</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="NoCodeInFile_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="NoCodeInFile_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="OrderedProperties">
      <p>Since Checkstyle 8.22</p>
      <subsection name="Description" id="OrderedProperties_Description">
        <p>
          Detects if keys in properties files are in correct order.
        </p>
        <p>
          Rationale: Sorted properties make it easy for people to find required properties by name
          in file. It makes merges more easy. While there are no problems at runtime.
          This check is valuable only on files with string resources where order of lines
          does not matter at all, but this can be improved.
          E.g.: checkstyle/src/main/resources/com/puppycrawl/tools/checkstyle/messages.properties
          You may suppress warnings of this check for files that have an logical structure like
          build files or log4j configuration files. See SuppressionFilter.
          <code>
              &lt;suppress checks="OrderedProperties"
                  files="log4j.properties|ResourceBundle/Bug.*.properties|logging.properties"/&gt;
          </code>
        </p>
        <p>
          Known limitation: The key should not contain a newline.
          The string compare will work, but not the line number reporting.
        </p>
      </subsection>

      <subsection name="Properties" id="OrderedProperties_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>fileExtensions</td>
              <td>Specify file type extension of the files to check.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>.properties</code></td>
              <td>8.22</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="OrderedProperties_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;OrderedProperties&quot;/&gt;
        </source>
        <p>
          Example properties file:
        </p>
        <source>
A =65
a =97
key =107 than nothing
key.sub =k is 107 and dot is 46
key.png =value - violation
        </source>
        <p>
          We check order of key's only. Here we would like to use an Locale independent
          order mechanism, an binary order. The order is case insensitive and ascending.
        </p>
        <ul>
          <li>
            The capital A is on 65 and the lowercase a is on position 97 on the ascii table.
          </li>
          <li>
            Key and key.sub are in correct order here, because only keys are relevant.
            Therefore on line 5 you have only "key" an nothing behind.
            On line 6 you have "key." The dot is on position 46 which is higher than nothing.
            key.png will reported as violation because "png" comes before "sub".
          </li>
        </ul>

      </subsection>

      <subsection name="Example of Usage" id="OrderedProperties_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+OrderedProperties">
              Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="OrderedProperties_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22properties.notSorted.property%22">
              properties.notSorted.property</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22unable.open.cause%22">
              unable.open.cause</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="OrderedProperties_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="OrderedProperties_Parent_Module">
        <p>
          <a href="config.html#Checker">Checker</a>
        </p>
      </subsection>
    </section>

    <section name="OuterTypeFilename">
      <p>Since Checkstyle 5.3</p>
      <subsection name="Description" id="OuterTypeFilename_Description">
        <p>
          Checks that the outer type name and the file name match. For example,
          the class <code>Foo</code> must be in a file named
          <code>Foo.java</code>.
        </p>
      </subsection>

      <subsection name="Examples" id="OuterTypeFilename_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;OuterTypeFilename&quot;/&gt;
        </source>
        <p>Example of class Test in a file named Test.java</p>
        <source>
public class Test { // OK

}
        </source>
        <p>Example of class Foo in a file named Test.java</p>
        <source>
class Foo { // violation

}
        </source>
        <p>Example of interface Foo in a file named Test.java</p>
        <source>
interface Foo { // violation

}
        </source>
        <p>Example of enum Foo in a file named Test.java</p>
        <source>
enum Foo { // violation

}
        </source>
        <p>Example of record Foo in a file named Test.java</p>
        <source>
record Foo { // violation

}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="OuterTypeFilename_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+OuterTypeFilename">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+OuterTypeFilename">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="OuterTypeFilename_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22type.file.mismatch%22">
            type.file.mismatch</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="OuterTypeFilename_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="OuterTypeFilename_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="TodoComment">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="TodoComment_Description">
        <p>
          Checks for <code>TODO:</code> comments. Actually
          it is a generic
          <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/Pattern.html">
          regular
          expression</a> matcher on Java comments. To check for other
          patterns in Java comments, set the <code>format</code> property.
        </p>
      </subsection>

      <subsection name="Properties" id="TodoComment_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify pattern to match comments against.</td>
              <td><a href="property_types.html#Pattern">Pattern</a></td>
              <td><code>"TODO:"</code></td>
              <td>3.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Notes" id="TodoComment_Notes">
        <p>
          Using <code>TODO:</code> comments is a great way
          to keep track of tasks that need to be done. Having them
          reported by Checkstyle makes it very hard to forget about
          them.
        </p>
      </subsection>

      <subsection name="Examples" id="TodoComment_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;TodoComment&quot;/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
i++; // TODO: do differently in future   // violation
i++; // todo: do differently in future   // OK
        </source>
        <p>
          To configure the check for comments that contain <code>TODO</code> and <code>FIXME</code>:
        </p>
        <source>
&lt;module name=&quot;TodoComment&quot;&gt;
  &lt;property name=&quot;format&quot; value=&quot;(TODO)|(FIXME)&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
i++;   // TODO: do differently in future   // violation
i++;   // todo: do differently in future   // OK
i=i/x; // FIXME: handle x = 0 case         // violation
i=i/x; // FIX :  handle x = 0 case         // OK
        </source>
      </subsection>

      <subsection name="Example of Usage" id="TodoComment_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+TodoComment">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+TodoComment">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="TodoComment_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22todo.match%22">
            todo.match</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="TodoComment_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="TodoComment_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="TrailingComment">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="TrailingComment_Description">
        <p>
          The check to ensure that requires that comments be the only thing on
          a line. For the case of <code>//</code> comments that means that the only thing
          that should precede it is whitespace. It doesn't check comments if
          they do not end a line; for example, it accepts the following:
          <code>Thread.sleep( 10 /*some comment here*/ );</code> Format
          property is intended to deal with the <code>} // while</code> example.
        </p>

        <p>
          Rationale: Steve McConnell in <cite>Code Complete</cite> suggests that
          endline comments are a bad practice. An end line comment would be
          one that is on the same line as actual code. For example:
        </p>

        <source>
a = b + c;      // Some insightful comment
d = e / f;        // Another comment for this line
        </source>

        <p>
          Quoting <cite>Code Complete</cite> for the justification:
        </p>

        <ul>
          <li> &quot;The comments have to be aligned so that they do not
          interfere with the visual structure of the code. If you don't align
          them neatly, they'll make your listing look like it's been through a
          washing machine.&quot;
          </li>
          <li> &quot;Endline comments tend to be hard to format...It takes
          time to align them. Such time is not spent learning more about the
          code; it's dedicated solely to the tedious task of pressing the
          spacebar or tab key.&quot;
          </li>
          <li> &quot;Endline comments are also hard to maintain. If the code
          on any line containing an endline comment grows, it bumps the
          comment farther out, and all the other endline comments will have to
          bumped out to match. Styles that are hard to maintain aren't
          maintained....&quot;
          </li>
          <li> &quot;Endline comments also tend to be cryptic. The right side
          of the line doesn't offer much room and the desire to keep the
          comment on one line means the comment must be short. Work then goes
          into making the line as short as possible instead of as clear as
          possible. The comment usually ends up as cryptic as
          possible....&quot;
          </li>
          <li> &quot;A systemic problem with endline comments is that it's
          hard to write a meaningful comment for one line of code. Most
          endline comments just repeat the line of code, which hurts more than
          it helps.&quot;
          </li>
        </ul>

        <p>
          McConnell's comments on being hard to maintain when the size of the line
          changes are even more important in the age of automated
          refactorings.
        </p>
      </subsection>

      <subsection name="Properties" id="TrailingComment_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify pattern for strings allowed before the comment.</td>
              <td><a href="property_types.html#Pattern">Pattern</a></td>
              <td><code>"^[\s});]*$"</code></td>
              <td>3.4</td>
            </tr>
            <tr>
              <td>legalComment</td>
              <td>Define pattern for text allowed in trailing comments. (This
                  pattern will not be applied to multiline comments and the text of the
                  comment will be trimmed before matching.)</td>
              <td><a href="property_types.html#Pattern">Pattern</a></td>
              <td><code>null</code></td>
              <td>4.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="TrailingComment_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;TrailingComment&quot;/&gt;
        </source>

        <p>
          To configure the check so it enforces only comment on a line:
        </p>
        <source>
&lt;module name=&quot;TrailingComment&quot;&gt;
  &lt;property name=&quot;format&quot; value=&quot;^\\s*$&quot;/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="TrailingComment_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+TrailingComment">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="TrailingComment_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22trailing.comments%22">
            trailing.comments</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="TrailingComment_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="TrailingComment_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="Translation">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="Translation_Description">
        <p>
          Ensures the correct translation of code by checking property files for
          consistency regarding their keys. Two property files
          describing one and the same context are consistent if they
          contain the same keys. TranslationCheck also can check an existence of required
          translations which must exist in project, if <code>requiredTranslations</code>
          option is used.
        </p>

        <p>
          Consider the following properties file in the same directory:
        </p>
        <source>
#messages.properties
hello=Hello
cancel=Cancel

#messages_de.properties
hell=Hallo
ok=OK
        </source>

        <p>
          The Translation check will find the typo in the German <code>hello</code>
          key, the missing <code>ok</code> key in the default resource file and the
          missing <code>cancel</code> key in the German resource file:
        </p>
        <source>
messages_de.properties: Key 'hello' missing.
messages_de.properties: Key 'cancel' missing.
messages.properties: Key 'hell' missing.
messages.properties: Key 'ok' missing.
        </source>
      </subsection>

      <subsection name="Notes" id="Translation_Notes">
        <p>
          Language code for the property <code>requiredTranslations</code> is composed of
          the lowercase, two-letter codes as defined by
          <a href="https://en.wikipedia.org/wiki/List_of_ISO_639-1_codes">ISO 639-1</a>.
          Default value is empty String Set which means that only the existence
          of default translation is checked. Note, if you specify language codes (or just
          one language code) of required translations the check will also check for
          existence of default translation files in project.
        </p>
        <p>
          Attention: the check will perform the validation of ISO codes if the option
          is used. So, if you specify, for example, "mm" for language code, TranslationCheck
          will rise violation that the language code is incorrect.
        </p>
        <p>
          Attention: this Check could produce false-positives if it
          is used with <a href="config.html#Checker">Checker</a> that use cache (property
          "cacheFile") This is known design problem, will be addressed at
          <a href="https://github.com/checkstyle/checkstyle/issues/3539">issue</a>.
        </p>
      </subsection>

      <subsection name="Properties" id="Translation_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>fileExtensions</td>
              <td>
                Specify file type extension to identify translation files. Setting
                this property is typically only required if your
                translation files are preprocessed and the original files
                do not have the extension <code>.properties</code>
              </td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>.properties</code></td>
              <td>3.0</td>
            </tr>
            <tr>
              <td>baseName</td>
              <td>Specify
                <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/ResourceBundle.html">
                Base name</a> of resource bundles which contain message resources. It helps
                the check to distinguish config and localization resources.
              </td>
              <td><a href="property_types.html#Pattern">Pattern</a></td>
              <td><code>"^messages.*$"</code></td>
              <td>6.17</td>
            </tr>
            <tr>
              <td>requiredTranslations</td>
              <td>
                Specify language codes of required translations which must exist in project.
              </td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>{}</code></td>
              <td>6.11</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Translation_Examples">
        <p>
          To configure the check to check only files which have '.properties' and '.translations'
          extensions:
        </p>
        <source>
&lt;module name=&quot;Translation&quot;&gt;
  &lt;property name=&quot;fileExtensions&quot; value=&quot;properties, translations&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          Note, that files with the same path and base name but which have different
          extensions will be considered as files that belong to different resource bundles.
        </p>
        <p>
          An example of how to configure the check to validate only bundles which base names
          start with "ButtonLabels":
        </p>
        <source>
&lt;module name=&quot;Translation&quot;&gt;
  &lt;property name=&quot;baseName&quot; value=&quot;^ButtonLabels.*$&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check to check existence of Japanese and French translations:
        </p>
        <source>
&lt;module name=&quot;Translation&quot;&gt;
  &lt;property name=&quot;requiredTranslations&quot; value=&quot;ja, fr&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          The following example shows how the check works if there is a message bundle which
          element name contains language code, county code, platform name.
          Consider that we have the below configuration:
        </p>
        <source>
&lt;module name=&quot;Translation&quot;&gt;
  &lt;property name=&quot;requiredTranslations&quot; value=&quot;es, fr, de&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>
          As we can see from the configuration, the TranslationCheck was configured to check
          an existence of 'es', 'fr' and 'de' translations. Lets assume that we have the resource
          bundle:
        </p>
        <source>
messages_home.properties
messages_home_es_US.properties
messages_home_fr_CA_UNIX.properties
        </source>
        <p>
          Than the check will rise the following violation:
          "0: Properties file 'messages_home_de.properties' is missing."
        </p>
      </subsection>

      <subsection name="Example of Usage" id="Translation_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+Translation">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+Translation">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Translation_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22translation.missingKey%22">
            translation.missingKey</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22translation.missingTranslationFile%22">
            translation.missingTranslationFile</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Translation_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="Translation_Parent_Module">
        <p>
          <a href="config.html#Checker">Checker</a>
        </p>
      </subsection>
    </section>

    <section name="UncommentedMain">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="UncommentedMain_Description">
        <p>
          Detects uncommented <code>main</code> methods.
        </p>

        <p>
          Rationale: A <code>main</code> method is often used for debugging
          purposes. When debugging is finished, developers often forget
          to remove the method, which changes the API and increases the
          size of the resulting class or JAR file. With the exception of
          the real program entry points, all <code>main</code> methods should be
          removed or commented out of the sources.
        </p>
      </subsection>

      <subsection name="Properties" id="UncommentedMain_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>excludedClasses</td>
              <td>Specify pattern for qualified names of classes which are allowed
              to have a <code>main</code> method.</td>
              <td><a href="property_types.html#Pattern">Pattern</a></td>
              <td><code>"^$"</code></td>
              <td>3.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="UncommentedMain_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;UncommentedMain&quot;/&gt;
        </source>
        <p>Example:</p>
        <source>
public class Game {
   public static void main(String... args){}   // violation
}

public class Main {
   public static void main(String[] args){}   // violation
}

public class Launch {
   //public static void main(String[] args){} // OK
}

public class Start {
   public void main(){}                       // OK
}

public record MyRecord1 {
    public void main(){}                       // violation
}

public record MyRecord2 {
    //public void main(){}                     // OK
}
        </source>
        <p>
          To configure the check to allow the <code>main</code> method for all classes
          with &quot;Main&quot; name:
        </p>
        <source>
&lt;module name=&quot;UncommentedMain&quot;&gt;
  &lt;property name=&quot;excludedClasses&quot; value=&quot;\.Main$&quot;/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Game {
   public static void main(String... args){}   // violation
}

public class Main {
   public static void main(String[] args){}   // OK
}

public class Launch {
   //public static void main(String[] args){} // OK
}

public class Start {
   public void main(){}                       // OK
}

public record MyRecord1 {
    public void main(){}                      // OK
}

        </source>
      </subsection>

      <subsection name="Example of Usage" id="UncommentedMain_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+UncommentedMain">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="UncommentedMain_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22uncommented.main%22">
            uncommented.main</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="UncommentedMain_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="UncommentedMain_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="UniqueProperties">
      <p>Since Checkstyle 5.7</p>
      <subsection name="Description" id="UniqueProperties_Description">
        <p>
          Detects duplicated keys in properties files.
        </p>
        <p>
          Rationale: Multiple property keys usually appear after merge
          or rebase of several branches. While there are no problems in
          runtime, there can be a confusion due to having different values
          for the duplicated properties.
        </p>

      </subsection>

      <subsection name="Properties" id="UniqueProperties_Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>fileExtensions</td>
              <td>Specify file type extension of the files to check.</td>
              <td><a href="property_types.html#String.5B.5D">String[]</a></td>
              <td><code>.properties</code></td>
              <td>5.7</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="UniqueProperties_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;UniqueProperties&quot;&gt;
  &lt;property name=&quot;fileExtensions&quot; value=&quot;properties&quot; /&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Example of Usage" id="UniqueProperties_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+UniqueProperties">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="UniqueProperties_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22properties.duplicate.property%22">
            properties.duplicate.property</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22unable.open.cause%22">
            unable.open.cause</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="UniqueProperties_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="UniqueProperties_Parent_Module">
        <p>
          <a href="config.html#Checker">Checker</a>
        </p>
      </subsection>
    </section>

    <section name="UpperEll">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="UpperEll_Description">
        <p>
          Checks that long constants are defined with an upper ell. That
          is <code>'L'</code> and not <code>'l'</code>. This is in accordance with the Java
          Language Specification,
          <a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-3.html#jls-3.10.1">
          Section 3.10.1</a>.
        </p>

        <p>
          Rationale: The lower-case ell <code>'l'</code> looks a lot like <code>1</code>.
        </p>
      </subsection>

      <subsection name="Examples" id="UpperEll_Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;UpperEll&quot;/&gt;
        </source>
        <source>
class Test {
  long var1 = 508987; // OK
  long var2 = 508987l; // violation
  long var3 = 508987L; // OK
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="UpperEll_Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Agoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+UpperEll">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources+filename%3Asun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+UpperEll">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig+filename%3Acheckstyle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+UpperEll">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="UpperEll_Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks+filename%3Amessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22upperEll%22">
            upperEll</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="config.html#Custom_messages">see the documentation</a> to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="UpperEll_Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="UpperEll_Parent_Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
