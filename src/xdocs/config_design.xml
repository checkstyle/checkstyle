<?xml version="1.0" encoding="ISO-8859-1"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 http://maven.apache.org/xsd/xdoc-2.0.xsd">

  <properties>
    <title>Class Design</title>
    <author>Checkstyle Development Team</author>
  </properties>

  <body>
    <section name="VisibilityModifier">
      <subsection name="Description">
        <p>
          Checks visibility of class members. Only static final members
          may be public; other class members must be private unless the
          property <code>protectedAllowed</code> or <code>packageAllowed</code> is set.
        </p>

        <p>
          Public members are not flagged if the name matches the public
          member regular expression (contains <code>"^serialVersionUID$"</code> by default).
        </p>
        <p>Note that
          Checkstyle 2 used to include <code>"^f[A-Z][a-zA-Z0-9]*$"</code> in the default
          pattern to allow names used in container-managed persistence for Enterprise JavaBeans (EJB) 1.1 with the default settings.
          With EJB 2.0 it is no longer necessary to have public access
          for persistent fields, so the default has been changed.
        </p>

        <p>
          Rationale: Enforce encapsulation.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>packageAllowed</td>
            <td>whether package visible members are allowed</td>
            <td><a href="property_types.html#boolean">boolean</a></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td>protectedAllowed</td>
            <td>whether protected members are allowed</td>
            <td><a href="property_types.html#boolean">boolean</a></td>
            <td><code>false</code></td>
          </tr>
          <tr>
            <td>publicMemberPattern</td>
            <td>pattern for public members that should be ignored</td>
            <td><a href="property_types.html#regexp">regular expression</a></td>
            <td><code>^serialVersionUID$</code></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;VisibilityModifier&quot;/&gt;
        </source>

        <p>
          To configure the check so that it allows package visible members:
        </p>
        <source>
&lt;module name=&quot;VisibilityModifier&quot;&gt;
    &lt;property name=&quot;packageAllowed&quot; value=&quot;true&quot;/&gt;
&lt;/module&gt;
        </source>

        <p>
          To configure the check so that it allows no public members:
        </p>
        <source>
&lt;module name=&quot;VisibilityModifier&quot;&gt;
    &lt;property name=&quot;publicMemberPattern&quot; value=&quot;^$&quot;/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="FinalClass">
      <subsection name="Description">
        <p>
          Checks that a class which has only private constructors is declared
          as final.
        </p>
      </subsection>

      <subsection name="Example">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;FinalClass&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="InterfaceIsType">
      <subsection name="Description">
        <p>
          Implements Joshua Bloch, Effective Java, Item 17 - Use Interfaces only to
          define types.
        </p>

        <p>
          According to Bloch, an interface should describe a <em>type</em>.
          It is therefore inappropriate to define an interface that does not
          contain any methods but only constants. The Standard class <a
          href="http://java.sun.com/j2se/1.4.1/docs/api/javax/swing/SwingConstants.html">javax.swing.SwingConstants</a>
          is an example of a class that would be flagged by this check.
        </p>

        <p>
          The check can be configured to also disallow marker interfaces like
          <code>java.io.Serializable</code>, that do not contain methods or
          constants at all.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>allowMarkerInterfaces</td>
            <td>
              Controls whether marker interfaces like Serializable are
              allowed.
            </td>
            <td><a href="property_types.html#boolean">Boolean</a></td>
            <td><code>true</code></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;InterfaceIsType&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="HideUtilityClassConstructor">
      <subsection name="Description">
        <p>
          Makes sure that utility classes (classes that contain only static
          methods or fields in their API) do not have a public constructor.
        </p>

        <p>
          Rationale: Instantiating utility classes does not make sense.  Hence
          the constructors should either be private or (if you want to allow
          subclassing) protected. A common mistake is forgetting to hide the
          default constructor.
        </p>

        <p>
          If you make the constructor protected you may want to consider the
          following constructor implementation technique to disallow
          instantiating subclasses:
        </p>

        <source>
public class StringUtils // not final to allow subclassing
{
    protected StringUtils() {
        // prevents calls from subclass
        throw new UnsupportedOperationException();
    }

    public static int count(char c, String s) {
        // ...
    }
}
        </source>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;HideUtilityClassConstructor&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="DesignForExtension">
      <subsection name="Description">
        <p>
          Checks that classes are designed for extension.  More specifically,
          it enforces a programming style where superclasses provide empty
          "hooks" that can be implemented by subclasses.
        </p>

        <p>
          The exact rule is that nonprivate, nonstatic methods of classes that
          can be subclassed must
        </p>

        <ul>
          <li>be abstract or</li>
          <li>be final or</li>
          <li>have an empty implementation.</li>
        </ul>

        <p>
          Rationale: This API design style protects superclasses against
          being broken by subclasses. The downside is that subclasses are
          limited in their flexibility, in particular they cannot prevent
          execution of code in the superclass, but that also means that
          subclasses cannot corrupt the state of the superclass by forgetting
          to call the superclass's method.
        </p>
      </subsection>

      <subsection name="Properties">
        <p> None.</p>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>

        <source>
&lt;module name=&quot;DesignForExtension&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="MutableException">
      <subsection name="Description">
        <p>
          Ensures that exception classes (classes with names conforming to
          some regular expression) are immutable, that is, that they have only final
          fields.
        </p>

        <p>
          The current algorithm is very simple: it checks that all members of
          exception are final.  The user can still mutate an exception's instance
          (e.g. Throwable has a method called <code>setStackTrace</code>
          which changes the exception's stack trace).  But, at least, all information
          provided by this exception type is unchangable.
        </p>

        <p>
          Rationale: Exception instances should represent an error
          condition. Having non final fields not only allows the state to be
          modified by accident and therefore mask the original condition but
          also allows developers to accidentally forget to set the initial state.
          In both cases, code catching the exception could draw incorrect
          conclusions based on the state.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>format</td>
            <td>pattern for exception class names</td>
            <td><a href="property_types.html#regexp">regular expression</a></td>
            <td><code>^.*Exception$|^.*Error$</code></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;MutableException&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="ThrowsCount">
      <subsection name="Description">
        <p>
          Restricts throws statements to a specified count (1 by default).
        </p>

        <p>
          Rationale: Exceptions form part of a method's interface. Declaring a
          method to throw too many differently rooted exceptions makes
          exception handling onerous and leads to poor programming practices
          such as writing code like <code>catch(Exception ex)</code>. This check forces developers to put
          exceptions into a hierarchy such that in the simplest case, only one
          type of exception need be checked for by a caller but any
          subclasses can be caught specifically if necessary.
        </p>
      </subsection>

      <subsection name="Properties">
        <table>
          <tr>
            <th>name</th>
            <th>description</th>
            <th>type</th>
            <th>default value</th>
          </tr>
          <tr>
            <td>max</td>
            <td>maximum allowed number of throws statements</td>
            <td><a href="property_types.html#integer">Integer</a></td>
            <td><code>1</code></td>
          </tr>
        </table>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check so that it doesn't allow more than two throws
          per method:
        </p>
        <source>
&lt;module name=&quot;ThrowsCount&quot;&gt;
    &lt;property name=&quot;max&quot; value=&quot;2&quot;/&gt;
&lt;/module&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="InnerTypeLast">
      <subsection name="Description">
        <p>
          Check nested (inner) classes/interfaces are declared at the
          bottom of the class after all method and field declarations.
        </p>
      </subsection>

      <subsection name="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;InnerTypeLast&quot;/&gt;
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>

    <section name="OneTopLevelClass">
      <subsection name="Description">
        <p>
          Checks that each top-level class, interface or
          enum resides in a source file of its own.
          Official description of a 'top-level' term:<a
          href="http://docs.oracle.com/javase/specs/jls/se7/html/jls-7.html#jls-7.6">7.6. Top Level Type Declarations</a>.
          If file doesn't contains public class, enum or interface,
          top-level type is the first type in file.
        </p>
      </subsection>

      <subsection name="Examples">
        <p>
          An example of check's configuration:
        </p>
        <source>
&lt;module name="OneTopLevelClass"/&gt;
        </source>
        <p>
          An example of check's configuration applied only to classes:
        </p>
        <source>
&lt;module name="OneTopLevelClass"&gt;
    &lt;property name="tokens" value="CLASS_DEF"&gt;
&lt;/module&gt;
        </source>
        <p>
          An example of code with violations:
        </p>
        <source>
public class Foo{
    //methods
}

class Foo2{
    //methods
}
        </source>
        <p>
          An example of code without public top-level type:
        </p>
        <source>
class Foo{ // top-level class
    //methods
}

class Foo2{
    //methods
}
        </source>
        <p>
          An example of code without violations:
        </p>
        <source>
public class Foo{
    //methods
}
        </source>
      </subsection>

      <subsection name="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module">
        <p>
          <a href="config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
