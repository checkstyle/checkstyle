<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>JavadocMethod</title>
  </head>
  <body>
    <section name="JavadocMethod">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="Description">
        <p>
          Checks the Javadoc of a method or constructor.
        </p>

        <p>
          Violates parameters and type parameters
          for which no param tags are
          present can be suppressed by defining property
          <code>allowMissingParamTags</code>.
        </p>

        <p>
          Violates methods which return non-void but for which no return tag is
          present can be suppressed by defining property
          <code>allowMissingReturnTag</code>.
        </p>

        <p>
          Violates exceptions which are declared to be thrown (by <code>throws</code> in the method
          signature or by <code>throw new</code> in the method body), but for which no throws tag is
          present by activation of property <code>validateThrows</code>.
          Note that <code>throw new</code> is not checked in the following places:
        </p>
        <ul>
          <li>
            Inside a try block (with catch). It is not possible to determine if the thrown
            exception can be caught by the catch block as there is no knowledge of the
            inheritance hierarchy, so the try block is ignored entirely. However, catch
            and finally blocks, as well as try blocks without catch, are still checked.
          </li>
          <li>
            Local classes, anonymous classes and lambda expressions. It is not known when the
            throw statements inside such classes are going to be evaluated, so they are ignored.
          </li>
        </ul>

        <p>
          ATTENTION: Checkstyle does not have information about hierarchy of exception types
          so usage of base class is considered as separate exception type.
          As workaround, you need to specify both types in javadoc (parent and exact type).
        </p>

        <p>
          Javadoc is not required on a method that is tagged with the
          <code>@Override</code> annotation. However, under
          Java 5 it is not possible to mark a method required for an
          interface (this was <i>corrected</i> under Java 6). Hence,
          Checkstyle supports using the convention of using a single
          <code>{@inheritDoc}</code> tag instead of all the
          other tags.
        </p>

        <p>
          Note that only inheritable items will allow the
          <code>{@inheritDoc}</code> tag to be used in place
          of comments. Static methods at all visibilities, private non-static
          methods and constructors are not inheritable.
        </p>

        <p>
          For example, if the following method is
          implementing a method required by an interface, then the
          Javadoc could be done as:
        </p>

        <source>
/** {@inheritDoc} */
public int checkReturnTag(final int aTagIndex,
                          JavadocTag[] aTags,
                          int aLineNo)
        </source>

      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>allowedAnnotations</td>
              <td>Specify annotations that allow missed documentation.</td>
              <td><a href="../../property_types.html#String.5B.5D">String[]</a></td>
              <td><code>Override</code></td>
              <td>6.0</td>
            </tr>
            <tr>
              <td>validateThrows</td>
              <td>Control whether to validate <code>throws</code> tags.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.0</td>
            </tr>
            <tr>
              <td>accessModifiers</td>
              <td>Specify the access modifiers where Javadoc comments are checked.</td>
              <td>
                <a href="../../property_types.html#AccessModifierOption.5B.5D">
                  AccessModifierOption[]
                </a>
              </td>
              <td><code>public, protected, package, private</code></td>
              <td>8.42</td>
            </tr>
            <tr>
              <td>allowMissingParamTags</td>
              <td>Control whether to ignore violations when a method has parameters
              but does not have matching <code>param</code> tags in the javadoc.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>allowMissingReturnTag</td>
              <td>Control whether to ignore violations when a method returns
              non-void type and does not have a <code>return</code> tag in the javadoc.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>3.1</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>

              <td>
                subset of tokens
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
                  METHOD_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CTOR_DEF">
                  CTOR_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF">
                  ANNOTATION_FIELD_DEF</a>
                ,<a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#COMPACT_CTOR_DEF">
                  COMPACT_CTOR_DEF</a>
                  .
              </td>
              <td>
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
                  METHOD_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CTOR_DEF">
                  CTOR_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_FIELD_DEF">
                  ANNOTATION_FIELD_DEF</a>
                ,<a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#COMPACT_CTOR_DEF">
                  COMPACT_CTOR_DEF</a>
                  .
              </td>
              <td>3.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          To configure the default check:
        </p>
        <source>
&lt;module name="JavadocMethod"/&gt;
        </source>
        <p> Example:</p>
        <source>
public class Test {

  /**
   *
   */
  Test(int x) {             // violation, param tag missing for x
  }

  /**
   *
   */
  public int foo(int p1) {  // violation, param tag missing for p1
      return p1;            // violation, return tag missing
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // violation, return tag missing
  }

  /**
   *
   */
  void bar(int p1) {        // violation, param tag missing for p1
  }                         // ok, no return tag for void method
}
        </source>
        <p>
          To configure the check for only <code>public</code>
          modifier, ignoring any missing param tags is:
        </p>

        <source>
&lt;module name="JavadocMethod"&gt;
  &lt;property name="accessModifiers" value="public"/&gt;
  &lt;property name="allowMissingParamTags" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>Example: </p>
        <source>
public class Test {

  /**
   *
   */
  Test(int x) {             // ok, only public methods checked
  }

  /**
   *
   */
  public int foo(int p1) {  // ok, missing param tags allowed
      return p1;            // violation, return tag missing
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // ok, only public methods checked
  }

  /**
   *
   */
  void bar(int p1) {        // ok, missing param tags allowed
  }                         // ok, no return tag for void method
}
        </source>
        <p>
            To configure the check for methods which are in <code>private</code> and
          <code>package</code>, but not any other modifier:
        </p>
        <source>
&lt;module name="JavadocMethod"&gt;
  &lt;property name="accessModifiers" value="private, package"/&gt;
&lt;/module&gt;
        </source>
        <p> Example:</p>
        <source>
class Test {

  /**
   *
   */
  Test(int x) {             // violation, param tag missing for x
  }

  /**
   *
   */
  public int foo(int p1) {  // ok, public methods not checked
      return p1;
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // violation, return tag missing
  }

  /**
   *
   */
  void bar(int p1) {        // violation, param tag missing for p1
  }                         // ok, no return tag for void method
}
        </source>
        <p>
              To configure the check to ignore any missing return tags:
        </p>
        <source>
&lt;module name="JavadocMethod"&gt;
    &lt;property name="allowMissingReturnTag" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p> Example:</p>
        <source>
public class Test {

  /**
   *
   */
  Test(int x) {             // violation, param tag missing for x
  }

  /**
   *
   */
  public int foo(int p1) {  // violation, param tag missing for p1
      return p1;            // ok, missing return tag allowed
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // ok, missing return tag allowed
  }

  /**
   *
   */
  void bar(int p1) {        // violation, param tag missing for p1
  }                         // ok, no return tag for void method
}
        </source>
        <p>
              To configure the check to ignore Methods with annotation <code>Deprecated</code>:
        </p>
        <source>
&lt;module name="JavadocMethod"&gt;
    &lt;property name="allowedAnnotations" value="Deprecated"/&gt;
&lt;/module&gt;
        </source>
        <p> Example:</p>
        <source>
public class Test {

  /**
   *
   */
  Test(int x) {             // violation, param tag missing for x
  }

  /**
   *
   */
  public int foo(int p1) {  // violation, param tag missing for p1
      return p1;            // violation, return tag missing
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // ok, Deprecated methods not checked
  }

  /**
   *
   */
  void bar(int p1) {        // violation, param tag missing for p1
  }                         // ok, no return tag for void method
}
        </source>
        <p>
              To configure the check only for tokens which are Constructor Definitions:
        </p>
        <source>
&lt;module name="JavadocMethod"&gt;
    &lt;property name="tokens" value="CTOR_DEF"/&gt;
&lt;/module&gt;
        </source>
        <p> Example:</p>
        <source>
public class Test {

  /**
   *
   */
  Test(int x) {             // violation, param tag missing for x
  }

  /**
   *
   */
  public int foo(int p1) {  // ok, method not checked
      return p1;            // ok, method not checked
  }

  /**
   *
   * @param p1 The first number
   */
  @Deprecated
  private int boo(int p1) {
      return p1;            // ok, method not checked
  }

  /**
   *
   */
  void bar(int p1) {        // ok, method not checked
  }
}
        </source>

        <p>
          To configure the check to validate <code>throws</code> tags, you can use following config.
        </p>
        <source>
&lt;module name="JavadocMethod"&gt;
  &lt;property name="validateThrows" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p> Example:</p>
        <source>
/**
 * Actual exception thrown is child class of class that is declared in throws.
 * It is limitation of checkstyle (as checkstyle does not know type hierarchy).
 * Javadoc is valid not declaring FileNotFoundException
 * BUT checkstyle can not distinguish relationship between exceptions.
 * @param file some file
 * @throws IOException if some problem
 */
public void doSomething8(File file) throws IOException {
    if (file == null) {
        throw new FileNotFoundException(); // violation
    }
}

/**
 * Exact throw type referencing in javadoc even first is parent of second type.
 * It is a limitation of checkstyle (as checkstyle does not know type hierarchy).
 * This javadoc is valid for checkstyle and for javadoc tool.
 * @param file some file
 * @throws IOException if some problem
 * @throws FileNotFoundException if file is not found
 */
public void doSomething9(File file) throws IOException {
    if (file == null) {
        throw new FileNotFoundException();
    }
}

/**
 * Ignore try block, but keep catch and finally blocks.
 *
 * @param s String to parse
 * @return A positive integer
 */
public int parsePositiveInt(String s) {
    try {
        int value = Integer.parseInt(s);
        if (value &lt;= 0) {
            throw new NumberFormatException(value + " is negative/zero"); // ok, try
        }
        return value;
    } catch (NumberFormatException ex) {
        throw new IllegalArgumentException("Invalid number", ex); // violation, catch
    } finally {
        throw new IllegalStateException("Should never reach here"); // violation, finally
    }
}

/**
 * Try block without catch is not ignored.
 *
 * @return a String from standard input, if there is one
 */
public String readLine() {
    try (Scanner sc = new Scanner(System.in)) {
        if (!sc.hasNext()) {
            throw new IllegalStateException("Empty input"); // violation, not caught
        }
        return sc.next();
    }
}

/**
 * Lambda expressions are ignored as we do not know when the exception will be thrown.
 *
 * @param s a String to be printed at some point in the future
 * @return a Runnable to be executed when the string is to be printed
 */
public Runnable printLater(String s) {
    return () -&gt; {
        if (s == null) {
            throw new NullPointerException(); // ok
        }
        System.out.println(s);
    };
}
        </source>
      </subsection>
      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+JavadocMethod">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fsun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+JavadocMethod">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+JavadocMethod">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.classInfo%22">
            javadoc.classInfo</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.duplicateTag%22">
            javadoc.duplicateTag</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.expectedTag%22">
            javadoc.expectedTag</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.invalidInheritDoc%22">
            javadoc.invalidInheritDoc</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.return.expected%22">
            javadoc.return.expected</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unusedTag%22">
            javadoc.unusedTag</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fjavadoc%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22javadoc.unusedTagGeneral%22">
            javadoc.unusedTagGeneral</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.javadoc
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
