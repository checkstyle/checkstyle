<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>ParameterName</title>
  </head>
  <body>
    <section name="ParameterName">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="Description">
        <p>
          Checks that method parameter names conform to a specified pattern.
          By using <code>accessModifiers</code> property it is possible
          to specify different formats for methods at different visibility levels.
        </p>
        <p>
          To validate <code>catch</code> parameters please use
          <a href="catchparametername.html#CatchParameterName">
            CatchParameterName
          </a>.
        </p>
        <p>
          To validate lambda parameters please use
          <a href="lambdaparametername.html#LambdaParameterName">
            LambdaParameterName
          </a>.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>format</td>
              <td>Specifies valid identifiers.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>"^[a-z][a-zA-Z0-9]*$"</code></td>
              <td>3.0</td>
            </tr>
            <tr>
              <td>ignoreOverridden</td>
              <td>
                Allows to skip methods with Override annotation from validation.
              </td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.12.1</td>
            </tr>
            <tr>
              <td>accessModifiers</td>
              <td>Access modifiers of methods where parameters are checked.</td>
              <td>
                <a href="../../property_types.html#AccessModifierOption.5B.5D">
                  AccessModifierOption[]
                </a>
              </td>
              <td><code>public, protected, package, private</code></td>
              <td>7.5</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name="ParameterName"/&gt;
        </source>
        <p>Code Example:</p>
        <source>
class MyClass {
  void method1(int v1) {} // OK
  void method2(int V2) {} // violation, name 'V2' must match pattern '^[a-z][a-zA-Z0-9]*$'
}
        </source>
        <p>
          An example of how to configure the check for names that begin with a lower case letter,
          followed by letters, digits, and underscores:
        </p>
        <source>
&lt;module name="ParameterName"&gt;
  &lt;property name="format" value="^[a-z][_a-zA-Z0-9]+$"/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
class MyClass {
  void method1(int v1) {} // OK
  void method2(int v_2) {} // OK
  void method3(int V3) {} // violation, name 'V3' must match pattern '^[a-z][_a-zA-Z0-9]+$'
}
        </source>

        <p>
            An example of how to configure the check to skip methods with Override annotation from
            validation:
        </p>
        <source>
&lt;module name="ParameterName"&gt;
  &lt;property name="ignoreOverridden" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
class MyClass {
  void method1(int v1) {} // OK
  void method2(int V2) {} // violation, name 'V2' must match pattern '^[a-z][a-zA-Z0-9]*$'
  @Override
  public boolean equals(Object V3) { // OK
    return true;
  }
}
        </source>
        <p>
          An example of how to configure the check for names that begin with
          a lower case letter, followed by letters and digits is:
        </p>
        <source>
&lt;module name="ParameterName"&gt;
  &lt;property name="format" value="^[a-z][a-zA-Z0-9]+$"/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
class MyClass {
  void method1(int v1) {} // OK
  void method2(int v_2) {} // violation, name 'v_2' must match pattern '^[a-z][a-zA-Z0-9]+$'
  void method3(int V3) {} // violation, name 'V3' must match pattern '^[a-z][a-zA-Z0-9]+$'
}
        </source>
        <p>
          The following configuration checks that the parameters always start with two
          lowercase characters and, in addition, that public method parameters cannot be one
          character long:
        </p>
        <source>
&lt;module name="ParameterName"&gt;
  &lt;property name="format" value="^[a-z]([a-z0-9][a-zA-Z0-9]*)?$"/&gt;
  &lt;property name="accessModifiers" value="protected, package, private"/&gt;
  &lt;message key="name.invalidPattern"
    value="Parameter name ''{0}'' must match pattern ''{1}''"/&gt;
&lt;/module&gt;
&lt;module name="ParameterName"&gt;
  &lt;property name="format" value="^[a-z][a-z0-9][a-zA-Z0-9]*$"/&gt;
  &lt;property name="accessModifiers" value="public"/&gt;
  &lt;message key="name.invalidPattern"
    value="Parameter name ''{0}'' must match pattern ''{1}''"/&gt;
&lt;/module&gt;
        </source>
        <p>Code Example:</p>
        <source>
class MyClass {
  void method1(int v1) {} // OK
  protected method2(int V2) {} // violation, Parameter name 'V2'
                               // must match pattern '^[a-z]([a-z0-9][a-zA-Z0-9]*)?$'
  private method3(int a) {} // OK
  public method4(int b) {} // violation, Parameter name 'b'
                           // must match pattern '^[a-z][a-z0-9][a-zA-Z0-9]*$'
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ParameterName">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fsun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+ParameterName">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+ParameterName">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fnaming%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22name.invalidPattern%22">
            name.invalidPattern</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p> com.puppycrawl.tools.checkstyle.checks.naming </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p> <a href="../../config.html#TreeWalker">TreeWalker</a> </p>
      </subsection>
    </section>
  </body>
</document>
