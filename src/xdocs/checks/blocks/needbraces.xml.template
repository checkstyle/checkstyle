<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>NeedBraces</title>
  </head>
  <body>
    <section name="NeedBraces">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="Description">
        <p> Checks for braces around code blocks. </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>allowSingleLineStatement</td>
              <td>allow single-line statements without braces.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.5</td>
            </tr>
            <tr>
              <td>allowEmptyLoopBody</td>
              <td>allow loops with empty bodies.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>6.12.1</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>subset of tokens
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO">
                  LITERAL_DO</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">
                  LITERAL_ELSE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">
                  LITERAL_FOR</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                  LITERAL_IF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_WHILE">
                  LITERAL_WHILE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CASE">
                  LITERAL_CASE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DEFAULT">
                  LITERAL_DEFAULT</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LAMBDA">
                  LAMBDA</a>
                .
              </td>

              <td>
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO">
                  LITERAL_DO</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">
                  LITERAL_ELSE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">
                  LITERAL_FOR</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                  LITERAL_IF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_WHILE">
                  LITERAL_WHILE</a>
                .
              </td>
              <td>3.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p> To configure the check: </p>
        <source>
&lt;module name="NeedBraces"/&gt;
        </source>
        <p>Example:</p>
        <source>
if (obj.isValid()) return true; // violation, single-line statements not allowed without braces
if (true) {                     // OK
    return true;
} else                          // violation, single-line statements not allowed without braces
    return false;
for (int i = 0; i &lt; 5; i++) {   // OK
     ++count;
}
do                              // violation, single-line statements not allowed without braces
    ++count;
while (false);
for (int j = 0; j &lt; 10; j++); // violation, empty loop body not allowed
for(int i = 0; i &lt; 10; value.incrementValue()); // violation, empty loop body not allowed
while (counter &lt; 10)          // violation, single-line statements not allowed without braces
    ++count;
while (value.incrementValue() &lt; 5); // violation, empty loop body not allowed
switch (num) {
  case 1: counter++; break;         // OK
}
        </source>
        <p>
          To configure the check for <code>if</code> and
          <code> else</code> blocks:
        </p>
        <source>
&lt;module name="NeedBraces"&gt;
  &lt;property name="tokens" value="LITERAL_IF, LITERAL_ELSE"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
if (obj.isValid()) return true; // violation, single-line statements not allowed without braces
if (true) {                     // OK
    return true;
} else                          // violation, single-line statements not allowed without braces
    return false;
for (int i = 0; i &lt; 5; i++) {   // OK
     ++count;
}
do                              // OK
    ++count;
while (false);
for (int j = 0; j &lt; 10; j++);   // OK
for(int i = 0; i &lt; 10; value.incrementValue()); // OK
while (counter &lt; 10)                            // OK
    ++count;
while (value.incrementValue() &lt; 5); // OK
switch (num) {
  case 1: counter++; break;         // OK
}
        </source>
        <p>
          To configure the check to allow single-line statements
          (<code>if, while, do-while, for</code>) without braces:
        </p>
        <source>
&lt;module name="NeedBraces"&gt;
  &lt;property name="allowSingleLineStatement" value="true"/&gt;
  &lt;property name="tokens"
         value="LITERAL_IF, LITERAL_WHILE, LITERAL_DO, LITERAL_FOR"/&gt;
&lt;/module&gt;
        </source>

        <p>
          Example:
        </p>
        <source>
if (obj.isValid()) return true;  // OK
if (true) {                      // OK
    return true;
} else                           // OK
    return false;
for (int i = 0; i &lt; 5; i++) {    // OK
    ++count;
}
do                               // OK
   ++count;
while (false);
for (int j = 0; j &lt; 10; j++);                   // violation, empty loop body not allowed
for(int i = 0; i &lt; 10; value.incrementValue()); // violation, empty loop body not allowed
while (counter &lt; 10)                 // OK
   ++count;
while (value.incrementValue() &lt; 5);  // violation, empty loop body not allowed
switch (num) {
  case 1: counter++; break;          // OK
}
while (obj.isValid()) return true;   // OK
do this.notify(); while (o != null); // OK
for (int i = 0; ; ) this.notify();   // OK
        </source>

        <p>
          To configure the check to allow <code>case, default</code> single-line statements
          without braces:
        </p>
        <source>
&lt;module name="NeedBraces"&gt;
  &lt;property name="tokens" value="LITERAL_CASE, LITERAL_DEFAULT"/&gt;
  &lt;property name="allowSingleLineStatement" value="true"/&gt;
&lt;/module&gt;
        </source>

        <p>
          Next statements won't be violated by check:
        </p>
        <source>
if (obj.isValid()) return true; // OK
if (true) {                     // OK
    return true;
} else                          // OK
    return false;
for (int i = 0; i &lt; 5; i++) {   // OK
     ++count;
}
do                              // OK
    ++count;
while (false);
for (int j = 0; j &lt; 10; j++);   // OK
for(int i = 0; i &lt; 10; value.incrementValue()); // OK
while (counter &lt; 10)                            // OK
   ++count;
while (value.incrementValue() &lt; 5); // OK
switch (num) {
  case 1: counter++; break;         // OK
  case 6: counter += 10; break;     // OK
  default: counter = 100; break;    // OK
}
        </source>
        <p>
          To configure the check to allow loops (<code>while, for</code>) with empty bodies:
        </p>
        <source>
&lt;module name="NeedBraces"&gt;
  &lt;property name="allowEmptyLoopBody" value="true"/&gt;
  &lt;property name="tokens" value="LITERAL_WHILE, LITERAL_FOR"/&gt;
&lt;/module&gt;
        </source>

        <p>
            Example:
        </p>
        <source>
if (obj.isValid()) return true; // OK
if (true) {                     // OK
    return true;
} else                          // OK
    return false;
for (int i = 0; i &lt; 5; i++) {   // OK
     ++count;
}
do                              // OK
    ++count;
while (false);
for (int j = 0; j &lt; 10; j++);   // OK
for(int i = 0; i &lt; 10; value.incrementValue()); // OK
while (counter &lt; 10)           // violation, single-line statements not allowed without braces
   ++count;
while (value.incrementValue() &lt; 5); // OK
switch (num) {
case 1: counter++; break;           // OK
}
        </source>
        <p>
          To configure the check to lambdas:
        </p>
        <source>
&lt;module name="NeedBraces"&gt;
  &lt;property name="tokens" value="LAMBDA"/&gt;
  &lt;property name="allowSingleLineStatement" value="true"/&gt;
&lt;/module&gt;
        </source>
        <p>
          Results in following:
        </p>
        <source>
allowedFuture.addCallback(result -&gt; assertEquals("Invalid response",
  EnumSet.of(HttpMethod.GET, HttpMethod.OPTIONS), result), // violation, lambda spans 2 lines
  ex -&gt; fail(ex.getMessage())); // OK

allowedFuture.addCallback(result -&gt; {
  return assertEquals("Invalid response",
    EnumSet.of(HttpMethod.GET, HttpMethod.OPTIONS), result);
  }, // OK
  ex -&gt; fail(ex.getMessage()));
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NeedBraces">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fsun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+NeedBraces">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+NeedBraces">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fblocks%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22needBraces%22">
            needBraces</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p> com.puppycrawl.tools.checkstyle.checks.blocks </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p> <a href="../../config.html#TreeWalker">TreeWalker</a> </p>
      </subsection>
    </section>
  </body>
</document>
