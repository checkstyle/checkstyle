<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>RightCurly</title>
  </head>
  <body>
    <section name="RightCurly">
      <p>Since Checkstyle 3.0</p>
      <subsection name="Description" id="Description">
        <p>
          Checks the placement of right curly braces (<code>'}'</code>) for code blocks.
          This check supports if-else, try-catch-finally blocks, switch statements, switch cases,
          while-loops, for-loops, method definitions, class definitions, constructor definitions,
          instance, static initialization blocks, annotation definitions and enum definitions.
          For right curly brace of expression blocks of arrays, lambdas and class instances
          please follow issue
          <a href="https://github.com/checkstyle/checkstyle/issues/5945">#5945</a>.
          For right curly brace of enum constant please follow issue
          <a href="https://github.com/checkstyle/checkstyle/issues/7519">#7519</a>.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>option</td>
              <td>Specify the policy on placement of a right curly brace (<code>'}'</code>).</td>
              <td><a href="../../property_types.html#RightCurlyOption">RightCurlyOption</a></td>
              <td><code>same</code></td>
              <td>3.0</td>
            </tr>
            <tr>
              <td>tokens</td>
              <td>tokens to check</td>
              <td>subset of tokens
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_TRY">
                    LITERAL_TRY</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
                    LITERAL_CATCH</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FINALLY">
                    LITERAL_FINALLY</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                    LITERAL_IF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">
                    LITERAL_ELSE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CLASS_DEF">
                    CLASS_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
                    METHOD_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#CTOR_DEF">
                    CTOR_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FOR">
                    LITERAL_FOR</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_WHILE">
                    LITERAL_WHILE</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_DO">
                    LITERAL_DO</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#STATIC_INIT">
                    STATIC_INIT</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INSTANCE_INIT">
                    INSTANCE_INIT</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ANNOTATION_DEF">
                    ANNOTATION_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#ENUM_DEF">
                    ENUM_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#INTERFACE_DEF">
                    INTERFACE_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#RECORD_DEF">
                    RECORD_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#COMPACT_CTOR_DEF">
                    COMPACT_CTOR_DEF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_SWITCH">
                    LITERAL_SWITCH</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CASE">
                    LITERAL_CASE</a>
                  .
              </td>
              <td>
                <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_TRY">
                    LITERAL_TRY</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_CATCH">
                    LITERAL_CATCH</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_FINALLY">
                    LITERAL_FINALLY</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_IF">
                    LITERAL_IF</a>
                , <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#LITERAL_ELSE">
                    LITERAL_ELSE</a>
                  .
              </td>
              <td>3.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example1-config"> To configure the check: </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;RightCurly&quot;/&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example1-code">Example:</p>
        <source>
public class Example1 {

  public void test() {

    boolean foo = false;
    if (foo) {
      bar();
    } // violation, 'should be on the same line'
    // as the next part of a multi-block statement (one that directly
    // contains multiple blocks: if/else-if/else, do/while or try/catch/finally).
    else {
      bar();
    }

    if (foo) {
      bar();
    } else {
      bar();
    }

    if (foo) { bar(); } int i = 0;
    // violation above, 'should be alone on a line.'

    if (foo) { bar(); }
    i = 0;

    try {
      bar();
    } // violation, 'should be on the same line'
    // as the next part of a multi-block statement (one that directly
    // contains multiple blocks: if/else-if/else, do/while or try/catch/finally).
    catch (Exception e) {
      bar();
    }

    try {
      bar();
    } catch (Exception e) {
      bar();
    }

  }

  private void bar() {
  }

  public void testSingleLine() { bar(); } // OK, because singleline is allowed
}
        </source>
        <p id="Example2-config">
          To configure the check with policy <code>alone</code> for <code> else</code> and
          <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
          METHOD_DEF</a>
          tokens:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;RightCurly&quot;&gt;
      &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;
      &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_ELSE, METHOD_DEF&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example2-code">Example:</p>
        <source>
public class Example2 {

  public void test() {

    boolean foo = false;
    if (foo) {
      bar();
    } else { bar(); }
    // violation above, 'should be alone on a line.'

    if (foo) {
      bar();
    } else {
      bar();
    }

    try {
      bar();
    } catch (Exception e) {
      // OK above because config is set to token METHOD_DEF and LITERAL_ELSE
      bar();
    }

  }

  private void bar() {
  }

  public void violate() { Object bar = &quot;bar&quot;; }
  // violation above, 'should be alone on a line.'

  public void ok() {
    bar();
  }
}
        </source>
        <p id="Example3-config">
          To configure the check with policy <code>alone</code> for
          <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">
          Switch</a>
          Statements and Switch Cases:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;RightCurly&quot;&gt;
      &lt;property name=&quot;option&quot; value=&quot;alone&quot;/&gt;
      &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_SWITCH, LITERAL_CASE&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example3-code">Example:</p>
        <source>
class Example3 {

  public void method0() {
    int mode = 0;
    int x;
    switch (mode) {
      case 1:
        int y = 1;
        break;
      case 2: {x = 1;}   // violation '}' at column 22 should be alone on a line'
      case 3: int z = 0; {break;} // ok, the braces is not a first child of case
      default:
        x = 0;
    } // ok, RightCurly is alone
  }

  public void method01() {
    int mode = 0;
    switch (mode) {
      case 1:
        int x = 1;
        break;
      default:
        x = 0; }
    // violation above, 'should be alone on a line.'
  }
}
        </source>
        <p id="Example4-config">
          To configure the check with policy <code>alone_or_singleline</code> for <code> if</code>
          and
          <a href="../../apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html#METHOD_DEF">
          METHOD_DEF</a>
          tokens:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;RightCurly&quot;&gt;
      &lt;property name=&quot;option&quot; value=&quot;alone_or_singleline&quot;/&gt;
      &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_IF, METHOD_DEF&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example4-code">Example:</p>
        <source>
public class Example4 {

  public void test() {

    boolean foo = false;
    if (foo) {
      bar();
    } else { // violation, 'should be alone on a line.'
      bar();
    }

    if (foo) {
      bar();
    }
    else {
      bar();
    }

    try {
      bar();
    } catch (Exception e) { // OK because config did not set token LITERAL_TRY
      bar();
    }

  }

  private void bar() {
  }

  public void violate() { bar(); } // OK , because singleline
}
        </source>
        <p id="Example5-config">
          To configure the check with policy <code>alone_or_singleline</code> for
          <a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/switch.html">
          Switch</a>
          Statements and Switch Cases:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;RightCurly&quot;&gt;
      &lt;property name=&quot;option&quot; value=&quot;alone_or_singleline&quot;/&gt;
      &lt;property name=&quot;tokens&quot; value=&quot;LITERAL_SWITCH, LITERAL_CASE&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example5-code">Example:</p>
        <source>
class Example5 {

  public void method0() {
    int mode = 0;
    int x;
    switch (mode) {
      case 1:
        int y = 1;
        break;
      case 2: {x = 1;}   // ok, RightCurly is in single line
      case 3: int z = 0; {break;} // ok, the braces is not a first child of case
      default:
        x = 0;
    }
  }

  public static void method7() {
    int mode = 0;
    switch (mode) {
      case 1:
        int x = 5;
    } // ok, RightCurly is on the same line as LeftCurly
  }

  public void method() {
    int mode = 0;
    int x;
    switch (mode) {
      case 1:
        x = 1; }
    // violation above, 'should be alone on a line.'
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+RightCurly">
            Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fsun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+RightCurly">
            Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+RightCurly">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fblocks%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22line.alone%22">
              line.alone
            </a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fblocks%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22line.break.before%22">
              line.break.before
            </a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fblocks%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22line.same%22">
              line.same
            </a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p> com.puppycrawl.tools.checkstyle.checks.blocks </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
