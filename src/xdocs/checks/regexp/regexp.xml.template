<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>Regexp</title>
  </head>
  <body>
    <section name="Regexp">
      <p>Since Checkstyle 4.0</p>
      <subsection name="Description" id="Description">
        <p>
          Checks that a specified pattern exists, exists less
          than a set number of times, or does not exist in the file.
        </p>
        <p>
          This check combines all the functionality provided by
          <a href="../header/regexpheader.html#RegexpHeader">RegexpHeader</a>
          except supplying the regular expression from a file.
        </p>
        <p>
          It differs from them in that it works in multiline mode.
          Its regular expression can span multiple lines and it checks this
          against the whole file at once.
          The others work in single-line mode.
          Their single or multiple regular expressions can only span one line.
          They check each of these against each line in the file in turn.
        </p>
        <p>
          <b>Note:</b> Because of the different mode of operation there may be
          some changes in the regular expressions used to achieve a particular end.
        </p>
        <p>In multiline mode...</p>
        <ul>
          <li> <code>^</code> means the beginning of a line, as opposed to beginning of the
              input.</li>
          <li> For beginning of the input use <code>\A</code>.</li>
          <li> <code>$</code> means the end of a line, as opposed to the end of the input.</li>
          <li> For end of input use <code>\Z</code>.</li>
          <li> Each line in the file is terminated with a line feed character.</li>
        </ul>
        <p>
          <b>Note:</b> Not all regular expression engines are created equal. Some provide extra
          functions that others do not and some elements of the syntax may vary.
          This check makes use of the
          <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/package-summary.html">
          java.util.regex package</a>; please check its documentation for
          details of how to construct a regular expression to achieve a particular
          goal.
        </p>
        <p>
          <b>Note:</b> When entering a regular expression as a parameter in the
          XML config file you must also take into account the XML rules. e.g. if
          you want to match a &lt; symbol you need to enter &amp;lt;. The regular
          expression should be entered on one line.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <macro name="properties">
            <param name="modulePath"
                   value="src/main/java/com/puppycrawl/tools/checkstyle/checks/regexp/RegexpCheck.java"/>
          </macro>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
            To configure the check:
        </p>
        <p>
          The following examples are mainly copied from the other 3 checks
          mentioned above, to show how the same results can be achieved using
          this check in place of them.
        </p>
        <p>
          <b>To use like Required Regexp check:</b>
        </p>
        <p>
          An example of how to configure the check to make sure a copyright
          statement is included in the file:
        </p>
        <p id="Example1-code"> The statement. </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example1.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example1-config"> The check. </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example1.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example2-code"> Your statement may be multiline. </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example2.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example2-config"> Then the check would be. </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example2.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p><b>Note:</b> To search for parentheses () in a regular expression
          you must escape them like \(\). This is required by the regexp engine,
          otherwise it will think they are special instruction characters.
        </p>
        <p id="Example3-config">
          And to make sure it appears only once:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example3.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example4-config">
          It can also be useful to attach a meaningful message to the check:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example4.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p>
          <b>To use like illegal regexp check:</b>
        </p>
        <p id="Example5-config">
          An example of how to configure the check to make sure there are no
          calls to <code>System.out.println</code>:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example5.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example6-config">
          You may want to make the above check ignore comments, like this:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example6.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example7-config">
          An example of how to configure the check to find trailing whitespace
          at the end of a line:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example7.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example8-config">
          An example of how to configure the check to find case-insensitive
          occurrences of "debug":
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example8.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p>
          <b>Note:</b> The (?i) at the beginning of the regular expression
          tells the regexp engine to ignore the case.
        </p>
        <p id="Example9-config">
          There is also a feature to limit the number of violations reported.
          When the limit is reached the check aborts with a message
          reporting that the limit has been reached.
          The default limit setting is 100, but this can be change as shown in
          the following example.
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example9.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p>
          <b>To use like <a href="../header/regexpheader.html#RegexpHeader">RegexpHeader
          </a>:</b>
        </p>
        <p>
          To configure the check to verify that each file starts with the
          following multiline header.
        </p>
        <p id="Example10-code">Note the following:</p>
        <ul>
          <li>\A means the start of the file.</li>
          <li>The date can be any 4-digit number.</li>
        </ul>

        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example10.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example10-config"> The check would be:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example10.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example11-code">
          A more complex example. Note how the import and javadoc multilines are
          handled, there can be any number of them.
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example11.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example11-config"> The check would be:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example11.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p>
          <b>More examples:</b>
        </p>
        <p id="Example12-code">
          The next 2 examples deal with the following example Java source file:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example12.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p>
          This checks for the presence of the header, the first 16 lines.
        </p>
        <p>Note the following:</p>
        <ul>
          <li>Line 2 and 13 contain the file name. These are checked to
            make sure they are the same, and that they match the class name.</li>
          <li>The date can be any 4-digit number.</li>
        </ul>
        <p id="Example12-config">The check would be:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example12.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example13-config">
          This checks for the presence of a copyright notice within the class
          javadoc, lines 24 to 37.
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/regexp/regexp/Example13.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p>
          <b>Note:</b> To search for things that mean something in XML, like
          &lt; you need to escape them like &amp;lt;. This is required so the
          XML parser does not act on them, but instead passes the correct
          character to the regexp engine.
        </p>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+Regexp">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <macro name="violation-messages">
          <param name="checkName" value="Regexp"/>
        </macro>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.regexp
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <macro name="parent-module">
          <param name="moduleName" value="Regexp"/>
        </macro>
      </subsection>
    </section>
  </body>
</document>
