<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>MatchXpath</title>
  </head>
  <body>
    <section name="MatchXpath">
      <p>Since Checkstyle 8.39</p>
      <subsection name="Description" id="Description">
        <p>
          Evaluates Xpath query and report violation on all matching AST nodes. This check allows
          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,
          then the check does nothing.
        </p>
        <p>
          It is recommended to define custom message for violation to explain what is not allowed
          and what to use instead, default message might be too abstract. To customize a message
          you need to add <code>message</code> element with <b>matchxpath.match</b> as
          <code>key</code> attribute and desired message as <code>value</code> attribute.
        </p>
        <p>
          Please read more about Xpath syntax at
          <a href="https://www.saxonica.com/html/documentation10/expressions/">Xpath Syntax</a>.
          Information regarding Xpath functions can be found at
          <a href="https://www.saxonica.com/html/documentation10/functions/fn/">XSLT/XPath
            Reference</a>. Note, that <b>@text</b> attribute can be used only with token types that
          are listed in
          <a href="https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22">
            XpathUtil</a>.
        </p>

      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>query</td>
              <td>Specify Xpath query.</td>
              <td><a href="../../property_types.html#String">String</a></td>
              <td><code>""</code></td>
              <td>8.39</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          Checkstyle provides <a href="https://checkstyle.org/cmdline.html">command line tool</a>
          and <a href="https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui">GUI
          application</a> with options to show AST and to ease usage of Xpath queries.
        </p>
        <p><b>-T</b> option prints AST tree of the checked file.</p>
        <source>
$ java -jar checkstyle-X.XX-all.jar -T Main.java
CLASS_DEF -&gt; CLASS_DEF [1:0]
|--MODIFIERS -&gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&gt; public [1:0]
|--LITERAL_CLASS -&gt; class [1:7]
|--IDENT -&gt; Main [1:13]
`--OBJBLOCK -&gt; OBJBLOCK [1:18]
|--LCURLY -&gt; { [1:18]
|--METHOD_DEF -&gt; METHOD_DEF [2:4]
|   |--MODIFIERS -&gt; MODIFIERS [2:4]
|   |   `--LITERAL_PUBLIC -&gt; public [2:4]
|   |--TYPE -&gt; TYPE [2:11]
|   |   `--IDENT -&gt; String [2:11]
|   |--IDENT -&gt; sayHello [2:18]
|   |--LPAREN -&gt; ( [2:26]
|   |--PARAMETERS -&gt; PARAMETERS [2:27]
|   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]
|   |       |--MODIFIERS -&gt; MODIFIERS [2:27]
|   |       |--TYPE -&gt; TYPE [2:27]
|   |       |   `--IDENT -&gt; String [2:27]
|   |       `--IDENT -&gt; name [2:34]
|   |--RPAREN -&gt; ) [2:38]
|   `--SLIST -&gt; { [2:40]
|       |--LITERAL_RETURN -&gt; return [3:8]
|       |   |--EXPR -&gt; EXPR [3:25]
|       |   |   `--PLUS -&gt; + [3:25]
|       |   |       |--STRING_LITERAL -&gt; "Hello, " [3:15]
|       |   |       `--IDENT -&gt; name [3:27]
|       |   `--SEMI -&gt; ; [3:31]
|       `--RCURLY -&gt; } [4:4]
`--RCURLY -&gt; } [5:0]
        </source>
        <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be
          used to validate accuracy of Xpath query against given file.</p>
        <source>
$ java -jar checkstyle-X.XX-all.jar Main.java -b "//METHOD_DEF[./IDENT[@text='sayHello']]"
CLASS_DEF -&gt; CLASS_DEF [1:0]
`--OBJBLOCK -&gt; OBJBLOCK [1:18]
|--METHOD_DEF -&gt; METHOD_DEF [2:4]
        </source>
        <p>The following example demonstrates validation of methods order, so that public methods
          should come before the private ones:</p>
        <source>
&lt;module name="MatchXpath"&gt;
  &lt;property name="query" value="//METHOD_DEF[.//LITERAL_PRIVATE and
          following-sibling::METHOD_DEF[.//LITERAL_PUBLIC]]"/&gt;
  &lt;message key="matchxpath.match"
          value="Private methods must appear after public methods"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test {
  public void method1() { }
  private void method2() { } // violation
  public void method3() { }
  private void method4() { } // violation
  public void method5() { }
  private void method6() { } // ok
}
        </source>
        <p>To violate if there are any parametrized constructors</p>
        <source>
&lt;module name="MatchXpath"&gt;
  &lt;property name="query" value="//CTOR_DEF[count(./PARAMETERS/*)
          &gt; 0]"/&gt;
  &lt;message key="matchxpath.match"
          value="Parameterized constructors are not allowed, there should be only default
          ctor"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test {
  public Test(Object c) { } // violation
  public Test(int a, HashMap&lt;String, Integer&gt; b) { } // violation
  public Test() { } // ok
}
        </source>
        <p>To violate if method name is 'test' or 'foo'</p>
        <source>
&lt;module name="MatchXpath"&gt;
  &lt;property name="query" value="//METHOD_DEF[./IDENT[@text='test'
          or @text='foo']]"/&gt;
  &lt;message key="matchxpath.match"
          value="Method name should not be 'test' or 'foo'"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test {
  public void test() {} // violation
  public void getName() {} // ok
  public void foo() {} // violation
  public void sayHello() {} // ok
}
        </source>
        <p>To violate if new instance creation was done without <b>var</b> type</p>
        <source>
&lt;module name="MatchXpath"&gt;
  &lt;property name="query" value="//VARIABLE_DEF[./ASSIGN/EXPR/LITERAL_NEW
          and not(./TYPE/IDENT[@text='var'])]"/&gt;
  &lt;message key="matchxpath.match"
          value="New instances should be created via 'var' keyword to avoid duplication of
          type reference in statement"/&gt;
&lt;/module&gt;
        </source>
        <p>Example:</p>
        <source>
public class Test {
  public void foo() {
    SomeObject a = new SomeObject(); // violation
    var b = new SomeObject(); // OK
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+MatchXpath">
              Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fcoding%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22matchxpath.match%22">
              matchxpath.match</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.coding
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
