<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>CovariantEquals</title>
  </head>
  <body>
    <section name="CovariantEquals">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="Description">
        <p>
          Checks that classes and records which define a covariant <code>equals()</code> method
          also override method <code>equals(Object)</code>.
        </p>
        <p>
          Covariant <code>equals()</code> - method that is similar to <code>equals(Object)</code>,
          but with a covariant parameter type (any subtype of Object).
        </p>
        <p>
          <strong>Notice</strong>: the enums are also checked, even
          though they cannot override <code>equals(Object)</code>. The reason is
          to point out that implementing <code>equals()</code> in enums is considered an
          awful practice: it may cause having two different enum values that are equal using
          covariant enum method, and not equal when compared normally.
        </p>

        <p>
          Inspired by <a href="https://www.cs.jhu.edu/~daveho/pubs/oopsla2004.pdf">
          Finding Bugs is Easy, chapter '4.5 Bad Covariant Definition of Equals (Eq)'</a>:
        </p>

        <p>
          Java classes and records may override the <code>equals(Object)</code> method to define
          a predicate for object equality. This method is used by many of the Java runtime
          library classes; for example, to implement generic containers.
        </p>

        <p>
          Programmers sometimes mistakenly use the type of their class <code>Foo</code>
          as the type of the parameter to <code>equals()</code>:
        </p>

        <source>
public boolean equals(Foo obj) {...}
        </source>

        <p>
          This covariant version of <code>equals()</code> does not override the version in the
          <code>Object</code> class, and it may lead to unexpected behavior at runtime,
          especially if the class is used with one of the standard collection classes
          which expect that the standard <code>equals(Object)</code> method is overridden.
        </p>

        <p>
          This kind of bug is not obvious because it looks correct, and in circumstances where
          the class is accessed through the references of the class type (rather than a supertype),
          it will work correctly. However, the first time it is used in a container,
          the behavior might be mysterious. For these reasons, this type of bug can elude
          testing and code inspections.
        </p>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name="CovariantEquals"/&gt;
        </source>

        <p>
          For example:
        </p>
        <source>
class Test {
  public boolean equals(Test i) {  // violation
    return false;
  }
}
        </source>
        <p>
          The same class without violations:
        </p>
        <source>
class Test {
  public boolean equals(Test i) {  // no violation
    return false;
  }

  public boolean equals(Object i) {
    return false;
  }
}
        </source>
        <p>
          Another example:
        </p>
        <source>
record Test(String str) {
    public boolean equals(Test r) {  // violation
        return false;
    }
}
        </source>
        <p>
          The same record without violations:
        </p>
        <source>
record Test(String str) {
    public boolean equals(Test r) {  // no violation
        return false;
    }

    public boolean equals(Object r) {
        return false;
    }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+CovariantEquals">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fcoding%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22covariant.equals%22">
            covariant.equals</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.coding
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
