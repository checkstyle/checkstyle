<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>DeclarationOrder</title>
  </head>
  <body>
    <section name="DeclarationOrder">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="Description">
        <p>
          Checks that the parts of a class, record, or interface declaration appear in the order
          suggested by the
          <a href="https://checkstyle.org/styleguides/sun-code-conventions-19990420/CodeConventions.doc2.html#a1852">
            Code Conventions for the Java Programming Language</a>.
        </p>
        <p>
          According to
          <a href="../../styleguides/sun-code-conventions-19990420/CodeConventions.doc2.html#a1852">
          Code Conventions for the Java Programming Language</a> , the parts
          of a class or interface declaration should appear in the following
          order:
        </p>

        <ol>
          <li>
            Class (static) variables. First the public class variables, then
             protected, then package level (no access modifier), and then
             private.
          </li>
          <li>
            Instance variables. First the public class variables, then
            protected, then package level (no access modifier), and then
            private.
          </li>
          <li> Constructors </li>
          <li> Methods </li>
        </ol>

        <p>
          Purpose of <b>ignore*</b> option is to ignore related violations,
          however it still impacts on other class members.
        </p>

        <p>
          ATTENTION: the check skips class fields which have
          <a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-8.3.3">
              forward references</a>
           from validation due to the fact that we have Checkstyle's limitations to clearly
          detect user intention of fields location and grouping. For example:
        </p>
        <source>
public class A {
  private double x = 1.0;
  private double y = 2.0;
  public double slope = x / y; // will be skipped from validation due to forward reference
}
        </source>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <macro name="properties">
            <param name="modulePath"
              value="src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/DeclarationOrderCheck.java"/>
          </macro>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example1-config">
          To configure the check:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example1.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example1-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example1.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example2-config">
          To configure the check to ignore validation of constructors:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example2.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example2-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example2.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example3-config">
          To configure the check to ignore modifiers:
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example3.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example3-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/declarationorder/Example3.txt"/>
          <param name="type" value="code"/>
        </macro>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+DeclarationOrder">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <macro name="violation-messages">
          <param name="checkName" value="DeclarationOrder"/>
        </macro>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.coding
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <macro name="parent-module">
          <param name="moduleName" value="DeclarationOrder"/>
        </macro>
      </subsection>
    </section>
  </body>
</document>
