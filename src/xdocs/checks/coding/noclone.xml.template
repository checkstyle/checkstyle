<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>NoClone</title>
  </head>
  <body>
    <section name="NoClone">
      <p>Since Checkstyle 5.0</p>
      <subsection name="Description" id="Description">
        <p>
          Checks that the clone method is not overridden from the
          Object class.
        </p>
        <p>
          This check is almost exactly the same as the <code>NoFinalizerCheck</code>.
        </p>
        <p>
          See <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/lang/Object.html#clone()">
          Object.clone()</a>
        </p>
        <p>
          Rationale: The clone method relies on strange, hard to follow rules that
          are difficult to get right and do not work in all situations.
          In some cases, either a copy constructor
          or a static factory method can be used instead of the clone method
          to return copies of an object.
          For more information on rules for the clone method and its issues, see Effective Java:
          Programming Language Guide First Edition by Joshua Bloch
          pages 45-52.
        </p>
        <p>
          Below are some rules/reasons why the clone method should be avoided.
        </p>
        <ul>
          <li>
            Classes supporting the clone method should implement the Cloneable interface
            but the Cloneable interface does not include the clone method.
            As a result, it doesn't enforce the method override.
          </li>
          <li>
            The Cloneable interface forces the Object's clone method to work correctly.
            Without implementing it, the Object's clone method will throw a
            CloneNotSupportedException.
          </li>
          <li>
            Non-final classes must return the object returned from a call to super.clone().
          </li>
          <li>
            Final classes can use a constructor to create a clone which is different
            from non-final classes.
          </li>
          <li>
            If a super class implements the clone method incorrectly all subclasses calling
            super.clone() are doomed to failure.
          </li>
          <li>
            If a class has references to mutable objects then those object references must be
            replaced with copies in the clone method after calling super.clone().
          </li>
          <li>
            The clone method does not work correctly with final mutable object references because
            final references cannot be reassigned.
          </li>
          <li>
            If a super class overrides the clone method then all subclasses must provide a correct
            clone implementation.
          </li>
        </ul>
        <p>
          Two alternatives to the clone method, in some cases, is a copy constructor or a static
          factory method to return copies of an object. Both of these approaches are simpler and
          do not conflict with final fields. They do not force the calling client to handle a
          CloneNotSupportedException.  They also are typed therefore no casting is necessary.
          Finally, they are more flexible since they can take interface types rather than concrete
          classes.
        </p>
        <p>
          Sometimes a copy constructor or static factory is not an acceptable alternative to the
          clone method.  The example below highlights the limitation of a copy constructor
          (or static factory). Assume Square is a subclass for Shape.
        </p>
        <source>
Shape s1 = new Square();
System.out.println(s1 instanceof Square); //true
        </source>
        <p>
          ...assume at this point the code knows nothing of s1 being a Square that's the beauty
          of polymorphism but the code wants to copy the Square which is declared as a Shape,
          its super type...
        </p>
        <source>
Shape s2 = new Shape(s1); //using the copy constructor
System.out.println(s2 instanceof Square); //false
        </source>
        <p>
          The working solution (without knowing about all subclasses and doing many casts) is to do
          the following (assuming correct clone implementation).
        </p>
        <source>
Shape s2 = s1.clone();
System.out.println(s2 instanceof Square); //true
        </source>
        <p>
          Just keep in mind if this type of polymorphic cloning is required then a properly
          implemented clone method may be the best choice.
        </p>
        <p>
          Much of this information was taken from Effective Java: Programming Language Guide First
          Edition by Joshua Bloch pages 45-52.  Give Bloch credit for writing an excellent book.
        </p>
      </subsection>
      <subsection name="Examples" id="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name="NoClone"/&gt;
        </source>
        <p>Example: </p>
        <source>
public class Foo {

 public Object clone() {return null;} // violation, overrides the clone method

 public Foo clone() {return null;} // violation, overrides the clone method

 public static Object clone(Object o) {return null;} // OK

 public static Foo clone(Foo o) {return null;} // OK

}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+NoClone">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fcoding%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22avoid.clone.method%22">
            avoid.clone.method</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.coding
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
