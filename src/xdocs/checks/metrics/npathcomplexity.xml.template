<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>NPathComplexity</title>
  </head>
  <body>
    <section name="NPathComplexity">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="Description">
        <p>
          Checks the NPATH complexity against a specified limit.
        </p>
        <p>
          The NPATH metric computes the number of possible execution
          paths through a function(method). It takes into account the nesting of
          conditional statements and multipart boolean expressions
          (A &amp;&amp; B, C || D, E ? F :G and their combinations).
        </p>
        <p>
          The NPATH metric was designed base on Cyclomatic complexity to
          avoid problem of Cyclomatic complexity metric like nesting level within a
          function(method).
        </p>
        <p>
          Metric was described at <a href="http://dl.acm.org/citation.cfm?id=42379">
          "NPATH: a measure of execution pathcomplexity and its applications"</a>.
          If you need detailed description of algorithm, please read that article,
          it is well written and have number of examples and details.
        </p>

        <p>Here is some quotes:</p>

        <blockquote>An NPATH threshold value of 200 has been established
          for a function. The value 200 is based on studies done
          at AT&amp;T Bell Laboratories [1988 year].
        </blockquote>

        <blockquote>
          Some of the most effective methods of reducing the NPATH value include:
          <ul>
            <li>distributing functionality;</li>
            <li>implementing multiple if statements as a switch statement;</li>
            <li>
              creating a separate function for logical expressions with a high
              count of variables and (&amp;&amp;) and or (||) operators.
            </li>
          </ul>
        </blockquote>

        <blockquote>
        Although strategies to reduce the NPATH complexity
        of functions are important, care must be taken not to
        distort the logical clarity of the software by applying a
        strategy to reduce the complexity of functions. That is,
        there is a point of diminishing return beyond which a
        further attempt at reduction of complexity distorts the
        logical clarity of the system structure.
        </blockquote>

        <div class="wrapper">
          <table>
            <caption>Examples</caption>
            <thead><tr><th>Structure</th><th> Complexity expression </th></tr></thead>
            <tr><td>if ([expr]) { [if-range] }</td><td>NP(if-range) + 1 + NP(expr)</td></tr>
            <tr><td>if ([expr]) { [if-range] } else { [else-range] }</td><td>NP(if-range)
                    + NP(else-range) + NP(expr)</td></tr>
            <tr>
              <td>while ([expr]) { [while-range] } </td><td>NP(while-range) + NP(expr) + 1</td>
            </tr>
            <tr><td>do { [do-range] } while ([expr])</td><td>NP(do-range) + NP(expr) + 1</td></tr>
            <tr><td>for([expr1]; [expr2]; [expr3]) { [for-range] }</td><td>NP(for-range) + NP(expr1)
                    + NP(expr2) + NP(expr3) + 1</td></tr>
            <tr><td>switch ([expr]) { case : [case-range] default: [default-range] }</td>
              <td>S(i=1:i=n)NP(case-range[i]) + NP(default-range) + NP(expr)</td>
            </tr>
            <tr><td>[expr1] ? [expr2] : [expr3]</td><td>NP(expr1) + NP(expr2) + NP(expr3) + 2
            </td></tr>
            <tr><td>goto label</td><td>1</td></tr>
            <tr><td>break</td><td>1</td></tr>
            <tr><td>Expressions</td><td>Number of &amp;&amp; and || operators in expression. No
                    operators - 0</td></tr>
            <tr><td>continue</td><td>1</td></tr>
            <tr><td>return</td><td>1</td></tr>
            <tr><td>Statement (even sequential statements)</td><td>1</td></tr>
            <tr><td>Empty block {}</td><td>1</td></tr>
            <tr><td>Function call</td><td>1</td></tr>
            <tr><td>Function(Method) declaration or Block</td><td>P(i=1:i=N)NP(Statement[i])</td>
            </tr>
          </table>
        </div>

        <p>
          <b>Rationale:</b> Nejmeh says that his group had an informal NPATH
          limit of 200 on individual routines; functions(methods) that exceeded
          this value were candidates for further decomposition - or at
          least a closer look.
          <b>Please do not be fanatic with limit 200</b>
          - choose number that suites your project style. Limit 200 is
          empirical number base on some sources of at AT&amp;T Bell Laboratories
          of 1988 year.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>max</td>
              <td>Specify the maximum threshold allowed.</td>
              <td><a href="../../property_types.html#int">int</a></td>
              <td><code>200</code></td>
              <td>3.4</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          To configure the check:
        </p>
        <source>
&lt;module name="NPathComplexity"/&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public abstract class Test {

final int a = 0;
int b = 0;

public void foo() { // OK, NPath complexity is less than default threshold
  // function consists of one if-else block with an NPath Complexity of 3
  if (a &gt; 10) {
    if (a &gt; b) { // nested if-else decision tree adds 2 to the complexity count
      buzz();
    } else {
      fizz();
    }
  } else { // last possible outcome of the main if-else block, adds 1 to complexity
    buzz();
  }
}

public void boo() { // violation, NPath complexity is 217 (max allowed is 200)
  // looping through 3 switch statements produces 6^3 + 1 (217) possible outcomes
  for(int i = 0; i &lt; b; i++) { // for statement adds 1 to final complexity
    switch(i) { // each independent switch statement multiplies complexity by 6
      case a:
        // ternary with &amp;&amp; adds 3 to switch's complexity
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        // ternary with || adds 3 to switch's complexity
        print(f(i) || g(i) ? fizz() : buzz());
    }
    switch(i - 1) { // multiplies complexity by 6
      case a:
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        print(f(i) || g(i) ? fizz() : buzz());
    }
    switch(i + 1) { // multiplies complexity by 6
      case a:
        print(f(i) &amp;&amp; g(i) ? fizz() : buzz());
      default:
        print(f(i) || g(i) ? fizz() : buzz());
    }
  }
}

public abstract boolean f(int x);
public abstract boolean g(int x);
public abstract String fizz();
public abstract String buzz();
public abstract void print(String str);
}
        </source>
        <p>
          To configure the check with a threshold of 100:
        </p>
        <source>
&lt;module name="NPathComplexity"&gt;
  &lt;property name="max" value="100"/&gt;
&lt;/module&gt;
        </source>
        <p>
          Example:
        </p>
        <source>
public abstract class Test1 {
public void foo() { // violation, NPath complexity is 128 (max allowed is 100)
  int a,b,t,m,n;
  a=b=t=m=n = 0;

  // Complexity is achieved by choosing from 2 options 7 times (2^7 = 128 possible outcomes)
  if (a &gt; b) { // non-nested if-else decision tree multiplies complexity by 2
    bar();
  } else {
    baz();
  }

  print(t &gt; 1 ? bar() : baz()); // 5 ternary statements multiply complexity by 2^5
  print(t &gt; 2 ? bar() : baz());
  print(t &gt; 3 ? bar() : baz());
  print(t &gt; 4 ? bar() : baz());
  print(t &gt; 5 ? bar() : baz());

  if (m &gt; n) { // multiplies complexity by 2
    baz();
  } else {
    bar();
  }
}

public abstract String bar();
public abstract String baz();
public abstract void print(String str);
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+NPathComplexity">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmetrics%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22npathComplexity%22">
            npathComplexity</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.metrics
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
