<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>ClassMemberImpliedModifier</title>
  </head>
  <body>
    <section name="ClassMemberImpliedModifier">
      <p>Since Checkstyle 8.16</p>
      <subsection name="Description" id="Description">
        <p>
          Checks for implicit modifiers on nested types in classes and records.
        </p>
        <p>
          This check is effectively the opposite of
          <a href="redundantmodifier.html#RedundantModifier">RedundantModifier</a>.
          It checks the modifiers on nested types in classes and records, ensuring that certain
          modifiers are explicitly specified even though they are actually redundant.
        </p>
        <p>
          Nested enums, interfaces, and records within a class are always <code>static</code> and as
          such the compiler does not require the <code>static</code> modifier. This check provides
          the ability to enforce that the <code>static</code> modifier is explicitly coded and not
          implicitly added by the compiler.
        </p>
        <source>
public final class Person {
  enum Age {  // violation
    CHILD, ADULT
  }
}
        </source>
        <p>
          Rationale for this check:
          Nested enums, interfaces, and records are treated differently from nested classes as they
          are only allowed to be <code>static</code>. Developers should not need to remember this
          rule, and this check provides the means to enforce that the modifier is coded explicitly.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>violateImpliedStaticOnNestedEnum</td>
              <td>
                Control whether to enforce that <code>static</code> is explicitly coded
                on nested enums in classes and records.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>true</code></td>
              <td>8.16</td>
            </tr>
            <tr>
              <td>violateImpliedStaticOnNestedInterface</td>
              <td>
                Control whether to enforce that <code>static</code> is explicitly coded
                on nested interfaces in classes and records.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>true</code></td>
              <td>8.16</td>
            </tr>
            <tr>
              <td>violateImpliedStaticOnNestedRecord</td>
              <td>
                Control whether to enforce that <code>static</code> is explicitly coded
                on nested records in classes and records.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>true</code></td>
              <td>8.36</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          To configure the check so that it checks that all implicit modifiers on nested interfaces,
          enums, and records are explicitly specified in classes and records.
        </p>
        <p>
          Configuration:
        </p>
        <source>
&lt;module name="ClassMemberImpliedModifier" /&gt;
        </source>
        <p>
          Code:
        </p>
        <source>
public final class Person {
  static interface Address1 {  // valid
  }

  interface Address2 {  // violation
  }

  static enum Age1 {  // valid
    CHILD, ADULT
  }

  enum Age2 {  // violation
    CHILD, ADULT
  }

  public static record GoodRecord() {} // valid
  public record BadRecord() {} // violation

  public static record OuterRecord() {
    static record InnerRecord1(){} // valid
    record InnerRecord2(){} // violation
  }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+ClassMemberImpliedModifier">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fmodifier%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22class.implied.modifier%22">
            class.implied.modifier</a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p> com.puppycrawl.tools.checkstyle.checks.modifier </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
