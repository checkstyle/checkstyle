<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>MutableException</title>
  </head>
  <body>
    <section name="MutableException">
      <p>Since Checkstyle 3.2</p>
      <subsection name="Description" id="Description">
        <p>
          Ensures that exception classes (classes with names conforming to some pattern
          and explicitly extending classes with names conforming to other
          pattern) are immutable, that is, that they have only final fields.
        </p>

        <p>
          The current algorithm is very simple: it checks that all members of
          exception are final. The user can still mutate an exception's instance
          (e.g. Throwable has a method called <code>setStackTrace</code>
          which changes the exception's stack trace). But, at least, all information
          provided by this exception type is unchangeable.
        </p>

        <p>
          Rationale: Exception instances should represent an error
          condition. Having non-final fields not only allows the state to be
          modified by accident and therefore mask the original condition but
          also allows developers to accidentally forget to set the initial state.
          In both cases, code catching the exception could draw incorrect
          conclusions based on the state.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>extendedClassNameFormat</td>
              <td>Specify pattern for extended class names.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>&quot;^.*Exception$|^.*Error$|^.*Throwable$&quot;</code></td>
              <td>6.2</td>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify pattern for exception class names.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>&quot;^.*Exception$|^.*Error$|^.*Throwable$&quot;</code></td>
              <td>3.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example1-config">
          To configure the check:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;MutableException&quot;/&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example1-code">Example:</p>
        <source>
class Example1 extends Exception {
    private int code; // OK, class name doesn't match with default pattern

    public Example1() {
        code = 1;
    }
}

class MyException1 extends Exception {
    private int code; // violation

    public MyException1() {
        code = 2;
    }
}

class MyThrowable1 extends Throwable {
    final int code; // OK
    String message; // violation

    public MyThrowable1(int code, String message) {
        this.code = code;
        this.message = message;
    }
}

class BadException1 extends java.lang.Exception {
    int code; // violation

    public BadException1(int code) {
        this.code = code;
    }
}
        </source>

        <p id="Example2-config">
          To configure the check so that it checks for class name that ends
          with 'Exception':
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;MutableException&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;^.*Exception$&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example2-code">Example:</p>
        <source>
class Example2 extends Exception {
    private int code; // OK, class name doesn't match with given pattern

    public Example2() {
        code = 1;
    }
}

class MyException2 extends Exception {
    private int code; // violation

    public MyException2() {
        code = 2;
    }
}

class MyThrowable2 extends Throwable {
    final int code; // OK, class name doesn't match with given pattern
    String message; // OK, class name doesn't match with given pattern

    public MyThrowable2(int code, String message) {
        this.code = code;
        this.message = message;
    }
}

class BadException2 extends java.lang.Exception {
    int code; // violation

    public BadException2(int code) {
        this.code = code;
    }
}
        </source>

        <p id="Example3-config">
          To configure the check so that it checks for type name that is used in
          'extends' and ends with 'Throwable':
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;MutableException&quot;&gt;
      &lt;property name=&quot;extendedClassNameFormat&quot; value=&quot;^.*Throwable$&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example3-code">Example:</p>
        <source>
class Example3 extends Exception {
    private int code; // OK, extended class name doesn't match with given pattern

    public Example3() {
        code = 1;
    }
}

class MyException extends Exception {
    private int code; // OK, extended class name doesn't match with given pattern

    public MyException() {
        code = 2;
    }
}

class MyThrowable extends Throwable {
    final int code; // OK
    String message; // violation

    public MyThrowable(int code, String message) {
        this.code = code;
        this.message = message;
    }
}

class BadException extends java.lang.Exception {
    int code; // OK, extended class name doesn't match with given pattern

    public BadException(int code) {
        this.code = code;
    }
}
        </source>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+MutableException">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fdesign%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22mutable.exception%22">
              mutable.exception
            </a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.design
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
