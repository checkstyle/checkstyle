<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>SuppressionXpathFilter</title>
  </head>
  <body>
    <section name="SuppressionXpathFilter">
      <p>Since Checkstyle 8.6</p>
      <subsection name="Description" id="Description">
        <p>
          Filter <code>SuppressionXpathFilter</code> works as
          <a href="suppressionfilter.html#SuppressionFilter">
          SuppressionFilter</a>.
          Additionally, filter processes <code>suppress-xpath</code> elements,
          which contains xpath-expressions. Xpath-expressions
          are queries for suppressed nodes inside the AST tree.
        </p>
        <p>
          Currently, filter does not support the following checks:
        </p>
        <ul id="IncompatibleChecks">
          <li>NoCodeInFile (reason is that AST is not generated for a file not containing code)</li>
          <li>Regexp (reason is at <a href="https://github.com/checkstyle/checkstyle/issues/7759#issuecomment-605525287"> #7759</a>)</li>
          <li>RegexpSinglelineJava (reason is at <a href="https://github.com/checkstyle/checkstyle/issues/7759#issuecomment-605525287"> #7759</a>)</li>
        </ul>
        <p>
          Also, the filter does not support suppressions inside javadoc reported by Javadoc checks:
        </p>
        <ul id="JavadocChecks">
          <li>AtclauseOrder</li>
          <li>JavadocBlockTagLocation</li>
          <li>JavadocMethod</li>
          <li>JavadocMissingLeadingAsterisk</li>
          <li>JavadocMissingWhitespaceAfterAsterisk</li>
          <li>JavadocParagraph</li>
          <li>JavadocStyle</li>
          <li>JavadocTagContinuationIndentation</li>
          <li>JavadocType</li>
          <li>MissingDeprecated</li>
          <li>NonEmptyAtclauseDescription</li>
          <li>RequireEmptyLineBeforeBlockTagGroup</li>
          <li>SingleLineJavadoc</li>
          <li>SummaryJavadoc</li>
          <li>WriteTag</li>
        </ul>
        <p>
          Note, that support for these Checks will be available after resolving issue
          <a href="https://github.com/checkstyle/checkstyle/issues/5770">#5770</a>.
        </p>
        <p>
          Currently, filter supports the following
          xpath axes:
        </p>
        <ul>
          <li>ancestor</li>
          <li>ancestor-or-self</li>
          <li>attribute</li>
          <li>child</li>
          <li>descendant</li>
          <li>descendant-or-self</li>
          <li>following</li>
          <li>following-sibling</li>
          <li>parent</li>
          <li>preceding</li>
          <li>preceding-sibling</li>
          <li>self</li>
        </ul>
        <p>
          You can use the command line helper tool to generate xpath
          suppressions based on your configuration file and input files.
          See
          <a href="../cmdline.html">here</a>
          for more details.
        </p>
      </subsection>
      <subsection name="Notes" id="Notes">
        <p>
          The suppression file location is checked in following order:
        </p>
        <ol>
          <li>as a filesystem location</li>
          <li>
            if no file found, and the location starts with either
            <code>http://</code> or <code>https://</code>, then it
            is interpreted as a URL
          </li>
          <li>
            if no file found, then passed to the
            <code>ClassLoader.getResource()</code> method.
          </li>
        </ol>
        <p>
          SuppressionXpathFilter can suppress Checks that have Treewalker as parent module.
        </p>
      </subsection>
      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>file</td>
              <td>
                Specify the location of the <em>suppressions XML document</em> file.
              </td>
              <td><a href="../property_types.html#String">String</a></td>
              <td><code>null</code></td>
              <td>8.6</td>
            </tr>
            <tr>
              <td>optional</td>
              <td>
                Control what to do when the file is not existing. If
                optional is set to false the file must exist, or else
                it ends with error. On the other hand if optional is
                true and file is not found, the filter accepts all
                audit events.
              </td>
              <td><a href="../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>8.6</td>
            </tr>
          </table>
        </div>
      </subsection>
      <subsection name="Examples" id="Examples">
        <p>
          For example, the following configuration fragment directs the
          Checker to use a <code>SuppressionXpathFilter</code>
          with suppressions
          file <code>config/suppressions.xml</code>:
        </p>
        <source>
&lt;module name="SuppressionXpathFilter"&gt;
  &lt;property name="file" value="config/suppressions.xml"/&gt;
  &lt;property name="optional" value="false"/&gt;
&lt;/module&gt;
        </source>
        <p>
          A <a href="/dtds/suppressions_1_2_xpath_experimental.dtd"><em>suppressions XML
          document</em></a> contains a set
          of <code>suppress</code> and <code>suppress-xpath</code> elements, where
          each <code>suppress-xpath</code> element can have the
          following attributes:
        </p>
        <ul>
          <li>
            <code>files</code> -
            a <a href="../property_types.html#Pattern">Pattern</a>
            matched against the file name associated with an audit
            event. It is optional.
          </li>
          <li>
            <code>checks</code> -
            a <a href="../property_types.html#Pattern">Pattern</a>
            matched against the name of the check associated with an audit
            event. Optional as long as <code>id</code> or <code>message</code> is specified.
          </li>
          <li>
            <code>message</code> -
            a <a href="../property_types.html#Pattern">Pattern</a>
            matched against the message of the check associated with an audit
            event. Optional as long as <code>checks</code> or <code>id</code> is specified.
          </li>
          <li>
            <code>id</code> -
            a <a href="../property_types.html#String">String</a>
            matched against the ID of the check associated with an audit
            event. Optional as long as <code>checks</code> or <code>message</code> is specified.
          </li>
          <li>
            <code>query</code> -
            a <a href="../property_types.html#String">String</a>
            xpath query. It is optional.
          </li>
        </ul>
        <p>
          Each audit event is checked against
          each <code>suppress</code> and <code>suppress-xpath</code> element. It is
          suppressed if all specified attributes match against the audit
          event.
        </p>
        <p>
          ATTENTION: filtering by message is dependent on runtime locale. If project is running
          in different languages it is better to avoid filtering by message.
        </p>
        <p>
          The following suppressions XML document directs
          a <code>SuppressionXpathFilter</code> to
          reject <code>CyclomaticComplexity</code> violations for
          all methods with name <i>sayHelloWorld</i> inside <i>FileOne</i>
          and <i>FileTwo</i> files:
        </p>
        <p>
          Currently, xpath queries support one type of attribute <code>@text</code>.
          <code>@text</code> - addresses to the text value of the node. For example: variable name,
          annotation name, text content, etc.
          Only the following token types support <code>@text</code> attribute:
          <code>TokenTypes.IDENT</code>, <code>TokenTypes.STRING_LITERAL</code>,
          <code>TokenTypes.CHAR_LITERAL</code>, <code>TokenTypes.NUM_LONG</code>,
          <code>TokenTypes.NUM_INT</code>, <code>TokenTypes.NUM_DOUBLE</code>,
          <code>TokenTypes.NUM_FLOAT</code>.
          These token types were selected because only their text values are different in content
          from token type and represent text value from file and can be used in xpath queries for
          more accurate results.
          Other token types always have constant values.
        </p>
        <source>
&lt;?xml version="1.0"?&gt;

&lt;!DOCTYPE suppressions PUBLIC
"-//Checkstyle//DTD SuppressionXpathFilter Experimental Configuration 1.2//EN"
"https://checkstyle.org/dtds/suppressions_1_2_xpath_experimental.dtd"&gt;

&lt;suppressions&gt;
  &lt;suppress-xpath checks="CyclomaticComplexity"
  files="FileOne.java,FileTwo.java"
  query="//METHOD_DEF[./IDENT[@text='sayHelloWorld']]"/&gt;
&lt;/suppressions&gt;
        </source>
        <p>
          Suppress checks for package definitions:
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="/PACKAGE_DEF"/&gt;
        </source>
        <p>
          Suppress checks for parent element of the first variable definition:
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="(//VARIABLE_DEF)[1]/.."/&gt;
        </source>
        <p>
          Suppress checks for elements which are either class definitions,
          either method definitions.
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="//CLASS_DEF | //METHOD_DEF"/&gt;
        </source>
        <p>
          Suppress checks for certain methods:
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="//METHOD_DEF[./IDENT[@text='getSomeVar'
          or @text='setSomeVar']]"/&gt;
        </source>
        <p>
          Suppress checks for variable <i>testVariable</i> inside <i>testMethod</i> method
          inside <i>TestClass</i> class.
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="//CLASS_DEF[@text='TestClass']
          //METHOD_DEF[./IDENT[@text='testMethod']]
          //VARIABLE_DEF[./IDENT[@text='testVariable']]"/&gt;
        </source>
        <p>
          In the following sample, violations for <code>LeftCurly</code> check will be suppressed
          for classes with name <i>Main</i> or for methods with name <i>calculate</i>.
        </p>
        <source>
&lt;suppress-xpath checks="LeftCurly" query="//CLASS_DEF[./IDENT[@text='Main']]//*
          | //METHOD_DEF[./IDENT[@text='calculate']]/*"/&gt;
        </source>
        <p>
          The following example demonstrates how to suppress <code>RequireThis</code> violations for
          variable <i>age</i> inside <i>changeAge</i> method.
        </p>
        <source>
&lt;suppress-xpath checks="RequireThis"
     query="//CLASS_DEF[./IDENT[@text='InputTest']]
          //METHOD_DEF[./IDENT[@text='changeAge']]//ASSIGN/IDENT[@text='age']"/&gt;
        </source>
        <source>
public class InputTest {
  private int age = 23;

  public void changeAge() {
    age = 24; //violation will be suppressed
  }
}
        </source>
        <p>
          Suppress <code>IllegalThrows</code> violations only for methods with name
          <i>throwsMethod</i> and only for <code>RuntimeException</code> exceptions.
          Double colon is used for axis iterations. In the following example <code>ancestor</code>
          axis is used to iterate all ancestor nodes of the current node with type
          <code>METHOD_DEF</code> and name <i>throwsMethod</i>. Please read more about xpath axes at
          <a href="https://www.w3schools.com/xml/xpath_axes.asp">W3Schools Xpath Axes</a>.
        </p>
        <source>
&lt;suppress-xpath checks="IllegalThrows" query="//LITERAL_THROWS
          /IDENT[@text='RuntimeException' and
          ./ancestor::METHOD_DEF[./IDENT[@text='throwsMethod']]]"/&gt;
        </source>
        <source>
public class InputTest {
  public void throwsMethod() throws RuntimeException { // violation will be suppressed
  }

  public void sampleMethod() throws RuntimeException { // will throw violation here
  }
}
        </source>
        <p>
          The following sample demonstrates how to suppress all violations for method itself and
          all descendants. <code>descendant-or-self</code> axis iterates through current node and
          all children nodes at any level. Keyword <code>node()</code> selects node elements.
          Please read more about xpath syntax at
          <a href="https://www.w3schools.com/xml/xpath_syntax.asp">W3Schools Xpath Syntax</a>.
        </p>
        <source>
&lt;suppress-xpath checks=".*" query="//METHOD_DEF[./IDENT[@text='legacyMethod']]
          /descendant-or-self::node()"/&gt;
        </source>

        <p>Some elements can be suppressed in different ways.
          For example, to suppress violation on variable <code>wordCount</code> in following code:
        </p>
        <source>
public class InputTest {
    private int wordCount = 11;
}
        </source>
        <p>You need to look at AST of such code by our CLI tool:</p>
        <source>
$ java -jar checkstyle-X.XX-all.jar -t InputTest.java
CLASS_DEF -&gt; CLASS_DEF [1:0]
|--MODIFIERS -&gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&gt; public [1:0]
|--LITERAL_CLASS -&gt; class [1:7]
|--IDENT -&gt; InputTest [1:13]
`--OBJBLOCK -&gt; OBJBLOCK [1:23]
|--LCURLY -&gt; { [1:23]
|--VARIABLE_DEF -&gt; VARIABLE_DEF [2:4]
|   |--MODIFIERS -&gt; MODIFIERS [2:4]
|   |   `--LITERAL_PRIVATE -&gt; private [2:4]
|   |--TYPE -&gt; TYPE [2:12]
|   |   `--LITERAL_INT -&gt; int [2:12]
|   |--IDENT -&gt; wordCount [2:16]
|   |--ASSIGN -&gt; = [2:26]
|   |   `--EXPR -&gt; EXPR [2:28]
|   |       `--NUM_INT -&gt; 11 [2:28]
|   `--SEMI -&gt; ; [2:30]
`--RCURLY -&gt; } [3:0]
        </source>
        <p>
          The easiest way is to suppress by variable name. As you can see <code>VARIABLE_DEF</code>
          node refers to variable declaration statement and has child node with token type
          <code>IDENT</code> which is used for storing class, method, variable names.
        </p>
        <p>The following example demonstrates how variable can be queried by its name:</p>
        <source>
&lt;suppress-xpath checks="." query="//VARIABLE_DEF[
            ./IDENT[@text='wordCount']]"/&gt;
        </source>
        <p>Another way is to suppress by variable value. Again, if you look at the printed AST tree
        above, you will notice that one of the grandchildren of <code>VARIABLE_DEF</code> node is
        responsible for storing variable value - <code>NUM_INT</code> with value <b>11</b>.</p>
        <p>The following example demonstrates how variable can be queried by its value, same
        approach applies to <code>String, char, float, double, int, long</code> data types:</p>
        <source>
&lt;suppress-xpath checks="." query="//VARIABLE_DEF[.//NUM_INT[@text=11]]"/&gt;
        </source>
        <p>Next example is about suppressing method with certain annotation by its name and
        element value.</p>
        <source>
public class InputTest {
    @Generated("first") // should not be suppressed
    public void test1() {
    }

    @Generated("second") // should be suppressed
    public void test2() {
    }
}
        </source>
        <p>First of all we need to look at AST tree printed by our CLI tool: </p>
        <source>
$ java -jar checkstyle-X.XX-all.jar -t InputTest.java
CLASS_DEF -&gt; CLASS_DEF [1:0]
|--MODIFIERS -&gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&gt; public [1:0]
|--LITERAL_CLASS -&gt; class [1:7]
|--IDENT -&gt; InputTest [1:13]
`--OBJBLOCK -&gt; OBJBLOCK [1:23]
|--LCURLY -&gt; { [1:23]
|--METHOD_DEF -&gt; METHOD_DEF [2:4]
|   |--MODIFIERS -&gt; MODIFIERS [2:4]
|   |   |--ANNOTATION -&gt; ANNOTATION [2:4]
|   |   |   |--AT -&gt; @ [2:4]
|   |   |   |--IDENT -&gt; Generated [2:5]
|   |   |   |--LPAREN -&gt; ( [2:14]
|   |   |   |--EXPR -&gt; EXPR [2:15]
|   |   |   |   `--STRING_LITERAL -&gt; "first" [2:15]
|   |   |   `--RPAREN -&gt; ) [2:22]
|   |   `--LITERAL_PUBLIC -&gt; public [3:4]
|   |--TYPE -&gt; TYPE [3:11]
|   |   `--LITERAL_VOID -&gt; void [3:11]
|   |--IDENT -&gt; test1 [3:16]
|   |--LPAREN -&gt; ( [3:21]
|   |--PARAMETERS -&gt; PARAMETERS [3:22]
|   |--RPAREN -&gt; ) [3:22]
|   `--SLIST -&gt; { [3:24]
|       `--RCURLY -&gt; } [4:4]
|--METHOD_DEF -&gt; METHOD_DEF [6:4]
|   |--MODIFIERS -&gt; MODIFIERS [6:4]
|   |   |--ANNOTATION -&gt; ANNOTATION [6:4]
|   |   |   |--AT -&gt; @ [6:4]
|   |   |   |--IDENT -&gt; Generated [6:5]
|   |   |   |--LPAREN -&gt; ( [6:14]
|   |   |   |--EXPR -&gt; EXPR [6:15]
|   |   |   |   `--STRING_LITERAL -&gt; "second" [6:15]
|   |   |   `--RPAREN -&gt; ) [6:23]
|   |   `--LITERAL_PUBLIC -&gt; public [7:4]
|   |--TYPE -&gt; TYPE [7:11]
|   |   `--LITERAL_VOID -&gt; void [7:11]
|   |--IDENT -&gt; test2 [7:16]
|   |--LPAREN -&gt; ( [7:21]
|   |--PARAMETERS -&gt; PARAMETERS [7:22]
|   |--RPAREN -&gt; ) [7:22]
|   `--SLIST -&gt; { [7:24]
|       `--RCURLY -&gt; } [8:4]
`--RCURLY -&gt; } [9:0]
        </source>
        <p>
          AST node <code>ANNOTATION -&gt; ANNOTATION [6:4]</code> has direct child
          <code>IDENT -&gt; Generated [6:5]</code>,
          therefore can be queried by <code>IDENT</code> value:
        </p>
        <source>
&lt;suppress-xpath checks="." query="//METHOD_DEF[
            .//ANNOTATION/IDENT[@text='Generated']]"/&gt;
        </source>
        <p>
          The problem with query above that it will suppress violations for all methods with
          annotation <code>@Generated</code>. In order to suppress methods with
          <code>@Generated("second")</code> annotations only, you need to look at AST tree again.
          Value of the <code>ANNOTATION</code> node is stored inside sub-node with token type
          <code>STRING_LITERAL</code>. Use the following query to suppress methods with
          <code>@Generated("second")</code> annotation:
        </p>
        <source>
&lt;suppress-xpath checks="." query="//METHOD_DEF[.//ANNOTATION[
            ./IDENT[@text='Generated'] and ./EXPR/STRING_LITERAL[@text='second']]]"/&gt;
        </source>
      </subsection>
      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+SuppressionXpathFilter">
              Google Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fsun_checks.xml+repo%3Acheckstyle%2Fcheckstyle+SuppressionXpathFilter">
              Sun Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+SuppressionXpathFilter">
              Checkstyle Style</a>
          </li>
        </ul>
      </subsection>
      <subsection name="Package" id="Package">
        <p> com.puppycrawl.tools.checkstyle.filters </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p> <a href="../config.html#TreeWalker">TreeWalker</a> </p>
      </subsection>
    </section>
  </body>
</document>
