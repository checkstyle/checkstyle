array.trailing.comma=El array debería llevar una coma al final.

assignment.inner.avoid=Deben evitarse las asignaciones internas.

covariant.equals=equals covariante sin sobrescribir equals(java.lang.Object).

empty.statement=Sentencia vacía.

equals.noHashCode=Definición de ''equals()'' sin la correspondiente definición de ''hashCode()''.

final.variable=La variable ''{0}'' debe declararse final.

hidden.field=''{0}'' oculta un campo.

illegal.token=El uso de ''{0}'' no esta permitido.

illegal.token.text=El texto del token coincide con el patrón ilegal ''{0}''.

instantiation.avoid=Debería evitarse la instanciación de {0}.

inline.conditional.avoid=Evitar los condicionales en línea.

magic.number=''{0}'' es un número mágico.

missing.super.call=El método ''{0}'' debería llamar a ''super.{0}''.
missing.switch.default=switch sin etiqueta \"default\".

multiple.string.literal=La cadena {0} aparece {1} veces en el fichero.

redundant.throws.classInfo=No se puede obtener la información de clase de {0}.
redundant.throws.duplicate=Sentencia throws redundante: ''{0}'' aparece más de una vez.
redundant.throws.subclass=Sentencia throws redundante: ''{0}'' es una subclase de ''{1}''.
redundant.throws.unchecked=Sentencia throws redundante: ''{0}'' es una excepción no comprobada.

simplify.boolreturn=Se puede eliminar la lógica condicional.
simplify.expression=Se puede simplificar la expresión.

nested.if.depth=La profundidad de if-else anidados es {0,number,integer} (máximo permitido es {1,number,integer}).
nested.try.depth=La profundidad de try anidados es {0,number,integer} (máximo permitido es {1,number,integer}).

string.literal.equality=Las cadenas literales deben compararse usando equals(), no ''{0}''.

illegal.catch=Capturar la excepción ''{0}'' no está permitido.
missing.package.declaration=Falta la declaración de paquete.

junit.method.name=El método ''{0}'' debería llamarse ''{1}''.
junit.method.return.type=El método ''{0}'' debe declararse con tipo de retorno {1}.
junit.method.parameters=El método ''{0}'' debe declararse sin parámetros.
junit.method.public.and.static=El método ''{0}'' debe declararse static.
junit.method.protected.or.public=El método ''{0}'' debe ser public o protected.
junit.method.static=El método ''{0}'' no debería ser static.

return.count=El número de sentencias return es {0,number,integer} (máximo permitido es {1,number,integer}).

illegal.type=La declaración de variables, valores de retorno o parámetros de tipo ''{0}'' no está permitida.

declaration.order.constructor=Definición de constructor en orden incorrecto.
declaration.order.method=Definición de método en orden incorrecto.
declaration.order.static=Definición de variable static en orden incorrecto.
declaration.order.instance=Definición de variable de instancia en orden incorrecto.
declaration.order.access=Definición de acceso a variable en orden incorrecto.

parameter.assignment=No esta permitida la asignación del parámetro ''{0}''.

modified.control.variable=Se modifica la variable de control ''{0}''.

explicit.init=La variable ''{0}'' se inicializa explicitamente a ''{1}'' (valor por defecto para su tipo).
default.comes.last=La etiqueta default debe ser la última etiqueta en el switch.
missing.ctor=La clase debería definir un constructor.
fall.through=Caída desde la etiqueta anterior en la sentencia switch.
require.this.variable=La referencia a la variable de instancia ''{0}'' necesita \"this.\".
require.this.unfound.variable=No se puede encontrar la declaración de ''{0}''.
require.this.method=La llamada al método ''{0}'' necesita \"this.\".
multiple.variable.declarations=Sólo se permite una definición de variable por línea.
multiple.variable.declarations.comma=Cada declaración de variable debe estar en su línea.

unnecessary.paren.assign=Paréntesis innecesarios alrededor de la parte derecha de una asignación.
unnecessary.paren.expr=Paréntesis innecesarios alrededor de la expresión.
unnecessary.paren.ident=Paréntesis innecesarios alrededor del identificador ''{0}''.
unnecessary.paren.literal=Paréntesis innecesarios alrededor del literal ''{0}''.
unnecessary.paren.return=Paréntesis innecesarios alrededor del valor de retorno.
unnecessary.paren.string=Paréntesis innecesarios alrededor de la cadena {0}.
