<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.modifier.InterfaceMemberImpliedModifierCheck"
             name="InterfaceMemberImpliedModifier"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;div&gt;
 Checks for implicit modifiers on interface members and nested types.
 &lt;/div&gt;

 &lt;p&gt;
 This check is effectively the opposite of
 &lt;a href="https://checkstyle.org/checks/modifier/redundantmodifier.html"&gt;
 RedundantModifier&lt;/a&gt;.
 It checks the modifiers on interface members, ensuring that certain modifiers are explicitly
 specified even though they are actually redundant.
 &lt;/p&gt;

 &lt;p&gt;
 Methods in interfaces are &lt;code&gt;public&lt;/code&gt; by default, however from Java 9 they can also be
 &lt;code&gt;private&lt;/code&gt;. This check provides the ability to enforce that &lt;code&gt;public&lt;/code&gt; is explicitly
 coded and not implicitly added by the compiler.
 &lt;/p&gt;

 &lt;p&gt;
 From Java 8, there are three types of methods in interfaces - static methods marked with
 &lt;code&gt;static&lt;/code&gt;, default methods marked with &lt;code&gt;default&lt;/code&gt; and abstract methods which do not
 have to be marked with anything. From Java 9, there are also private methods marked with
 &lt;code&gt;private&lt;/code&gt;. This check provides the ability to enforce that &lt;code&gt;abstract&lt;/code&gt; is
 explicitly coded and not implicitly added by the compiler.
 &lt;/p&gt;

 &lt;p&gt;
 Fields in interfaces are always &lt;code&gt;public static final&lt;/code&gt; and as such the compiler does not
 require these modifiers. This check provides the ability to enforce that these modifiers are
 explicitly coded and not implicitly added by the compiler.
 &lt;/p&gt;

 &lt;p&gt;
 Nested types within an interface are always &lt;code&gt;public static&lt;/code&gt; and as such the compiler
 does not require the &lt;code&gt;public static&lt;/code&gt; modifiers. This check provides the ability to
 enforce that the &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; modifiers are explicitly coded and not
 implicitly added by the compiler.
 &lt;/p&gt;
 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 public interface AddressFactory {
   // check enforces code contains "public static final"
   public static final String UNKNOWN = "Unknown";

   String OTHER = "Other";  // violation

   // check enforces code contains "public" or "private"
   public static AddressFactory instance();

   // check enforces code contains "public abstract"
   public abstract Address createAddress(String addressLine, String city);

   List&amp;lt;Address&amp;gt; findAddresses(String city);  // violation

   // check enforces default methods are explicitly declared "public"
   public default Address createAddress(String city) {
     return createAddress(UNKNOWN, city);
   }

   default Address createOtherAddress() {  // violation
     return createAddress(OTHER, OTHER);
   }
 }
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;p&gt;
 Rationale for this check: Methods, fields and nested types are treated differently
 depending on whether they are part of an interface or part of a class. For example, by
 default methods are package-scoped on classes, but public in interfaces. However, from
 Java 8 onwards, interfaces have changed to be much more like abstract classes.
 Interfaces now have static and instance methods with code. Developers should not have to
 remember which modifiers are required and which are implied. This check allows the simpler
 alternative approach to be adopted where the implied modifiers must always be coded explicitly.
 &lt;/p&gt;</description>
         <properties>
            <property default-value="true"
                      name="violateImpliedAbstractMethod"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;abstract&lt;/code&gt; is explicitly coded
 on interface methods.</description>
            </property>
            <property default-value="true" name="violateImpliedFinalField" type="boolean">
               <description>Control whether to enforce that &lt;code&gt;final&lt;/code&gt; is explicitly coded
 on interface fields.</description>
            </property>
            <property default-value="true"
                      name="violateImpliedPublicField"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;public&lt;/code&gt; is explicitly coded
 on interface fields.</description>
            </property>
            <property default-value="true"
                      name="violateImpliedPublicMethod"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;public&lt;/code&gt; is explicitly coded
 on interface methods.</description>
            </property>
            <property default-value="true"
                      name="violateImpliedPublicNested"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;public&lt;/code&gt; is explicitly coded
 on interface nested types.</description>
            </property>
            <property default-value="true"
                      name="violateImpliedStaticField"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;static&lt;/code&gt; is explicitly coded
 on interface fields.</description>
            </property>
            <property default-value="true"
                      name="violateImpliedStaticNested"
                      type="boolean">
               <description>Control whether to enforce that &lt;code&gt;static&lt;/code&gt; is explicitly coded
 on interface nested types.</description>
            </property>
         </properties>
         <message-keys>
            <message-key key="interface.implied.modifier"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
