<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.coding.InnerAssignmentCheck"
             name="InnerAssignment"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;div&gt;
 Checks for assignments in subexpressions, such as in
 &lt;code&gt;String s = Integer.toString(i = 2);&lt;/code&gt;.
 &lt;/div&gt;

 &lt;p&gt;
 Rationale: Except for the loop idioms,
 all assignments should occur in their own top-level statement to increase readability.
 With inner assignments like the one given above, it is difficult to see all places
 where a variable is set.
 &lt;/p&gt;

 &lt;p&gt;
 Note: Check allows usage of the popular assignments in loops:
 &lt;/p&gt;
 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 String line;
 while ((line = bufferedReader.readLine()) != null) { // OK
   // process the line
 }

 for (;(line = bufferedReader.readLine()) != null;) { // OK
   // process the line
 }

 do {
   // process the line
 }
 while ((line = bufferedReader.readLine()) != null); // OK
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;p&gt;
 Assignment inside a condition is not a problem here, as the assignment is surrounded
 by an extra pair of parentheses. The comparison is &lt;code&gt;!= null&lt;/code&gt; and there is no chance that
 intention was to write &lt;code&gt;line == reader.readLine()&lt;/code&gt;.
 &lt;/p&gt;</description>
         <message-keys>
            <message-key key="assignment.inner.avoid"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
