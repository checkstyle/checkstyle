<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="AbbreviationAsWordInName" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.naming.AbbreviationAsWordInNameCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Validates abbreviations (consecutive capital letters) length in
 identifier name, it also allows to enforce camel case naming. Please read more at
 <a href="https://checkstyle.org/styleguides/google-java-style-20180523/javaguide.html#s5.3-camel-case">
 Google Style Guide</a> to get to know how to avoid long abbreviations in names.
 </p>
 <p>
 {@code allowedAbbreviationLength} specifies how many consecutive capital letters are
 allowed in the identifier.
 A value of <i>3</i> indicates that up to 4 consecutive capital letters are allowed,
 one after the other, before a violation is printed. The identifier 'MyTEST' would be
 allowed, but 'MyTESTS' would not be.
 A value of <i>0</i> indicates that only 1 consecutive capital letter is allowed. This
 is what should be used to enforce strict camel casing. The identifier 'MyTest' would
 be allowed, but 'MyTEst' would not be.
 </p>
 <p>
 {@code ignoreFinal}, {@code ignoreStatic}, and {@code ignoreStaticFinal}
 control whether variables with the respective modifiers are to be ignored.
 Note that a variable that is both static and final will always be considered under
 {@code ignoreStaticFinal} only, regardless of the values of {@code ignoreFinal}
 and {@code ignoreStatic}. So for example if {@code ignoreStatic} is true but
 {@code ignoreStaticFinal} is false, then static final variables will not be ignored.
 </p>]]></description>
      <properties>
        <property name="allowedAbbreviationLength" type="int" default-value="3">
          <description><![CDATA[Indicate the number of consecutive capital
 letters allowed in targeted identifiers (abbreviations in the classes, interfaces, variables
 and methods names, ... ).]]></description>
        </property>
        <property name="allowedAbbreviations" type="java.lang.String[]" default-value="">
          <description><![CDATA[Specify list of abbreviations that must be skipped for
 checking. Abbreviations should be separated by comma.]]></description>
        </property>
        <property name="ignoreFinal" type="boolean" default-value="true">
          <description><![CDATA[Allow to skip variables with {@code final} modifier.]]></description>
        </property>
        <property name="ignoreStatic" type="boolean" default-value="true">
          <description><![CDATA[Allow to skip variables with {@code static} modifier.]]></description>
        </property>
        <property name="ignoreStaticFinal" type="boolean" default-value="true">
          <description><![CDATA[Allow to skip variables with both {@code static} and
 {@code final} modifiers.]]></description>
        </property>
        <property name="ignoreOverriddenMethods" type="boolean" default-value="true">
          <description><![CDATA[Allow to ignore methods tagged with {@code @Override}
 annotation (that usually mean inherited name).]]></description>
        </property>
        <property name="tokens" type="java.lang.String[]" default-value="CLASS_DEF,INTERFACE_DEF,ENUM_DEF,ANNOTATION_DEF,ANNOTATION_FIELD_DEF,PARAMETER_DEF,VARIABLE_DEF,METHOD_DEF,PATTERN_VARIABLE_DEF,RECORD_DEF,RECORD_COMPONENT_DEF" validation-type="tokenSet">
          <description><![CDATA[tokens to check]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="abbreviation.as.word"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
