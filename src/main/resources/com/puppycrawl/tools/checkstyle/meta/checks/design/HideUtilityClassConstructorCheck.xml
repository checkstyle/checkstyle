<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="HideUtilityClassConstructor" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.design.HideUtilityClassConstructorCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Makes sure that utility classes (classes that contain only static methods or fields in their API)
 do not have a public constructor.
 </p>
 <p>
 Rationale: Instantiating utility classes does not make sense.
 Hence the constructors should either be private or (if you want to allow subclassing) protected.
 A common mistake is forgetting to hide the default constructor.
 </p>
 <p>
 If you make the constructor protected you may want to consider the following constructor
 implementation technique to disallow instantiating subclasses:
 </p>
 <pre>
 public class StringUtils // not final to allow subclassing
 {
   protected StringUtils() {
     // prevents calls from subclass
     throw new UnsupportedOperationException();
   }

   public static int count(char c, String s) {
     // ...
   }
 }
 </pre>]]></description>
      <message-keys>
        <message-key key="hide.utility.class"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
