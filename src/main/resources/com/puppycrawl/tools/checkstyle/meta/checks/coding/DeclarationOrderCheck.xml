<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="DeclarationOrder" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.coding.DeclarationOrderCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks that the parts of a class or interface declaration appear in the order
 suggested by the
 <a href="https://checkstyle.org/styleguides/sun-code-conventions-19990420/CodeConventions.doc2.html#a1852">
 Code Conventions for the Java Programming Language</a>.
 </p>
 <p>
 According to
 <a href="https://checkstyle.org/styleguides/sun-code-conventions-19990420/CodeConventions.doc2.html#a1852">
 Code Conventions for the Java Programming Language</a>, the parts of a class
 or interface declaration should appear in the following order:
 </p>
 <ol>
 <li>
 Class (static) variables. First the public class variables, then
 protected, then package level (no access modifier), and then private.
 </li>
 <li> Instance variables. First the public class variables, then
 protected, then package level (no access modifier), and then private.
 </li>
 <li> Constructors </li>
 <li> Methods </li>
 </ol>
 <p>
 Purpose of <b>ignore*</b> option is to ignore related violations,
 however it still impacts on other class members.
 </p>
 <p>ATTENTION: the check skips class fields which have
 <a href="https://docs.oracle.com/javase/specs/jls/se11/html/jls-8.html#jls-8.3.3">
 forward references </a> from validation due to the fact that we have Checkstyle's limitations
 to clearly detect user intention of fields location and grouping. For example:
 </p>
 <pre>
 public class A {
   private double x = 1.0;
   private double y = 2.0;
   public double slope = x / y; // will be skipped from validation due to forward reference
 }
 </pre>]]></description>
      <properties>
        <property name="ignoreConstructors" type="boolean" default-value="false">
          <description><![CDATA[control whether to ignore constructors.]]></description>
        </property>
        <property name="ignoreModifiers" type="boolean" default-value="false">
          <description><![CDATA[control whether to ignore modifiers (fields, ...).]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="declaration.order.access"/>
        <message-key key="declaration.order.constructor"/>
        <message-key key="declaration.order.instance"/>
        <message-key key="declaration.order.static"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
