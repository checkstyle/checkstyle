<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="VisibilityModifier" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.design.VisibilityModifierCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks visibility of class members. Only static final, immutable or annotated
 by specified annotation members may be public;
 other class members must be private unless the property {@code protectedAllowed}
 or {@code packageAllowed} is set.
 </p>
 <p>
 Public members are not flagged if the name matches the public
 member regular expression (contains {@code "^serialVersionUID$"} by
 default).
 </p>
 <p>
 Note that Checkstyle 2 used to include {@code "^f[A-Z][a-zA-Z0-9]*$"} in the default pattern
 to allow names used in container-managed persistence for Enterprise JavaBeans (EJB) 1.1 with
 the default settings. With EJB 2.0 it is no longer necessary to have public access for
 persistent fields, so the default has been changed.
 </p>
 <p>
 Rationale: Enforce encapsulation.
 </p>
 <p>
 Check also has options making it less strict:
 </p>
 <p>
 <b>ignoreAnnotationCanonicalNames</b>- the list of annotations which ignore
 variables in consideration. If user will provide short annotation name that
 type will match to any named the same type without consideration of package.
 </p>
 <p>
 <b>allowPublicFinalFields</b>- which allows public final fields.
 </p>
 <p>
 <b>allowPublicImmutableFields</b>- which allows immutable fields to be
 declared as public if defined in final class.
 </p>
 <p>
 Field is known to be immutable if:
 </p>
 <ul>
 <li>It's declared as final</li>
 <li>Has either a primitive type or instance of class user defined to be immutable
 (such as String, ImmutableCollection from Guava and etc)</li>
 </ul>
 <p>
 Classes known to be immutable are listed in <b>immutableClassCanonicalNames</b>
 by their canonical names.
 </p>
 <p>
 Property Rationale: Forcing all fields of class to have private modifier by default is
 good in most cases, but in some cases it drawbacks in too much boilerplate get/set code.
 One of such cases are immutable classes.
 </p>
 <p>
 Restriction: Check doesn't check if class is immutable, there's no checking
 if accessory methods are missing and all fields are immutable, we only check
 if current field is immutable or final.
 Under the flag <b>allowPublicImmutableFields</b>, the enclosing class must
 also be final, to encourage immutability.
 Under the flag <b>allowPublicFinalFields</b>, the final modifier
 on the enclosing class is optional.
 </p>
 <p>
 Star imports are out of scope of this Check. So if one of type imported via
 star import collides with user specified one by its short name - there
 won't be Check's violation.
 </p>]]></description>
      <properties>
        <property name="packageAllowed" type="boolean" default-value="false">
          <description><![CDATA[Control whether package visible members are allowed.]]></description>
        </property>
        <property name="protectedAllowed" type="boolean" default-value="false">
          <description><![CDATA[Control whether protected members are allowed.]]></description>
        </property>
        <property name="publicMemberPattern" type="java.util.regex.Pattern" default-value="^serialVersionUID$">
          <description><![CDATA[Specify pattern for public members that should be ignored.]]></description>
        </property>
        <property name="allowPublicFinalFields" type="boolean" default-value="false">
          <description><![CDATA[Allow final fields to be declared as public.]]></description>
        </property>
        <property name="allowPublicImmutableFields" type="boolean" default-value="false">
          <description><![CDATA[Allow immutable fields to be
 declared as public if defined in final class.]]></description>
        </property>
        <property name="immutableClassCanonicalNames" type="java.lang.String[]" default-value="java.io.File, java.lang.Boolean, java.lang.Byte,">
          <description><![CDATA[Specify immutable classes canonical names.]]></description>
        </property>
        <property name="ignoreAnnotationCanonicalNames" type="java.lang.String[]" default-value="com.google.common.annotations.VisibleForTesting,">
          <description><![CDATA[Specify the list of annotations canonical
 names which ignore variables in consideration.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="variable.notPrivate"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
