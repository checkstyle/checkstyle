<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="AvoidNestedBlocks" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.blocks.AvoidNestedBlocksCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Finds nested blocks (blocks that are used freely in the code).
 </p>
 <p>
 Rationale: Nested blocks are often leftovers from the
 debugging process, they confuse the reader.
 </p>
 <p>
 For example this Check finds the obsolete braces in
 </p>
 <pre>
 public void guessTheOutput()
 {
   int whichIsWhich = 0;
   {
     whichIsWhich = 2;
   }
   System.out.println("value = " + whichIsWhich);
 }
 </pre>
 <p>
 and debugging / refactoring leftovers such as
 </p>
 <pre>
 // if (conditionThatIsNotUsedAnyLonger)
 {
   System.out.println("unconditional");
 }
 </pre>
 <p>
 A case in a switch statement does not implicitly form a block.
 Thus to be able to introduce local variables that have case scope
 it is necessary to open a nested block. This is supported, set
 the allowInSwitchCase property to true and include all statements
 of the case in the block.
 </p>
 <pre>
 switch (a)
 {
   case 0:
     // Never OK, break outside block
     {
       x = 1;
     }
     break;
   case 1:
     // Never OK, statement outside block
     System.out.println("Hello");
     {
       x = 2;
       break;
     }
   case 2:
     // OK if allowInSwitchCase is true
     {
       System.out.println("Hello");
       x = 3;
       break;
     }
 }
 </pre>]]></description>
      <properties>
        <property name="allowInSwitchCase" type="boolean" default-value="false">
          <description><![CDATA[Allow nested blocks if they are the
 only child of a switch case.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="block.nested"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
