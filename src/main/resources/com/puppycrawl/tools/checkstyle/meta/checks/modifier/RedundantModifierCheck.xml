<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.modifier.RedundantModifierCheck"
             name="RedundantModifier"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;div&gt;
 Checks for redundant modifiers.
 &lt;/div&gt;

 &lt;p&gt;
 Rationale: The Java Language Specification strongly discourages the usage
 of &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;abstract&lt;/code&gt; for method declarations in interface
 definitions as a matter of style.
 &lt;/p&gt;

 &lt;p&gt;The check validates:&lt;/p&gt;
 &lt;ol&gt;
 &lt;li&gt;
 Interface and annotation definitions.
 &lt;/li&gt;
 &lt;li&gt;
 Final modifier on methods of final and anonymous classes.
 &lt;/li&gt;
 &lt;li&gt;
 Type declarations nested under interfaces that are declared as &lt;code&gt;public&lt;/code&gt; or &lt;code&gt;static&lt;/code&gt;.
 &lt;/li&gt;
 &lt;li&gt;
 Class constructors.
 &lt;/li&gt;
 &lt;li&gt;
 Nested &lt;code&gt;enum&lt;/code&gt; definitions that are declared as &lt;code&gt;static&lt;/code&gt;.
 &lt;/li&gt;
 &lt;li&gt;
 &lt;code&gt;record&lt;/code&gt; definitions that are declared as &lt;code&gt;final&lt;/code&gt; and nested
 &lt;code&gt;record&lt;/code&gt; definitions that are declared as &lt;code&gt;static&lt;/code&gt;.
 &lt;/li&gt;
 &lt;li&gt;
 &lt;code&gt;strictfp&lt;/code&gt; modifier when using JDK 17 or later. See reason at
 &lt;a href="https://openjdk.org/jeps/306"&gt;JEP 306&lt;/a&gt;
 &lt;/li&gt;
 &lt;li&gt;
 &lt;code&gt;final&lt;/code&gt; modifier on unnamed variables when using JDK 22 or later.
 &lt;/li&gt;
 &lt;/ol&gt;

 &lt;p&gt;
 interfaces by definition are abstract so the &lt;code&gt;abstract&lt;/code&gt; modifier is redundant on them.
 &lt;/p&gt;

 &lt;p&gt;Type declarations nested under interfaces by definition are public and static,
 so the &lt;code&gt;public&lt;/code&gt; and &lt;code&gt;static&lt;/code&gt; modifiers on nested type declarations are redundant.
 On the other hand, classes inside of interfaces can be abstract or non abstract.
 So, &lt;code&gt;abstract&lt;/code&gt; modifier is allowed.
 &lt;/p&gt;

 &lt;p&gt;Fields in interfaces and annotations are automatically
 public, static and final, so these modifiers are redundant as
 well.&lt;/p&gt;

 &lt;p&gt;As annotations are a form of interface, their fields are also
 automatically public, static and final just as their
 annotation fields are automatically public and abstract.&lt;/p&gt;

 &lt;p&gt;A record class is implicitly final and cannot be abstract, these restrictions emphasize
 that the API of a record class is defined solely by its state description, and
 cannot be enhanced later by another class. Nested records are implicitly static. This avoids an
 immediately enclosing instance which would silently add state to the record class.
 See &lt;a href="https://openjdk.org/jeps/395"&gt;JEP 395&lt;/a&gt; for more info.&lt;/p&gt;

 &lt;p&gt;Enums by definition are static implicit subclasses of java.lang.Enum&amp;#60;E&amp;#62;.
 So, the &lt;code&gt;static&lt;/code&gt; modifier on the enums is redundant. In addition,
 if enum is inside of interface, &lt;code&gt;public&lt;/code&gt; modifier is also redundant.&lt;/p&gt;

 &lt;p&gt;Enums can also contain abstract methods and methods which can be overridden by the declared
 enumeration fields.
 See the following example:&lt;/p&gt;
 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 public enum EnumClass {
   FIELD_1,
   FIELD_2 {
     &amp;#64;Override
     public final void method1() {} // violation expected
   };

   public void method1() {}
   public final void method2() {} // no violation expected
 }
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;p&gt;Since these methods can be overridden in these situations, the final methods are not
 marked as redundant even though they can't be extended by other classes/enums.&lt;/p&gt;

 &lt;p&gt;
 Nested &lt;code&gt;enum&lt;/code&gt; types are always static by default.
 &lt;/p&gt;

 &lt;p&gt;Final classes by definition cannot be extended so the &lt;code&gt;final&lt;/code&gt;
 modifier on the method of a final class is redundant.
 &lt;/p&gt;

 &lt;p&gt;Public modifier for constructors in non-public non-protected classes
 is always obsolete: &lt;/p&gt;

 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 public class PublicClass {
   public PublicClass() {} // OK
 }

 class PackagePrivateClass {
   public PackagePrivateClass() {} // violation expected
 }
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;p&gt;There is no violation in the following example,
 because removing public modifier from ProtectedInnerClass
 constructor will make this code not compiling: &lt;/p&gt;

 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 package a;
 public class ClassExample {
   protected class ProtectedInnerClass {
     public ProtectedInnerClass () {}
   }
 }

 package b;
 import a.ClassExample;
 public class ClassExtending extends ClassExample {
   ProtectedInnerClass pc = new ProtectedInnerClass();
 }
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;</description>
         <properties>
            <property default-value="22" name="jdkVersion" type="java.lang.String">
               <description>Set the JDK version that you are using.
 Old JDK version numbering is supported (e.g. 1.8 for Java 8)
 as well as just the major JDK version alone (e.g. 8) is supported.
 This property only considers features from officially released
 Java versions as supported. Features introduced in preview releases are not considered
 supported until they are included in a non-preview release.</description>
            </property>
            <property default-value="METHOD_DEF,VARIABLE_DEF,ANNOTATION_FIELD_DEF,INTERFACE_DEF,CTOR_DEF,CLASS_DEF,ENUM_DEF,RESOURCE,ANNOTATION_DEF,RECORD_DEF,PATTERN_VARIABLE_DEF,LITERAL_CATCH,LAMBDA"
                      name="tokens"
                      type="java.lang.String[]"
                      validation-type="tokenSet">
               <description>tokens to check</description>
            </property>
         </properties>
         <message-keys>
            <message-key key="redundantModifier"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
