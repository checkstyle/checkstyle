<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.regexp.RegexpCheck"
             name="Regexp"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;p&gt;
 Checks that a specified pattern exists, exists less than
 a set number of times, or does not exist in the file.
 &lt;/p&gt;
 &lt;p&gt;
 This check combines all the functionality provided by
 &lt;a href="https://checkstyle.org/config_header.html#RegexpHeader"&gt;RegexpHeader&lt;/a&gt;
 except supplying the regular expression from a file.
 &lt;/p&gt;
 &lt;p&gt;
 It differs from them in that it works in multiline mode. Its regular expression
 can span multiple lines and it checks this against the whole file at once.
 The others work in singleline mode. Their single or multiple regular expressions
 can only span one line. They check each of these against each line in the file in turn.
 &lt;/p&gt;
 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; Because of the different mode of operation there may be some
 changes in the regular expressions used to achieve a particular end.
 &lt;/p&gt;
 &lt;p&gt;
 In multiline mode...
 &lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;
 {@code ^} means the beginning of a line, as opposed to beginning of the input.
 &lt;/li&gt;
 &lt;li&gt;
 For beginning of the input use {@code \A}.
 &lt;/li&gt;
 &lt;li&gt;
 {@code $} means the end of a line, as opposed to the end of the input.
 &lt;/li&gt;
 &lt;li&gt;
 For end of input use {@code \Z}.
 &lt;/li&gt;
 &lt;li&gt;
 Each line in the file is terminated with a line feed character.
 &lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; Not all regular expression engines are created equal.
 Some provide extra functions that others do not and some elements
 of the syntax may vary. This check makes use of the
 &lt;a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/package-summary.html"&gt;
 java.util.regex package&lt;/a&gt;; please check its documentation for details
 of how to construct a regular expression to achieve a particular goal.
 &lt;/p&gt;
 &lt;p&gt;
 &lt;b&gt;Note:&lt;/b&gt; When entering a regular expression as a parameter in
 the XML config file you must also take into account the XML rules. e.g.
 if you want to match a &amp;lt; symbol you need to enter &amp;amp;lt;.
 The regular expression should be entered on one line.
 &lt;/p&gt;</description>
         <properties>
            <property default-value="^$" name="format" type="java.util.regex.Pattern">
               <description>Specify the pattern to match against.</description>
            </property>
            <property name="message" type="java.lang.String">
               <description>Specify message which is used to notify about
 violations, if empty then the default (hard-coded) message is used.</description>
            </property>
            <property default-value="false" name="illegalPattern" type="boolean">
               <description>Control whether the pattern is required or illegal.</description>
            </property>
            <property default-value="0" name="duplicateLimit" type="int">
               <description>Control whether to check for duplicates
 of a required pattern, any negative value means no checking for duplicates,
 any positive value is used as the maximum number of allowed duplicates,
 if the limit is exceeded violations will be logged.</description>
            </property>
            <property default-value="100" name="errorLimit" type="int">
               <description>Specify the maximum number of violations before
 the check will abort.</description>
            </property>
            <property default-value="false" name="ignoreComments" type="boolean">
               <description>Control whether to ignore matches found within comments.</description>
            </property>
         </properties>
         <message-keys>
            <message-key key="duplicate.regexp"/>
            <message-key key="illegal.regexp"/>
            <message-key key="required.regexp"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
