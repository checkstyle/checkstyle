<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.coding.CovariantEqualsCheck"
             name="CovariantEquals"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;div&gt;
 Checks that classes and records which define a covariant &lt;code&gt;equals()&lt;/code&gt; method
 also override method &lt;code&gt;equals(Object)&lt;/code&gt;.
 &lt;/div&gt;

 &lt;p&gt;
 Covariant &lt;code&gt;equals()&lt;/code&gt; - method that is similar to &lt;code&gt;equals(Object)&lt;/code&gt;,
 but with a covariant parameter type (any subtype of Object).
 &lt;/p&gt;

 &lt;p&gt;
 &lt;strong&gt;Notice&lt;/strong&gt;: the enums are also checked,
 even though they cannot override &lt;code&gt;equals(Object)&lt;/code&gt;.
 The reason is to point out that implementing &lt;code&gt;equals()&lt;/code&gt; in enums
 is considered an awful practice: it may cause having two different enum values
 that are equal using covariant enum method, and not equal when compared normally.
 &lt;/p&gt;

 &lt;p&gt;
 Inspired by &lt;a href="https://www.cs.jhu.edu/~daveho/pubs/oopsla2004.pdf"&gt;
 Finding Bugs is Easy, chapter '4.5 Bad Covariant Definition of Equals (Eq)'&lt;/a&gt;:
 &lt;/p&gt;

 &lt;p&gt;
 Java classes and records may override the &lt;code&gt;equals(Object)&lt;/code&gt; method to define
 a predicate for object equality. This method is used by many of the Java
 runtime library classes; for example, to implement generic containers.
 &lt;/p&gt;

 &lt;p&gt;
 Programmers sometimes mistakenly use the type of their class &lt;code&gt;Foo&lt;/code&gt;
 as the type of the parameter to &lt;code&gt;equals()&lt;/code&gt;:
 &lt;/p&gt;
 &lt;div class="wrapper"&gt;&lt;pre class="prettyprint"&gt;&lt;code class="language-java"&gt;
 public boolean equals(Foo obj) {...}
 &lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;

 &lt;p&gt;
 This covariant version of &lt;code&gt;equals()&lt;/code&gt; does not override the version in
 the &lt;code&gt;Object&lt;/code&gt; class, and it may lead to unexpected behavior at runtime,
 especially if the class is used with one of the standard collection classes
 which expect that the standard &lt;code&gt;equals(Object)&lt;/code&gt; method is overridden.
 &lt;/p&gt;

 &lt;p&gt;
 This kind of bug is not obvious because it looks correct, and in circumstances
 where the class is accessed through the references of the class type (rather
 than a supertype), it will work correctly. However, the first time it is used
 in a container, the behavior might be mysterious. For these reasons, this type
 of bug can elude testing and code inspections.
 &lt;/p&gt;</description>
         <message-keys>
            <message-key key="covariant.equals"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
