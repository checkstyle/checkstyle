<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="MissingOverride" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.annotation.MissingOverrideCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Verifies that the {@code @Override} annotation is present
 when the {@code @inheritDoc} javadoc tag is present.
 </p>
 <p>
 Rationale: The &#64;Override annotation helps
 compiler tools ensure that an override is actually occurring.  It is
 quite easy to accidentally overload a method or hide a static method
 and using the &#64;Override annotation points out these problems.
 </p>
 <p>
 This check will log a violation if using the &#64;inheritDoc tag on a method that
 is not valid (ex: private, or static method).
 </p>
 <p>
 There is a slight difference between the &#64;Override annotation in Java 5 versus
 Java 6 and above. In Java 5, any method overridden from an interface cannot
 be annotated with &#64;Override. In Java 6 this behavior is allowed.
 </p>
 <p>
 As a result of the aforementioned difference between Java 5 and Java 6, a
 property called {@code javaFiveCompatibility} is available. This
 property will only check classes, interfaces, etc. that do not contain the
 extends or implements keyword or are not anonymous classes. This means it
 only checks methods overridden from {@code java.lang.Object}.
 <b>Java 5 Compatibility mode severely limits this check. It is recommended to
 only use it on Java 5 source.</b>
 </p>]]></description>
      <properties>
        <property name="javaFiveCompatibility" type="boolean" default-value="false">
          <description><![CDATA[Enable java 5 compatibility mode.]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="annotation.missing.override"/>
        <message-key key="tag.not.valid.on"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
