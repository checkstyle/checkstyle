<?xml version="1.0" encoding="UTF-8"?>
<checkstyle-metadata>
   <module>
      <check fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.coding.MissingNullCaseInSwitchCheck"
             name="MissingNullCaseInSwitch"
             parent="com.puppycrawl.tools.checkstyle.TreeWalker">
         <description>&lt;p&gt;
 Checks that switch statement or expression that uses reference type in case labels has
 a {@code null} case label.
 &lt;/p&gt;
 &lt;p&gt;
 Rationale: switch statements and expressions in Java throw a
 {@code NullPointerException} if the selector expression evaluates to {@code null}.
 With the introduction of patterns in case label,
 It is now possible to integrate a null check within the switch,
 eliminating the risk of {@code NullPointerException} and simplifies the code
 as there is no need for an external null check before entering the switch.
 &lt;/p&gt;
 &lt;p&gt;
 Limitations due to not being type-aware:
 &lt;/p&gt;
 &lt;ul&gt;
 &lt;li&gt;
 This check does not differentiate between primitive types and
 their boxed counterparts in case labels.
 Therefore, any case label with an integer will not violate this check,
 even if it is a reference type {@code Integer}.
 &lt;/li&gt;
 &lt;li&gt;
 This check will not violate case labels with idents even if
 this is an identifier of Enums. We can't tell if the identifier
 is an Enum or just a normal final variable.
 &lt;/li&gt;
 &lt;/ul&gt;
 &lt;p&gt;
 See the &lt;a href="https://docs.oracle.com/javase/specs/jls/se22/html/jls-15.html#jls-15.28"&gt;
 Java Language Specification&lt;/a&gt; for more information about switch statements and expressions.
 &lt;/p&gt;</description>
         <message-keys>
            <message-key key="missing.switch.nullcase"/>
         </message-keys>
      </check>
   </module>
</checkstyle-metadata>
