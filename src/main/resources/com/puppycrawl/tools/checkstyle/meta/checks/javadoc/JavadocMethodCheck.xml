<?xml version="1.0" encoding="UTF-8"?>

<checkstyle-metadata>
  <module>
    <check name="JavadocMethod" fully-qualified-name="com.puppycrawl.tools.checkstyle.checks.javadoc.JavadocMethodCheck" parent="com.puppycrawl.tools.checkstyle.TreeWalker">
      <description><![CDATA[<p>
 Checks the Javadoc of a method or constructor.
 The scope to verify is specified using the {@code Scope} class and defaults
 to {@code Scope.PRIVATE}. To verify another scope, set property scope to
 a different <a href="https://checkstyle.org/property_types.html#Scope">scope</a>.
 </p>
 <p>
 Violates parameters and type parameters for which no param tags are present can
 be suppressed by defining property {@code allowMissingParamTags}.
 </p>
 <p>
 Violates methods which return non-void but for which no return tag is present can
 be suppressed by defining property {@code allowMissingReturnTag}.
 </p>
 <p>
 Violates exceptions which are declared to be thrown (by {@code throws} in the method
 signature or by {@code throw new} in the method body), but for which no throws tag is
 present by activation of property {@code validateThrows}.
 Note that {@code throw new} is not checked in the following places:
 </p>
 <ul>
 <li>
 Inside a try block (with catch). It is not possible to determine if the thrown
 exception can be caught by the catch block as there is no knowledge of the
 inheritance hierarchy, so the try block is ignored entirely. However, catch
 and finally blocks, as well as try blocks without catch, are still checked.
 </li>
 <li>
 Local classes, anonymous classes and lambda expressions. It is not known when the
 throw statements inside such classes are going to be evaluated, so they are ignored.
 </li>
 </ul>
 <p>
 ATTENTION: Checkstyle does not have information about hierarchy of exception types
 so usage of base class is considered as separate exception type.
 As workaround you need to specify both types in javadoc (parent and exact type).
 </p>
 <p>
 Javadoc is not required on a method that is tagged with the {@code @Override}
 annotation. However under Java 5 it is not possible to mark a method required
 for an interface (this was <i>corrected</i> under Java 6). Hence Checkstyle
 supports using the convention of using a single {@code {@inheritDoc}} tag
 instead of all the other tags.
 </p>
 <p>
 Note that only inheritable items will allow the {@code {@inheritDoc}}
 tag to be used in place of comments. Static methods at all visibilities,
 private non-static methods and constructors are not inheritable.
 </p>
 <p>
 For example, if the following method is implementing a method required by
 an interface, then the Javadoc could be done as:
 </p>
 <pre>
 &#47;** {&#64;inheritDoc} *&#47;
 public int checkReturnTag(final int aTagIndex,
                           JavadocTag[] aTags,
                           int aLineNo)
 </pre>]]></description>
      <properties>
        <property name="allowedAnnotations" type="java.lang.String[]" default-value="Override">
          <description><![CDATA[Specify the list of annotations
 that allow missed documentation.]]></description>
        </property>
        <property name="validateThrows" type="boolean" default-value="false">
          <description><![CDATA[Control whether to validate {@code throws} tags.]]></description>
        </property>
        <property name="scope" type="com.puppycrawl.tools.checkstyle.api.Scope" default-value="private">
          <description><![CDATA[Specify the visibility scope where Javadoc comments are checked.]]></description>
        </property>
        <property name="excludeScope" type="com.puppycrawl.tools.checkstyle.api.Scope">
          <description><![CDATA[Specify the visibility scope where Javadoc comments
 are not checked.]]></description>
        </property>
        <property name="allowMissingParamTags" type="boolean" default-value="false">
          <description><![CDATA[Control whether to ignore violations
 when a method has parameters but does not have matching {@code param} tags in the javadoc.]]></description>
        </property>
        <property name="allowMissingReturnTag" type="boolean" default-value="false">
          <description><![CDATA[Control whether to ignore violations
 when a method returns nonvoid type and does not have a {@code return} tag in the javadoc.]]></description>
        </property>
        <property name="tokens" type="java.lang.String[]" default-value="METHOD_DEF,CTOR_DEF,ANNOTATION_FIELD_DEF" validation-type="tokenSet">
          <description><![CDATA[tokens to check]]></description>
        </property>
      </properties>
      <message-keys>
        <message-key key="javadoc.classInfo"/>
        <message-key key="javadoc.duplicateTag"/>
        <message-key key="javadoc.expectedTag"/>
        <message-key key="javadoc.invalidInheritDoc"/>
        <message-key key="javadoc.return.expected"/>
        <message-key key="javadoc.unusedTag"/>
        <message-key key="javadoc.unusedTagGeneral"/>
      </message-keys>
    </check>
  </module>
</checkstyle-metadata>
