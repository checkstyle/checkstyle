array.trailing.comma=У последнего элемента массива должна быть запятая.
assignment.inner.avoid=Внутренние присвоения следует избегать.
avoid.clone.method=Избегайте использования метода clone().
avoid.double.brace.init=Избегайте инициализации в двойных скобках.
avoid.finalizer.method=Избегайте использования метода finalize().
covariant.equals=Ковариантный equals() без переопределения equals(java.lang.Object).
declaration.order.access=Объявляйте переменные в порядке расширения доступа.
declaration.order.constructor=Определение конструктора в неправильном порядке.
declaration.order.instance=Определение переменной в неправильном порядке.
declaration.order.static=Определение статической переменной в неправильном порядке.
default.comes.last=default должен быть в конце switch.
default.comes.last.in.casegroup=default должен быть в конце группы case-ов.
empty.statement=Пустое выражение.
equals.avoid.null=При сравнении с помощью equals() строковое выражение должно быть слева.
equals.noEquals=Определение ''hashCode()'' без определения ''equals()''.
equals.noHashCode=Определение ''equals()'' без определения ''hashCode()''.
equalsIgnoreCase.avoid.null=При сравнении с помощью equalsIgnoreCase() строковое выражение должно быть слева.
explicit.init=Переменная ''{0}'' явно инициализирована ''{1}'' (значение по умолчанию для этого типа).
fall.through=Переход из предыдущей ветви инструкции switch.
fall.through.last=Переход из последней ветви инструкции switch.
final.variable=Переменная ''{0}'' должна быть объявлена final.
hidden.field=''{0}'' скрывает поле.
illegal.catch=Недопустимо ловить ''{0}''.
illegal.throw=Недопустимо выбрасывать ''{0}''
illegal.token=Недопустимо использовать ''{0}''.
illegal.token.text=Текстовый токен соответствует недопустимому паттерну ''{0}''.
illegal.type=Недопустимо использование типа ''{0}''.
inline.conditional.avoid=Избегайте тернарных операций.
instantiation.avoid=Избегайте инициализацию объекта {0}.
magic.number=Магическое число ''{0}'' .
matchxpath.match=Обнаружена недопустимая структура кода.
mismatch.package.directory=Имя пакета не совпадает с именем каталога.
missing.ctor=В классе должен быть определён конструктор.
missing.package.declaration=Отсутствует объявление пакета.
missing.super.call=Метод ''{0}'' должен вызывать ''super.{0}''.
missing.switch.default=В switch отсутствует \"default\".
modified.control.variable=Переменная управления циклом ''{0}'' не должна изменяться в теле цикла.
multiple.statements.line=Используйте только один оператор в строке.
multiple.string.literal=Строка {0} встречается {1} раз в этом файле.
multiple.variable.declarations=В каждой строке может быть определена только одна переменная.
multiple.variable.declarations.comma=В каждой строке может быть проинициализирована только одна переменная.
nested.for.depth=Глубина цикла for {0,number,integer} (максимум {1,number,integer}).
nested.if.depth=Глубина if-else {0,number,integer} (максимум {1,number,integer}).
nested.try.depth=Глубина try {0,number,integer} (максимум {1,number,integer}).
no.array.trailing.comma=У последнего элемента массива не должно быть запятой.
no.enum.trailing.comma=У последней константы перечисления не должно быть запятой.
overload.methods.declaration=Все перегруженные методы должны быть размещены рядом друг с другом. Размещение не перегруженных методов между перегруженными методами одного и того же типа является нарушением. Предыдущий перегруженный метод расположен в строке ''{0}''.
parameter.assignment=Параметр метода ''{0}'' не должен менять значение.
require.this.method=При вызове метода ''{0}'' нужно использовать \"{1}this.\".
require.this.variable=При использовании переменной класса ''{0}'' нужно использовать \"{1}this.\".
return.count=Количество return {0,number,integer} (максимум для не-void методов/лямбда-выражений {1,number,integer}).
return.countVoid=Количество return {0,number,integer} (максимум для void методов/конструкторов/лямбда-выражений {1,number,integer}).
simplify.boolReturn=Условие можно сократить.
simplify.expression=Выражение можно сократить.
string.literal.equality=Строка должна сравниваться методом equals(), а не ''{0}''.
super.constructor.call=Лишний вызов конструктора суперкласса без аргументов.
unnecessary.paren.assign=Лишние скобки в правой части оператора присваивания.
unnecessary.paren.expr=Лишние скобки вокруг выражения.
unnecessary.paren.ident=Лишние скобки вокруг идентификатора ''{0}''.
unnecessary.paren.lambda=Лишние скобки вокруг значения лямбда выражения.
unnecessary.paren.literal=Лишние скобки вокруг литерала ''{0}''.
unnecessary.paren.return=Лишние скобки вокруг возвращаемого значения.
unnecessary.paren.string=Лишние скобки вокруг строки {0}.
unnecessary.semicolon=Лишняя точка с запятой.
unused.local.var=Неиспользуемая локальная переменная ''{0}''.
variable.declaration.usage.distance=Объявление переменной ''{0}'' и её первое использование находятся на расстоянии {1} строк(и) (максимум строк: {2}).
variable.declaration.usage.distance.extend=Объявление переменной ''{0}'' и её первое использование находятся на расстоянии {1} строк(и) (максимум строк: {2}). Если вам нужно сохранить значение заранее, объявите его как final (до вызова метода, имеющего побочные эффекты для исходного значения).
