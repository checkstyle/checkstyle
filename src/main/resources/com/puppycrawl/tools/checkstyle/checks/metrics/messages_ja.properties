booleanExpressionComplexity = ブール式の複雑さは {0、番号、整数}（許可された最大値は {1、数、整数}）。
classDataAbstractionCoupling = クラスデータの抽象化カップリングは {0、番号、整数}（許可された最大値は {1、数、整数}） クラス {2}
classFanOutComplexity = クラスファンアウト複雑であり、{0、番号、整数} （許可された最大値は {1、数、整数}）。
cyclomaticComplexity = 循環的複雑度は {0、番号、整数}（許可された最大値は {1、数、整数}）。
duplicateLiteral = 「リテラルのインスタンスを複製 ''{0}''は許可されていません。
finalField = フィールド ''{0}'' の最終宣言する必要があります。
illegalAbstractClassName = 名 ''{0}'' パターンと一致しなければなりません {1}。
illegalCatch = キャッチ ''{0}'' は許可されていません。
illegalThrows = 投げる ''{0}'' は許可されていません。
illegalToken = 「使用 ''{0}'' は許可されていません。
illegalType = 変数、戻り値または型のパラメータを宣言 ''{0}'' は許可されていません。
junit.methodName = メソッド ''{0}'' 名前を付ける必要があります ''{1}''
junit.methodParameters = メソッド ''{0}'' パラメータなしで宣言する必要があります。
junit.methodPublicAndStatic = この方法は、 ''{0}'' staticとして宣言する必要があります。
junit.methodPublicOrProtected = メソッド ''{0}'' 、パブリック宣言された、または保護されなければなりません
junit.methodReturnType = この方法は、 ''{0}'' 無効な戻り値の型で宣言DEなければなりません。
mutableException = フィールド ''{0}'' の最終宣言する必要があります。
nestedIfDepth = ネストされたif-else深さは {0、番号、整数} （許可された最大値は {1、数、整数}）。
nestedTryDepth = ネストされたトライの深さは {0、番号、整数} （許可された最大値は {1、数、整数}）。
npathComplexity = NPATH複雑さは {0、番号、整数} （許可された最大値は {1、数、整数}）。
packageDeclaration = パッケージ宣言がありません。
parameterAssignment = パラメータの割り当ては、 ''{0}'' は許可されていません。
returnCount = 戻りカウントは {0、番号、整数} （許可された最大値は {1、数、整数}）。
returnFromCatch = キャッチからの復帰が許可されていません。
returnFromFinally = 最終的に許可されていませんから返します。
throwsCount = カウントがある例外 {0、番号、整数} （許可された最大値は {1、数、整数}）。
unusedVariable = 変数 ''{0}'' 使用されることはありません。
ncss.method = このメソッドのNCSSは {0、番号、整数} （許可された最大値は {1、数、整数}）。
ncss.class = このクラスのNCSSは {0、番号、整数} （許可された最大値は {1、数、整数}）。
ncss.file = このファイルのNCSSは {0、番号、整数} （許可された最大値は {1、数、整数}）。
