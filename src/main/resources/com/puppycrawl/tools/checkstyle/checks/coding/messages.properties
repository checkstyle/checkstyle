array.trailing.comma=Array should contain trailing comma.
assignment.inner.avoid=Inner assignments should be avoided.
avoid.clone.method=Avoid using clone method.
avoid.finalizer.method=Avoid using finalizer method.
covariant.equals=covariant equals without overriding equals(java.lang.Object).
declaration.order.access=Variable access definition in wrong order.
declaration.order.constructor=Constructor definition in wrong order.
declaration.order.instance=Instance variable definition in wrong order.
declaration.order.static=Static variable definition in wrong order.
default.comes.last=Default should be last label in the switch.
default.comes.last.in.casegroup=Default should be last label in the case group.
empty.statement=Empty statement.
equals.avoid.null=String literal expressions should be on the left side of an equals comparison.
equals.noEquals=Definition of ''hashCode()'' without corresponding definition of ''equals()''.
equals.noHashCode=Definition of ''equals()'' without corresponding definition of ''hashCode()''.
equalsIgnoreCase.avoid.null=String literal expressions should be on the left side of an equalsIgnoreCase comparison.
explicit.init=Variable ''{0}'' explicitly initialized to ''{1}'' (default value for its type).
fall.through=Fall through from previous branch of the switch statement.
fall.through.last=Fall through from the last branch of the switch statement.
final.variable=Variable ''{0}'' should be declared final.
hidden.field=''{0}'' hides a field.
illegal.catch=Catching ''{0}'' is not allowed.
illegal.throw=Throwing ''{0}'' is not allowed.
illegal.token=Using ''{0}'' is not allowed.
illegal.token.text=Token text matches the illegal pattern ''{0}''.
illegal.type=Usage of type ''{0}'' is not allowed.
inline.conditional.avoid=Avoid inline conditionals.
instantiation.avoid=Instantiation of {0} should be avoided.
magic.number=''{0}'' is a magic number.
mismatch.package.directory=Package name is not same as directory.
missing.ctor=Class should define a constructor.
missing.package.declaration=Missing package declaration.
missing.super.call=Method ''{0}'' should call ''super.{0}''.
missing.switch.default=switch without \"default\" clause.
modified.control.variable=Control variable ''{0}'' is modified.
multiple.statements.line=Only one statement per line allowed.
multiple.string.literal=The String {0} appears {1} times in the file.
multiple.variable.declarations=Only one variable definition per line allowed.
multiple.variable.declarations.comma=Each variable declaration must be in its own statement.
nested.for.depth=Nested for depth is {0,number,integer} (max allowed is {1,number,integer}).
nested.if.depth=Nested if-else depth is {0,number,integer} (max allowed is {1,number,integer}).
nested.try.depth=Nested try depth is {0,number,integer} (max allowed is {1,number,integer}).
overload.methods.declaration=Overload methods should not be split. Previous overloaded method located at line ''{0}''.
parameter.assignment=Assignment of parameter ''{0}'' is not allowed.
require.this.method=Method call to ''{0}'' needs \"{1}this.\".
require.this.variable=Reference to instance variable ''{0}'' needs \"{1}this.\".
return.count=Return count is {0,number,integer} (max allowed for non-void methods/lambdas is {1,number,integer}).
return.countVoid=Return count is {0,number,integer} (max allowed for void methods/constructors/lambdas is {1,number,integer}).
simplify.boolReturn=Conditional logic can be removed.
simplify.expression=Expression can be simplified.
string.literal.equality=Literal Strings should be compared using equals(), not ''{0}''.
unnecessary.paren.assign=Unnecessary parentheses around assignment right-hand side.
unnecessary.paren.expr=Unnecessary parentheses around expression.
unnecessary.paren.ident=Unnecessary parentheses around identifier ''{0}''.
unnecessary.paren.lambda=Unnecessary parentheses around lambda value.
unnecessary.paren.literal=Unnecessary parentheses around literal ''{0}''.
unnecessary.paren.return=Unnecessary parentheses around return value.
unnecessary.paren.string=Unnecessary parentheses around string {0}.
variable.declaration.usage.distance=Distance between variable ''{0}'' declaration and its first usage is {1}, but allowed {2}.
variable.declaration.usage.distance.extend=Distance between variable ''{0}'' declaration and its first usage is {1}, but allowed {2}.  Consider making that variable final if you still need to store its value in advance (before method calls that might have side effects on the original value).
