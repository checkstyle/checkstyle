array.trailing.comma=配列ではカンマが行末に来るようにすべきです。
assignment.inner.avoid=式内部での代入は避けるべきです。
avoid.clone.method=cloneメソッドを使用しないでください。
avoid.finalizer.method=ファイナライザメソッドを使用しないでください。
covariant.equals=equals(java.lang.Object) をオーバーライドせずに共変 な equals を定義しています。
declaration.order.access=変数アクセスの定義順序が間違っています。
declaration.order.constructor=コンストラクタの定義順序が間違っています。
declaration.order.instance=インスタンス変数の定義順序が間違っています。
declaration.order.static=static 変数の定義順序が間違っています。
default.comes.last=default は switch 文の最後のラベルにしてください。
default.comes.last.in.casegroup=デフォルトは、ケースグループの最後のラベルにする必要があります。
empty.statement=空の文です。
equals.avoid.null=equals による比較では、文字列リテラル式を左側にしてください。
equals.noEquals=''hashCode()'' を定義していますが、これに対応する ''equals()'' の定義がありません。
equals.noHashCode=''equals()'' を定義していますが、これに対応する ''hashCode()'' の定義がありません。
equalsIgnoreCase.avoid.null=equals による比較では、文字列リテラル式を左側にしてください。
explicit.init=変数 ''{0}'' が明示的に ''{1}'' (この型のデフォルト値）に初期化されています。
fall.through=switch 文の前の分岐からフォールスルーしています。
fall.through.last=switch 文の最後の分岐からフォールスルーしています。
final.variable=変数 ''{0}'' は final として宣言すべきです。
hidden.field=''{0}'' がフィールドを隠しています。
illegal.catch=''{0}'' をキャッチすることは許可されていません。
illegal.throw=''{0}'' をスローすることは許可されていません。
illegal.token=''{0}'' の使用は許可されていません。
illegal.token.text=トークンのテキストが不正なパターン ''{0}'' に一致しています。
illegal.type=''{0}'' 型の使用は許可されていません。
inline.conditional.avoid=インライン条件文を避けてください。
instantiation.avoid={0} のインスタンス化は避けるべきです。
magic.number=''{0}'' はマジックナンバーです。
mismatch.package.directory=パッケージ名はディレクトリと同じではありません。
missing.ctor=クラスは、コンストラクタを定義する必要があります。
missing.package.declaration=package 宣言が見つかりません。
missing.super.call=メソッド ''{0}'' は ''super.{0}'' を呼ぶべきです。
missing.switch.default=\"default\" 節の無い switch 文です。
modified.control.variable=制御変数 ''{0}'' が変更されています。
multiple.statements.line=文は1行に1つだけにしてください。
multiple.string.literal=文字列 {0} は、このファイルに {1} 回出現しています。
multiple.variable.declarations=変数の定義は1行に1つだけにしてください。
multiple.variable.declarations.comma=変数の宣言はそれぞれ個別の文にしてください。
nested.for.depth=ネストした for の深さが {0,number,integer} （最大 {1,number,integer} まで）です。
nested.if.depth=ネストした if-else の深さが {0,number,integer} （最大 {1,number,integer} まで）です。
nested.try.depth=ネストした try の深さが {0,number,integer} （最大 {1,number,integer} まで）です。
overload.methods.declaration=オーバーロードされているメソッドは、ばらばらに配置しないでください。直前のオーバーロードされたメソッドは ''{0}'' 行目にあります。
parameter.assignment=パラメータ ''{0}'' への代入は許可されていません。
require.this.method=メソッド ''{0}'' への呼び出しは、 \"{1}this.\" が必要です。
require.this.variable=インスタンス変数 ''{0}'' への参照には \"{1}this.\" が必要です。
return.count=return が {0,number,integer} 個所あります（非無効メソッド/ ラムダに許される最大値は {1,number,integer} まで）。
return.countVoid=return が {0,number,integer} 個所あります（無効メソッド/コンストラクタ/ ラムダメソッドに許可される最大値は {1,number,integer} まで）。
simplify.boolReturn=条件ロジックはなくせます。
simplify.expression=表現は簡潔にできます。
string.literal.equality=リテラルの文字列は ''{0}'' ではなく、 equals() を使用して比較するべきです。
unnecessary.paren.assign=代入式の右辺に不要な括弧があります。
unnecessary.paren.expr=式の前後に不要な括弧があります。
unnecessary.paren.ident=識別子 ''{0}'' の前後に不要な括弧があります。
unnecessary.paren.lambda=ラムダ値の周りの不必要なカッコ。
unnecessary.paren.literal=リテラル ''{0}'' の前後に不要な括弧があります。
unnecessary.paren.return=戻り値の前後に不要な括弧があります。
unnecessary.paren.string=文字列 {0} の前後に不要な括弧があります。
variable.declaration.usage.distance=変数  ''{0}'' の宣言と、その変数の使用開始位置までの距離が  {1} です。許可された距離 は {2} です。
variable.declaration.usage.distance.extend=変数  ''{0}'' の宣言と、その変数の使用開始位置までの距離が  {1} です。許可された距離 は {2} です。 もし、事前(元の値への副作用をともなうメソッド呼び出しの前)に、その値を格納する必要があるのであれば、その変数をfinalとすることを検討してください。
