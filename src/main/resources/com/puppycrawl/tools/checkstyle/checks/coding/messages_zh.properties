array.trailing.comma=数组尾元素后应有逗号'',''。
assignment.inner.avoid=应避免在子表达式中赋值。
avoid.clone.method=避免重写 clone 方法。
avoid.finalizer.method=避免重写finalize方法。
covariant.equals=重载''equals()''方法时，必须确保重载了''eauals(java.lang.Object)'方法。
declaration.order.access=属性访问器定义顺序错误。
declaration.order.constructor=构造器定义顺序错误。
declaration.order.instance=实例属性定义顺序错误。
declaration.order.static=静态属性定义顺序错误。
default.comes.last=default 应为 switch 块最后一个元素。
default.comes.last.in.casegroup=默认值应为案例组中的最后一个标签。
empty.statement=避免空行。
equals.avoid.null=字符串常量应出现在 equals 比较的左侧。
equals.noEquals=重载''hashCode()''方法后，必须重载''equals()''方法。
equals.noHashCode=重载''equals()''方法后，必须重载''hashCode()''方法。
equalsIgnoreCase.avoid.null=字符串常量应出现在 equalsIgnoreCase 比较的左侧。
explicit.init=属性 ''{0}'' 应初始化为 ''{1}''（类型默认值）。
fall.through=从 switch 块的前一分支落入。
fall.through.last=从 switch 块的最后分支落入。
final.variable=变量 ''{0}'' 应被声明为 final 的。
hidden.field=''{0}'' 隐藏属性。
illegal.catch=禁止捕获： ''{0}'' 。
illegal.throw=禁止抛出： ''{0}'' 。
illegal.token=禁止使用： ''{0}'' 。
illegal.token.text=不应匹配表达式： ''{0}''。
illegal.type=不允许使用 ''{0}'' 类型。
inline.conditional.avoid=避免三元表达式。
instantiation.avoid=应避免 {0} 的实例化。
magic.number=''{0}'' 是一个魔术数字（直接常数）。
mismatch.package.directory=软件包名称与目录不同。
missing.ctor=类应定义一个构造器。
missing.package.declaration=缺少包声明。
missing.super.call=方法 ''{0}'' 应调用 ''super.{0}''。
missing.switch.default=Switch 块未定义 default 。
modified.control.variable=循环控制变量 ''{0}'' 不应在循环体内修改。
multiple.statements.line=禁止一行有多句代码。
multiple.string.literal=字符串： {0} 在本文件中出现了 {1} 次。
multiple.variable.declarations=每一行只能定义一个变量。
multiple.variable.declarations.comma=每一个变量的定义必须在它的声明处，且在同一行。
nested.for.depth=至多{1,number,integer}层 for，目前{0,number,integer}层。
nested.if.depth=至多{1,number,integer}层 if，目前{0,number,integer}层。
nested.try.depth=至多{1,number,integer}层 try，目前{0,number,integer}层。
overload.methods.declaration=重载方法应写在一起，上一个重载方法位于第''{0}''行。
parameter.assignment=不应对方法参数''{0}''赋值。
require.this.method=对方法 ''{0}'' 的调用需要 \"{1}this.\"。
require.this.variable=对实例属性 ''{0}'' 的引用需要 \"{1}this.\"。
return.count=Return 次数 {0,number,integer} 次（最大允许非空虚方法/ 拉姆达： {1,number,integer} 次）。
return.countVoid=Return 次数 {0,number,integer} 次（最大允許為void方法/構造函數/ 拉姆达： {1,number,integer} 次）。
simplify.boolReturn=不必要的条件逻辑。
simplify.expression=表达式可被简化。
string.literal.equality=字符串应使用equals()方法进行比较，而非''{0}''。
unnecessary.paren.assign=赋值语句右方不必要的小括号。
unnecessary.paren.expr=表达式周围不必要的小括号。
unnecessary.paren.ident=关键字 ''{0}'' 周围不必要的小括号。
unnecessary.paren.lambda=lambda 值周围不必要的小括号。
unnecessary.paren.literal=字符串 ''{0}'' 周围不必要的小括号。
unnecessary.paren.return=return 值周围不必要的小括号。
unnecessary.paren.string=字符串 {0} 周围不必要的小括号。
variable.declaration.usage.distance=变量''{0}''声明及第一次使用距离{1}行（最多：{2} 行）。
variable.declaration.usage.distance.extend=变量''{0}''声明及第一次使用距离{1}行（最多：{2} 行）。若需要存储该变量的值，请将其声明为final的（方法调用前声明以避免副作用影响原值）。
