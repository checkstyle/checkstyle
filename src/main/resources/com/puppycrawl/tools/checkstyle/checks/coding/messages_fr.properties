array.trailing.comma=La dernière valeur d''un tableau devrait être suivie d''une virgule.
assignment.inner.avoid=Évitez d''affecter une valeur à une variable au sein d''une expression.
avoid.clone.method=Évitez d'utiliser la méthode de clonage.
avoid.finalizer.method=Évitez d'utiliser la méthode de finalisation.
covariant.equals=Votre méthode equals compare uniquement les objets de votre classe. N''oubliez pas de surcharger la méthode equals(java.lang.Object).
declaration.order.access=La définition des variables n''est pas triée suivant leur portée.
declaration.order.constructor=La définition des constructeurs n''apparaît pas dans le bon ordre.
declaration.order.instance=La définition des variables d''instance n''apparaît pas dans le bon ordre.
declaration.order.static=La définition des variables statiques n''apparaît pas dans le bon ordre.
default.comes.last=Le cas \"default\" devrait apparaitre en dernier dans le bloc \"switch\".
default.comes.last.in.casegroup=La valeur par défaut doit être la dernière étiquette dans le groupe de cas.
empty.statement=Instruction vide.
equals.avoid.null=Les chaînes littérales devraient être sur le côté gauche d''une comparaison ''equals''.
equals.noEquals=La définition de la méthode ''hashCode()'' doit toujours être accompagnée de la définition de la méthode ''equals()''.
equals.noHashCode=La définition de la méthode ''equals()'' doit toujours être accompagnée de la définition de la méthode ''hashCode()''.
equalsIgnoreCase.avoid.null=Les chaînes littérales devraient être sur le côté gauche d'une comparaison ''equalsIgnoreCase''.
explicit.init=L''initialisation explicite de la variable ''{0}'' à la valeur ''{1}'' est inutile, c''est la valeur par défaut pour ce type.
fall.through=Le cas précédent du \"switch\" ne contient pas de break, return, throw ou continue.
fall.through.last=Le dernier cas du \"switch\" ne contient pas de break, return, throw ou continue.
final.variable=La variable ''{0}'' devrait être finale.
hidden.field=''{0}'' masque un attribut.
illegal.catch=Catcher l''exception ''{0}'' est prohibé.
illegal.throw=Lancer ''{0}'' n''est pas autorisé.
illegal.token=Il est interdit d''utiliser ''{0}''.
illegal.token.text=Chaîne de caractères interdite ''{0}''.
illegal.type=L''utilisation du type ''{0}'' est interdit.
inline.conditional.avoid=L''utilisation de l''opérateur conditionel est prohibée.
instantiation.avoid=L''instantiation de la classe {0} est prohibée.
magic.number=''{0}'' devrait être défini comme une constante.
mismatch.package.directory=Le nom du package n'est pas identique au répertoire.
missing.ctor=Il manque un constructeur à la classe.
missing.package.declaration=Déclaration de package manquante.
missing.super.call=La méthode ''{0}'' devrait appeler ''super.{0}''.
missing.switch.default=Il manque le cas \"default\" dans le bloc \"switch\".
modified.control.variable=La variable de contrôle ''{0}'' est modifiée.
multiple.statements.line=Une seule instruction par ligne autorisée.
multiple.string.literal=La chaîne {0} apparaît {1} fois dans le fichier.
multiple.variable.declarations=Ne déclarez pas plus d''une variable par ligne.
multiple.variable.declarations.comma=Chaque déclaration de variable doit faire l''objet d''une instruction à part.
nested.for.depth=Le nombre de ''for'' imbriqués est de {0, number, integer}, alors que le maximum autorisé est de {1, number, integer}.
nested.if.depth=Le nombre de ''if'' imbriqués est de {0,number,integer}, alors que le maximum autorisé est de {1,number,integer}.
nested.try.depth=Le nombre de ''try'' imbriqués est de {0,number,integer}, alors que le maximum autorisé est de {1,number,integer}.
overload.methods.declaration=Les méthodes de surcharge ne doivent pas être séparées. La méthode surchargée précédente est située à la ligne ''{0}''.
parameter.assignment=Il est interdit d''affecter une valeur au paramètre ''{0}''.
require.this.method=L''appel à la méthode ''{0}'' nécessite l''utilisation de  \"{1}this.\".
require.this.variable=La référence à la variable d''instance ''{0}'' doit utiliser \"{1}this.\".
return.count=Le nombre de return est de {0,number,integer} alors que le maximum méthodes non-nulles/lambdas {1,number,integer}.
return.countVoid=Le nombre de return est de {0,number,integer} alors que le maximum autorisé void methods/constructors/lambdas est de {1,number,integer}.
simplify.boolReturn=Le test peut être supprimé et l''expression directement retournée.
simplify.expression=L''expression peut être simplifiée.
string.literal.equality=Les chaines de caractères littérales devraient être comparées avec la méthode equals() et pas avec ''{0}''.
unnecessary.paren.assign=Parenthèses inutiles autour la partie droite de l''affectation.
unnecessary.paren.expr=Parenthèses inutiles autour de l''expression.
unnecessary.paren.ident=Parenthèses inutiles autour de l''identifiant ''{0}''.
unnecessary.paren.lambda=Parenthèses inutiles autour de la valeur lambda.
unnecessary.paren.literal=Parenthèses inutiles autour de la chaîne littérale ''{0}''.
unnecessary.paren.return=Parenthèses inutiles autour de la valeur de retour.
unnecessary.paren.string=Parenthèses inutiles autour de la chaîne {0}.
variable.declaration.usage.distance=La distance entre la déclaration de la variable ''{0}'' et sa première utilisation est de {1}, alors que le maximum autorisé est de {2}.
variable.declaration.usage.distance.extend=La distance entre la déclaration de la variable ''{0}'' et sa première utilisation est de {1}, alors que le maximum autorisé est de {2}. Envisagez de rendre cette variable finale si vous avez encore besoin de stocker sa valeur à l''avance (avant les appels de méthode qui pourrait avoir des effets secondaires sur la valeur d''origine).
