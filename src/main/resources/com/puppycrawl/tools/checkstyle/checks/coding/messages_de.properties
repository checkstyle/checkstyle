array.trailing.comma=Array-Werte sollten mit einem Komma abgeschlossen werden.
assignment.inner.avoid=Innere Zuweisungen sollten vermieden werden.
avoid.clone.method=Die Methode clone() sollte vermieden werden.
avoid.double.brace.init=Vermeiden Sie doppelte geschweifte Klammern.
avoid.finalizer.method=Die Methode finalize() sollte vermieden werden.
constructors.declaration.grouping=Alle \u00FCberladenen Konstruktoren sollten gruppiert werden. Der vorherige Konstruktor befand sich in der Zeilennummer \u201E{0}\u201C.
covariant.equals=Kovariante Definition von equals(), ohne equals(java.lang.Object) zu \u00C3\u00BCberschreiben.
declaration.order.access=Fehlerhafte Deklarationsreihenfolge f\u00C3\u00BCr diesen Scope.
declaration.order.constructor=Der Konstruktor steht an der falschen Stelle.
declaration.order.instance=Die Instanz-Variable wird an der falschen Stelle deklariert.
declaration.order.static=Die statische Variable wird an der falschen Stelle deklariert.
default.comes.last=Der Default-Fall sollte der letzte Fall der switch-Anweisung sein.
default.comes.last.in.casegroup=Default sollte letztes Label in der Fallgruppe sein.
empty.statement=Leere Anweisung.
equals.avoid.null=Bei einem equals()-Vergleich sollten String-Literale auf der linken Seite stehen.
equals.noEquals=Wenn ''hashCode()'' definiert wird, muss auch ''equals()'' definiert werden.
equals.noHashCode=Wenn ''equals()'' definiert wird, muss auch ''hashCode()'' definiert werden.
equalsIgnoreCase.avoid.null=Bei einem equalsIgnoreCase()-Vergleich sollten String-Literale auf der linken Seite stehen.
explicit.init=Die Variable ''{0}'' wird explizit mit ''{1}'' initialisiert (was dem Standardwert ihres Typs entspricht).
fall.through=Fall-through vom vorherigen switch-Zweig ohne break/return/yield/throw/continue-Anweisung.
fall.through.last=Fall-through vom letzten switch-Zweig ohne break/return/yield/throw/continue-Anweisung.
final.variable=Die Variable ''{0}'' sollte als final deklariert werden.
hidden.field=Die Variable ''{0}'' verbirgt ein Feld.
illegal.catch=Die Exception ''{0}'' darf nicht abgefangen werden.
illegal.throw=Die Exception ''{0}'' darf nicht geworfen werden.
illegal.token=Das Token ''{0}'' ist nicht erlaubt.
illegal.token.text=Token-Text entspricht dem Muster ''{0}''.
illegal.type=Die Verwendung des Typs ''{0}'' ist nicht erlaubt.
inline.conditional.avoid=Der Inline-Conditional-Operator sollte vermieden werden.
instantiation.avoid=Die Klasse {0} sollte nicht direkt instanziiert werden.
magic.number=Die magische Zahl ''{0}'' sollte als Konstante definiert werden.
matchxpath.match=Unzul\u00C3\u00A4ssige Codestruktur erkannt.
mismatch.package.directory=Paketname ist nicht identisch zum Verzeichnis.
missing.ctor=Die Klasse sollte einen Konstruktor definieren.
missing.package.declaration=Es fehlt eine Package-Deklaration.
missing.super.call=Die Methode ''{0}'' sollte ''super.{0}'' aufrufen.
missing.switch.default=In der switch-Anweisung fehlt der "default"-Zweig.
modified.control.variable=Die Kontrollvariable ''{0}'' sollte nicht ver\u00C3\u00A4ndert werden.
multiple.statements.line=Es ist nur eine Anweisung pro Zeile erlaubt.
multiple.string.literal=Der String {0} wird in dieser Datei {1}-mal verwendet.
multiple.variable.declarations=Es ist nur eine Variablendefinition pro Zeile erlaubt.
multiple.variable.declarations.comma=Jede Variablendeklaration muss in einer eigenen Anweisung erfolgen.
nested.for.depth=Die for-Schleife hat eine Schachtelungstiefe von {0,number,integer} (Obergrenze ist {1,number,integer}).
nested.if.depth=Der if-else-Block hat eine Schachtelungstiefe von {0,number,integer} (Obergrenze ist {1,number,integer}).
nested.try.depth=Der try-Block hat eine Schachtelungstiefe von {0,number,integer} (Obergrenze ist {1,number,integer}).
no.array.trailing.comma=Das Array sollte kein nachstehendes Komma enthalten.
no.enum.trailing.comma=Die Aufz\u00C3\u00A4hlung sollte kein nachstehendes Komma enthalten.
overload.methods.declaration=Alle \u00C3\u00BCberladenen Methoden sollten nebeneinander platziert werden. Das Platzieren nicht \u00C3\u00BCberladener Methoden zwischen \u00C3\u00BCberladenen Methoden desselben Typs ist eine Verletzung. Vorherige \u00C3\u00BCberladene Methode in Zeile '' {0} ''.
parameter.assignment=Die Zuweisung des Parameters ''{0}'' ist nicht erlaubt.
require.this.method=Der Methodenaufruf ''{0}'' erfordert ein vorangestelltes "{1}this.".
require.this.variable=Der Instanzvariablenzugriff ''{0}'' erfordert ein vorangestelltes "{1}this.".
return.count=Die Methode hat insgesamt {0,number,integer} return-Anweisungen (maximal erlaubt f\u00C3\u00BCr nicht void Methoden/Lambdas sind {1,number,integer}).
return.countVoid=Die Methode hat insgesamt {0,number,integer} return-Anweisungen (maximal erlaubt f\u00C3\u00BCr void Methoden/Konstruktoren/Lambdas sind {1,number,integer}).
simplify.boolReturn=Die Verzweigungslogik kann entfernt werden.
simplify.expression=Der Ausdruck kann vereinfacht werden.
string.literal.equality=Der Vergleich von String-Literalen sollte mit equals() erfolgen, nicht mit ''{0}''.
super.constructor.call=Unn\u00C3\u00B6tiger Aufruf des Superklassenkonstruktors ohne Argumente.
unnecessary.paren.assign=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um die rechte Seite der Zuweisung.
unnecessary.paren.expr=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um den Ausdruck.
unnecessary.paren.ident=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um den Bezeichner ''{0}''.
unnecessary.paren.lambda=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um Lambdawert.
unnecessary.paren.literal=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um das Literal ''{0}''.
unnecessary.paren.return=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um den R\u00C3\u00BCckgabewert.
unnecessary.paren.string=\u00C3\u009Cberfl\u00C3\u00BCssige Klammern um den String ''{0}''.
unnecessary.semicolon=Unn\u00C3\u00B6tiges Semikolon.
unused.local.var=Unbenutzte lokale Variable ''{0}''.
variable.declaration.usage.distance=Der Abstand zwischen der Deklaration der Variablen ''{0}'' und ihrer ersten Verwendung betr\u00C3\u00A4gt {1} (Obergrenze ist {2}).
variable.declaration.usage.distance.extend=Der Abstand zwischen der Deklaration der Variable ''{0}'' und ihrer ersten Verwendung betr\u00C3\u00A4gt {1} (Obergrenze ist {2}). \
    Erw\u00C3\u00A4gen Sie, diese Variable final zu machen, wenn Sie den Wert schon vorher speichern m\u00C3\u00BCssen (vor Methodenaufrufen mit Nebenwirkungen auf den urspr\u00C3\u00BCnglichen Wert).
