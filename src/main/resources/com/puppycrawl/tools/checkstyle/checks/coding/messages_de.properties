array.trailing.comma=Array sollte mit einem Komma abgeschlossen werden.
assignment.inner.avoid=Innere Zuweisungen sollten vermieden werden.
avoid.finalizer.method=Die Verwendung von finalizer Methoden sollte vermieden werden.
avoid.clone.method=Die Methode clone() sollte vermieden werden.
covariant.equals=Kovariante Definition von equals() ohne equals(java.lang.Object) zu überschreiben.
declaration.order.constructor=Konstruktordefinition in falscher Reihenfolge.
declaration.order.static=Statische Variablendefinition in falscher Reihenfolge.
declaration.order.instance=Instanzvariablendefinition in falscher Reihenfolge.
declaration.order.access=Fehlerhafte Deklarationsreihenfolge für diesen Scope.
default.comes.last=Default sollte das letzte Label im switch sein.
empty.statement=Leere Anweisung.
equals.avoid.null=String-Literale sollten auf der linken Seite eines equals()-Vergleichs stehen.
equalsIgnoreCase.avoid.null=String-Literale sollten auf der linken Seite eines equalsIgnoreCase()-Vergleichs stehen.
equals.noHashCode=Definition von ''equals()'' ohne korrespondierende Definition von ''hashCode()''.
explicit.init=Variable ''{0}'' wird explizit mit ''{1}'' initialisiert (Defaultwert für ihren Typ).
fall.through=Fall through vom vorherigen Zweig der switch Anweisung.
fall.through.last=Fall through von letzten Zweig der switch Anweisung.
final.variable=Variable ''{0}'' sollte als final deklariert werden.
hidden.field=''{0}'' verbirgt ein Feld.
illegal.catch=Catch von ''{0}'' ist nicht erlaubt.
illegal.throw=Werfen von ''{0}'' ist nicht erlaubt.
illegal.token=Benutzung von ''{0}'' ist nicht erlaubt.
illegal.token.text=Tokentext entspricht dem Muster ''{0}''.
illegal.type=Deklaration von Variablen, Rückgabewerten oder Parametern des Typs ''{0}'' ist nicht erlaubt.
inline.conditional.avoid=Der Bedingungsoperator sollte vermieden werden.
instantiation.avoid=Instantiierung von {0} sollte vermieden werden.
magic.number=''{0}'' sollte durch eine Konstante definiert sein.
missing.ctor=Die Klasse sollte einen Konstruktor definieren.
missing.package.declaration=Fehlende Package-Deklaration.
missing.super.call=Die Methode ''{0}'' sollte ''super.{0}'' aufrufen.
missing.switch.default=switch ohne \"default\".
modified.control.variable=Die Kontrollvariable ''{0}'' wird modifiziert.
multiple.statements.line=Pro Zeile ist nur 1 Anweisung erlaubt.
multiple.string.literal=Der String {0} wird in dieser Datei {1} mal benutzt.
multiple.variable.declarations=Nur eine Variablendefinition pro Zeile ist erlaubt.
multiple.variable.declarations.comma=Jede Variablendeklaration muss in einer eigenen Anweisung erfolgen.
nested.for.depth=Schachtelungstiefe der for-Schleife ist {0,number,integer} (Obergrenze ist {1,number,integer}).
nested.if.depth=Schachtelungstiefe von if-else ist {0,number,integer} (Obergrenze ist {1,number,integer}).
nested.try.depth=Schachtelungstiefe von try-Blöcken ist {0,number,integer} (Obergrenze ist  {1,number,integer}).
parameter.assignment=Zuweisung an den Parameter ''{0}'' ist nicht erlaubt.
redundant.throws.classInfo=Klassen-Information für {0} nicht verfügbar.
redundant.throws.duplicate=Überflüssige throws-Deklaration: ''{0}'' ist mehrfach aufgeführt.
redundant.throws.subclass=Überflüssige throws-Deklaration: ''{0}'' ist Unterklasse von ''{1}''.
redundant.throws.unchecked=Überflüssige throws-Deklaration: ''{0}'' ist eine unchecked Exception (abgeleitet von RuntimeException).
require.this.variable=Dereferenzierung der Instanzvariable ''{0}'' muss über \"this.\" erfolgen.
require.this.unfound.variable=Checkstyle kann Deklaration von ''{0}'' nicht finden.
require.this.method=Methodenaufruf ''{0}'' muss über \"this.\" erfolgen.
return.count={0,number,integer} return-Anweisungen (Obergrenze ist {1,number,integer}).
simplify.boolReturn=Die Verzweigung sollte entfernt werden.
simplify.expression=Der Ausdruck kann vereinfacht werden.
string.literal.equality=String-Literale sollten mit equals() verglichen werden, nicht mit ''{0}''.
unnecessary.paren.assign=Überflüssige Klammern um die rechte Seite der Zuweisung.
unnecessary.paren.expr=Überflüssige Klammern um Ausdruck.
unnecessary.paren.ident=Überflüssige Klammern um den Bezeichner ''{0}''.
unnecessary.paren.literal=Überflüssige Klammern um das Literal ''{0}''.
unnecessary.paren.return=Überflüssige Klammern um den return-Wert.
unnecessary.paren.string=Überflüssige Klammern um den String {0}.
package.dir.mismatch=Name des Packages passt nicht zum Namen des Verzeichnisses ''{0}''.
variable.declaration.usage.distance=Abstand zwischen der Deklaration der Variablen ''{0}'' und ihrer ersten Verwendung beträgt {1}, dürfte aber höchstens {2} sein.
overload.methods.declaration=Überladene Methoden sollten zusammen stehen. Vorangegangene überladene Methode findet sich in Zeile ''{0}''.
variable.declaration.usage.distance.extend = Die Entfernung zwischen variable ''{0}'' Erklärung und der ersten Benutzung ist {1} aber erlaubt {2} Betrachten Sie, um diese Variable als endgültig zu machen, wenn Sie noch brauchen, um ihren Wert im Voraus (vor Methodenaufrufe, die Nebenwirkung auf ursprünglichen Wert tun könnte) zu speichern.
doublechecked.locking.avoid=Doppelt überprüft Locking (DCL - Verriegelungsmechanismus der doppelten Kontrolle).
