array.trailing.comma=O array deveria ter uma virgula ao final.
assignment.inner.avoid=Atribuições aninhadas devem ser evitadas.
avoid.clone.method=Evite o uso do método ''clone()''.
avoid.double.brace.init=Evite a inicialização entre chaves duplas.
avoid.finalizer.method=Evite o uso do método ''finalize()''.
covariant.equals=Um método ''equals(...)'' covariante foi definido sem que o ''equals(java.lang.Object)'' tenha sido sobrescrito.
declaration.order.access=Definição de acesso a variável em ordem errada.
declaration.order.constructor=Definição de construtor em ordem errada.
declaration.order.instance=Definição de variável de instância em ordem errada.
declaration.order.static=Definição de variável estática em ordem errada.
default.comes.last=O \"default\" deveria ser a última entrada no \"switch\".
default.comes.last.in.casegroup=O \"default\" deveria ser a última entrada no grupo de \"case\"s.
empty.statement=Instrução vazia.
equals.avoid.null=Literais de String deveriam estar no lado esquerdo de comparações feitas com ''equals(java.lang.Object)''.
equals.noEquals=O método ''hashCode()'' deveria ser acompanhado de um método ''equals(java.lang.Object)''.
equals.noHashCode=O método ''equals(java.lang.Object)'' deveria ser acompanhado de um método ''hashCode()''.
equalsIgnoreCase.avoid.null=Literais de String deveriam estar no lado esquerdo de comparações feitas com ''equalsIgnoreCase(java.lang.String)''.
explicit.init=A variável ''{0}'' foi inicializada explicitamente com ''{1}'', o que é inútil, pois este é o valor padrão para o seu tipo.
fall.through=Continuação (fallthrough) vindo da ramificação anterior da instrução switch.
fall.through.last=Continuação (fallthrough) para além da último ramificação da instrução switch.
final.variable=A variável ''{0}'' deveria ser declarada final.
hidden.field=''{0}'' esconde um campo.
illegal.catch=Capturar ''{0}'' não é permitido.
illegal.throw=Lançar ''{0}'' não é permitido.
illegal.token=Não é permitida a utilização de ''{0}''.
illegal.token.text=Elemento de texto coincide com o padrão ilegal ''{0}''.
illegal.type=O uso do tipo ''{0}'' não é permitido.
inline.conditional.avoid=Evite condicionais inline.
instantiation.avoid=A instanciação de {0} deve ser evitada.
magic.number=''{0}'' é um número mágico.
matchxpath.match=Estrutura de código ilegal detectada.
mismatch.package.directory=O nome do pacote não é o mesmo que o do diretório.
missing.ctor=A classe deveria definir um construtor.
missing.package.declaration=Falta a declaração de pacote.
missing.super.call=O método ''{0}'' deveria invocar ''super.{0}''.
missing.switch.default=\"switch\" sem a ramificação \"default\".
modified.control.variable=A variável de controle ''{0}'' não deveria ser modificada.
multiple.statements.line=Apenas uma instrução por linha é permitida.
multiple.string.literal=A String {0} aparece {1} vezes no arquivo.
multiple.variable.declarations=Apenas uma definição de variável por linha é permitida.
multiple.variable.declarations.comma=Cada declaração de variável deveria estar em sua própria instrução.
nested.for.depth=A profundidade de aninhamento do \"for\" é de {0,number,integer}, mas o máximo permitido é de {1,number,integer}.
nested.if.depth=A profundidade de aninhamento do \"if-else\" é de {0,number,integer}, mas o máximo permitido é de {1,number,integer}.
nested.try.depth=A profundidade de aninhamento do \"try\" é de {0,number,integer}, mas o máximo permitido é de {1,number,integer}.
no.array.trailing.comma=A matriz não deveria terminar com uma vírgula.
no.enum.trailing.comma=O enum não deveria terminar com uma vírgula.
overload.methods.declaration=Todos os métodos sobrecarregados devem ser colocados juntos. A colocação de métodos não sobrecarregados entre métodos sobrecarregados com o mesmo nome é uma violação. O método sobrecarregado anterior foi encontrado na linha {0}.
parameter.assignment=A atribuição ao parâmetro ''{0}'' não é permitda.
require.this.method=A chamada de método no ''{0}'' precisa de \"{1}this.\".
require.this.variable=A referência à variável de instância ''{0}'' precisa de \"{1}this.\".
return.count=O número de \"return\"s é de {0,number,integer}, mas o máximo permitido para métodos não-void e lambdas é de {1,number,integer}.
return.countVoid=O número de \"return\"s é de {0,number,integer}, mas o máximo permitido para métodos void, construtores e lambdas é de {1,number,integer}.
simplify.boolReturn=A lógica condicional pode ser removida.
simplify.expression=A expressão pode ser simplicada.
string.literal.equality=Literais de String deveriam ser comparados com ''equals(java.lang.Object)'', não com ''{0}''.
super.constructor.call=Chamada desnecessária ao construtor da superclasse sem argumentos.
unnecessary.paren.assign=Parênteses desnecessários ao redor do lado direito da atribuição.
unnecessary.paren.expr=Parênteses desnecessários ao redor da expressão.
unnecessary.paren.ident=Parênteses desnecessários ao redor do identificador ''{0}''.
unnecessary.paren.lambda=Parênteses desnecessários em torno do valor lambda.
unnecessary.paren.literal=Parênteses desnecessários em torno do literal ''{0}''.
unnecessary.paren.return=Parênteses desnecessários em torno do valor de retorno.
unnecessary.paren.string=Parênteses desnecessários em torno da cadeia ''{0}''.
unnecessary.semicolon=Ponto-e-vírgula desnecessário.
variable.declaration.usage.distance=A distância entre a declaração da variável ''{0}'' e o seu primeiro uso é de {1}. O máximo permitido é de {2}.
variable.declaration.usage.distance.extend=A distância entre a declaração da variável ''{0}'' e o seu primeiro uso é de {1}. O máximo permitido é de {2}. Considere tornar essa variável final se você ainda precisa armazenar o seu valor com antecedência (antes de chamadas de métodos que possam causar efeitos colaterais sobre o seu valor original).
