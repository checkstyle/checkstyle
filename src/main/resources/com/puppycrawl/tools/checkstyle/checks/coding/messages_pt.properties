array.trailing.comma=O vector deve ter uma virgula final.
assignment.inner.avoid=As atribuições internas devem ser evitadas.
covariant.equals=\"equals\" covariante sem implementar equals(java.lang.Object).
declaration.order.access=Definição de acesso a variável em ordem errada.
declaration.order.constructor=Definição de construtor em ordem errada.
declaration.order.instance=Definição de variável de instância em ordem errada.
declaration.order.static=Definição de variável estática em ordem errada.
empty.statement=Declaração vazia.
equals.noHashCode=Definição de ''equals()'' sem a definição de ''hashCode()''.
explicit.init=Variável ''{0}'' inicializada explicitamente para ''{1}'' (valor por omissão para o seu tipo).
final.variable=Variável ''{0}'' deve ser declarada final.
hidden.field=''{0}'' esconde um campo.
illegal.catch=O tratamento de ''{0}'' não é permitido.
illegal.token.text=Texto do elemento coincide com o padrão ilegal ''{0}''.
illegal.token=Não é permitida a utilização de ''{0}''.
illegal.type=A declaração de variáveis, valores de retorno ou parâmetros do tipo ''{0}'' não é permitida.
instantiation.avoid=A instanciação de {0} deve ser evitada.
magic.number=''{0}'' é um número mágico.
missing.package.declaration=Falta a declaração do pacote.
missing.super.call=Method ''{0}'' deve chamar ''super.{0}''.
missing.switch.default=switch sem o ramo \"default\".
nested.if.depth=Profundidade de \"if-else\" é {0,number,integer} (máximo permitido é {1,number,integer}).
nested.try.depth=Profundidade de \"try\" é {0,number,integer} (máximo permitido é {1,number,integer}).
parameter.assignment=A atribuição ao parâmetro ''{0}'' não é permitda.
redundant.throws.classInfo=Não foi possível obter os dados da classe {0}.
redundant.throws.duplicate=throws redundante: ''{0}'' listado mais do que uma vez.
redundant.throws.subclass=throws redundante: ''{0}'' é uma sub-classe de ''{1}''.
redundant.throws.unchecked=throws redundante: ''{0}'' é um excepção não-verificada.
return.count=O número de \"return\"s é {0,number,integer} (máximo permitido é {1,number,integer}).
simplify.boolReturn=A lógica condicional pode ser removida.
simplify.expression=Expressão pode ser simplicada.
string.literal.equality=\"Strings\" literais devem ser comparadas com equals(), não ''{0}''.

avoid.finalizer.method = Evite o uso de método finalizador.
avoid.clone.method = Evite o uso de método clone.
default.comes.last = Padrão deve ser a última etiqueta no interruptor.
equals.avoid.null = Corda expressões literais deve estar no lado esquerdo de um é igual comparação.
equalsIgnoreCase.avoid.null = Corda expressões literais deve estar no lado esquerdo de uma comparação equalsIgnoreCase.
fall.through = Queda através do ramo anterior da instrução switch.
fall.through.last = Queda através do último ramo da instrução switch.
illegal.throw = Jogando ''{0}'' não é permitido.
inline.conditional.avoid = Evite condicionais inline.
missing.ctor = Classe deve definir um construtor.
modified.control.variable = Variável de controle ''{0}'' é modificado.
multiple.statements.line = Apenas uma instrução por linha permitidos.
multiple.string.literal = The String {0} aparece {1} vezes no arquivo.
multiple.variable.declarations = Apenas uma definição de variável por linha permitidos.
multiple.variable.declarations.comma = Cada declaração de variável deve estar em sua própria declaração.
nested.for.depth = Aninhado para a profundidade é {0, number, integer} (máximo permitido é {1, number, integer}).
require.this.variable = Referência a variável de instância ''{0}'' precisa de \"isso.\".
require.this.unfound.variable = Não foi possível encontrar onde ''{0}'' é declarada.
require.this.method = Chamada de método para ''{0}'' precisa de \"isso.\".
unnecessary.paren.assign = Parênteses desnecessários ao redor do lado direito atribuição.
unnecessary.paren.expr = Parênteses desnecessários ao redor expressão.
unnecessary.paren.ident = Parênteses desnecessários ao redor identificador ''{0}''.
unnecessary.paren.literal = Parênteses desnecessários em torno literal ''{0}''.
unnecessary.paren.return = Parênteses desnecessários em torno de valor de retorno.
unnecessary.paren.string = Parênteses desnecessários em torno cadeia {0}
package.dir.mismatch = Declaração do pacote não corresponde diretório ''{0}''.
variable.declaration.usage.distance = Distância entre a variável ''{0}'' declaração eo seu primeiro uso é {1} mas permitiu {2}
variable.declaration.usage.distance.extend = Distância entre a variável ''{0}'' declaração eo seu primeiro uso é {1} mas permitiu {2} Considere fazer essa variável como final se você ainda precisa para armazenar o seu valor com antecedência (antes chamadas de métodos que possam fazer efeito colateral sobre o valor original).
overload.methods.declaration = Métodos de sobrecarga não deve ser dividida. Método sobrecarregado anterior localizado na linha de ''{0}''.
doublechecked.locking.avoid = Double-Checked Locking (DCL - mecanismo de bloqueio de controle duplo).
