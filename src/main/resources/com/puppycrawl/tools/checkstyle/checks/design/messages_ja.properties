design.forExtension=拡張するように設計（サブクラス化することができます）が、この方法は、''{1}'' \
  のjavadocを持っていないようなクラス ''{0}'' それが安全にそれを行う方法を説明して見えます。\
  クラスが拡張するように設計されていない場合は、クラス ''{0}'' 最終または作る方法 メソッドは ''{1}'' \
  static/final/abstract/empty、または許可加える注釈をすることを検討してくださ
final.class=クラス {0} は final として宣言すべきです。
interface.type=インタフェースは型を記述するものであり、メソッドを持つべきです。
variable.notPrivate=変数 ''{0}'' は private とし、アクセッサメソッドを持つべきです。
mutable.exception=フィールド ''{0}'' は final 宣言しなければなりません。
throws.count=throws の数が {0,number,integer} （最大 {1,number,integer} まで）です。

arrangement.members.before.inner = フィールドとメソッドは、内部クラスの前でなければなりません。
hide.utility.class = ユーティリティクラスは、パブリックまたはデフォルトコンストラクタを持つべきではありません。
one.top.level.class = トップレベルのクラス {0} 、独自のソースファイル内に存在する必要があります。
