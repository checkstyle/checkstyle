array.trailing.comma=Dizi, takip eden bir virg\u00C3\u00BCl i\u00C3\u00A7ermelidir.
assignment.inner.avoid=Dahili atamalar kullan\u00C4\u00B1lmamal\u00C4\u00B1d\u00C4\u00B1r.
avoid.clone.method=''clone'' metodu kullan\u00C4\u00B1lmamal\u00C4\u00B1d\u00C4\u00B1r.
avoid.double.brace.init=\u00C3\u0087ift ayra\u00C3\u00A7 ba\u00C5\u009Flatmadan ka\u00C3\u00A7\u00C4\u00B1n\u00C4\u00B1n.
avoid.finalizer.method=''finalize'' metodu kullan\u00C4\u00B1lmamal\u00C4\u00B1d\u00C4\u00B1r.
constructors.declaration.grouping=A\u015F\u0131r\u0131 y\u00FCklenmi\u015F t\u00FCm kurucular birlikte grupland\u0131r\u0131lmal\u0131d\u0131r. \u00D6nceki kurucu ''{0}'' sat\u0131r numaras\u0131ndayd\u0131.
covariant.equals=java.lang.Object s\u00C4\u00B1n\u00C4\u00B1f\u00C4\u00B1n\u00C4\u00B1n ''equals'' metodundan ba\u00C5\u009Fka bir ''equals'' metodu tan\u00C4\u00B1mlanm\u00C4\u00B1\u00C5\u009F, java.lang.Object s\u00C4\u00B1n\u00C4\u00B1f\u00C4\u00B1ndan gelen ''equals'' metodu da ezilmelidir (override).
declaration.order.access=De\u00C4\u009Fi\u00C5\u009Fken, eri\u00C5\u009Fim seviyesine g\u00C3\u00B6re yanl\u00C4\u00B1\u00C5\u009F s\u00C4\u00B1rada tan\u00C4\u00B1mlanm\u00C4\u00B1\u00C5\u009F.
declaration.order.constructor=''constructor'' tan\u00C4\u00B1m\u00C4\u00B1 yanl\u00C4\u00B1\u00C5\u009F s\u00C4\u00B1rada yap\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F.
declaration.order.instance=De\u00C4\u009Fi\u00C5\u009Fken tan\u00C4\u00B1m\u00C4\u00B1 yanl\u00C4\u00B1\u00C5\u009F s\u00C4\u00B1rada yap\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F.
declaration.order.static=''static'' de\u00C4\u009Fi\u00C5\u009Fken tan\u00C4\u00B1m\u00C4\u00B1 yanl\u00C4\u00B1\u00C5\u009F s\u00C4\u00B1rada yap\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F.
default.comes.last=''switch'' i\u00C3\u00A7erisindeki ''default'' ifadesi son durum olarak yer almal\u00C4\u00B1d\u00C4\u00B1r.
default.comes.last.in.casegroup=Varsay\u00C4\u00B1lan de\u00C4\u009Fer, vaka grubundaki son etiket olmal\u00C4\u00B1d\u00C4\u00B1r.
empty.statement=Bo\u00C5\u009F ifade.
equals.avoid.null=''equals'' metodunda kullan\u00C4\u00B1lan harflerden olu\u00C5\u009Fan ifadeler ''equals'' metodunun sol taraf\u00C4\u00B1nda yer almal\u00C4\u00B1d\u00C4\u00B1r.
equals.noEquals=''hashCode'' metodu tan\u00C4\u00B1mlayan s\u00C4\u00B1n\u00C4\u00B1flar ''equals'' metodunu da tan\u00C4\u00B1mlamal\u00C4\u00B1d\u00C4\u00B1r.
equals.noHashCode=''equals'' metodu tan\u00C4\u00B1mlayan s\u00C4\u00B1n\u00C4\u00B1flar ''hashCode'' metodunu da tan\u00C4\u00B1mlamal\u00C4\u00B1d\u00C4\u00B1r.
equalsIgnoreCase.avoid.null=''equalsIgnoreCase'' metodunda kullan\u00C4\u00B1lan harflerden olu\u00C5\u009Fan ifadeler ''equalsIgnoreCase'' metodunun sol taraf\u00C4\u00B1nda yer almal\u00C4\u00B1d\u00C4\u00B1r.
explicit.init=''{0}'' de\u00C4\u009Fi\u00C5\u009Fkeni (verilmese bile zaten ilklendirme de\u00C4\u009Feri olan) ''{1}'' de\u00C4\u009Feriyle ilklendirilmi\u00C5\u009F.
fall.through=''switch'' ifadesinin bir \u00C3\u00B6nceki durumundan a\u00C5\u009Fa\u00C4\u009F\u00C4\u00B1 d\u00C3\u00BC\u00C5\u009Fme mevcut (''break'' kullan\u00C4\u00B1lmam\u00C4\u00B1\u00C5\u009F olabilir).
fall.through.last=''switch'' ifadesinin son durumundan a\u00C5\u009Fa\u00C4\u009F\u00C4\u00B1 d\u00C3\u00BC\u00C5\u009Fme mevcut (''break'' kullan\u00C4\u00B1lmam\u00C4\u00B1\u00C5\u009F olabilir).
final.variable=''{0}'' de\u00C4\u009Fi\u00C5\u009Fkeni ''final'' olarak tan\u00C4\u00B1mlanmal\u00C4\u00B1d\u00C4\u00B1r.
hidden.field=''{0}'', ba\u00C5\u009Fka bir alan\u00C4\u00B1 gizliyor.
illegal.catch=''{0}'' istisnas\u00C4\u00B1n\u00C4\u00B1/hatas\u00C4\u00B1n\u00C4\u00B1 yakalamaya izin verilmiyor.
illegal.throw=''{0}'' istisnas\u00C4\u00B1n\u00C4\u00B1/hatas\u00C4\u00B1n\u00C4\u00B1 f\u00C4\u00B1rlatmaya izin verilmiyor.
illegal.token=''{0}'' kullan\u00C4\u00B1m\u00C4\u00B1na izin verilmiyor.
illegal.token.text=\u00C4\u00B0zin verilmeyen bir kal\u00C4\u00B1p kullan\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F ''{0}''.
illegal.type=''{0}'' tipinin kullan\u00C4\u00B1lmas\u00C4\u00B1na izin verilmez.
inline.conditional.avoid=Sat\u00C4\u00B1r i\u00C3\u00A7i ko\u00C5\u009Fullu ifadeler kullan\u00C4\u00B1lmamal\u00C4\u00B1d\u00C4\u00B1r.
instantiation.avoid={0} s\u00C4\u00B1n\u00C4\u00B1f\u00C4\u00B1n\u00C4\u00B1n yeni nesnesi \u00C3\u00BCretilmemelidir.
magic.number=''{0}'' say\u00C4\u00B1s\u00C4\u00B1 ''magic number''d\u00C4\u00B1r. \u00C3\u0096nce tan\u00C4\u00B1mlanmal\u00C4\u00B1, sonra kullan\u00C4\u00B1lmal\u00C4\u00B1.
matchxpath.match=Ge\u00C3\u00A7ersiz kod yap\u00C4\u00B1s\u00C4\u00B1 alg\u00C4\u00B1land\u00C4\u00B1.
mismatch.package.directory=Paket ad\u00C4\u00B1, dizin ile ayn\u00C4\u00B1 de\u00C4\u009Fil.
missing.ctor=S\u00C4\u00B1n\u00C4\u00B1f, bir ''constructor'' tan\u00C4\u00B1mlamal\u00C4\u00B1.
missing.package.declaration=Paket tan\u00C4\u00B1m\u00C4\u00B1 yap\u00C4\u00B1lmam\u00C4\u00B1\u00C5\u009F.
missing.super.call=''{0}'' metodu ''super.{0}'' metodunu \u00C3\u00A7a\u00C4\u009F\u00C4\u00B1rmal\u00C4\u00B1.
missing.switch.default=''default'' olmadan ''switch'' kullan\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F.
modified.control.variable=Kontrol de\u00C4\u009Fi\u00C5\u009Fkeninin de\u00C4\u009Feri ''{0}'' de\u00C4\u009Fi\u00C5\u009Ftirilmi\u00C5\u009F.
multiple.statements.line=Her sat\u00C4\u00B1rda sadece bir ifade olmal\u00C4\u00B1d\u00C4\u00B1r.
multiple.string.literal=''{0}'' de\u00C4\u009Feri dosyada {1} defa kullan\u00C4\u00B1lm\u00C4\u00B1\u00C5\u009F.
multiple.variable.declarations=Her sat\u00C4\u00B1rda sadece bir de\u00C4\u009Fi\u00C5\u009Fken tan\u00C4\u00B1mlanmal\u00C4\u00B1.
multiple.variable.declarations.comma=Her de\u00C4\u009Fi\u00C5\u009Fken tan\u00C4\u00B1m\u00C4\u00B1 kendi ifadesinde yer almal\u00C4\u00B1.
nested.for.depth=\u00C4\u00B0\u00C3\u00A7 i\u00C3\u00A7e kullan\u00C4\u00B1lan ''for'' say\u00C4\u00B1s\u00C4\u00B1 {0,number,integer} (maksimum izin verilen de\u00C4\u009Fer {1,number,integer}).
nested.if.depth=\u00C4\u00B0\u00C3\u00A7 i\u00C3\u00A7e kullan\u00C4\u00B1lan ''if-else'' say\u00C4\u00B1s\u00C4\u00B1 {0,number,integer} (maksimum izin verilen de\u00C4\u009Fer {1,number,integer}).
nested.try.depth=\u00C4\u00B0\u00C3\u00A7 i\u00C3\u00A7e kullan\u00C4\u00B1lan ''try'' say\u00C4\u00B1s\u00C4\u00B1 {0,number,integer} (maksimum izin verilen de\u00C4\u009Fer {1,number,integer}).
no.array.trailing.comma=Dizi sonda virg\u00C3\u00BCl i\u00C3\u00A7ermemelidir.
no.enum.trailing.comma=Enum, sonda virg\u00C3\u00BCl i\u00C3\u00A7ermemelidir.
overload.methods.declaration=A\u00C5\u009F\u00C4\u00B1r\u00C4\u00B1 y\u00C3\u00BCklenmi\u00C5\u009F t\u00C3\u00BCm y\u00C3\u00B6ntemler yan yana yerle\u00C5\u009Ftirilmelidir. A\u00C5\u009F\u00C4\u00B1r\u00C4\u00B1 y\u00C3\u00BCklenmemi\u00C5\u009F y\u00C3\u00B6ntemleri ayn\u00C4\u00B1 tip a\u00C5\u009F\u00C4\u00B1r\u00C4\u00B1 y\u00C3\u00BCklenmi\u00C5\u009F y\u00C3\u00B6ntemler aras\u00C4\u00B1na yerle\u00C5\u009Ftirmek bir ihlaldir. '' {0} '' sat\u00C4\u00B1r\u00C4\u00B1nda \u00C3\u00B6nceki a\u00C5\u009F\u00C4\u00B1r\u00C4\u00B1 y\u00C3\u00BCklenmi\u00C5\u009F y\u00C3\u00B6ntem.
parameter.assignment=''{0}'' parametresine atama yap\u00C4\u00B1lamaz.
require.this.method=''{0}'' metoduna eri\u00C5\u009Fim "{1}this." kullan\u00C4\u00B1larak yap\u00C4\u00B1lmal\u00C4\u00B1d\u00C4\u00B1r.
require.this.variable=''{0}'' de\u00C4\u009Fi\u00C5\u009Fkenine eri\u00C5\u009Fim "{1}this." kullan\u00C4\u00B1larak yap\u00C4\u00B1lmal\u00C4\u00B1d\u00C4\u00B1r.
return.count=Kullan\u00C4\u00B1lan ''return'' say\u00C4\u00B1s\u00C4\u00B1 {0,number,integer} (void olmayan y\u00C3\u00B6ntemler / lambdas i\u00C3\u00A7in izin verilen maksimum say\u00C4\u00B1  {1,number,integer}).
return.countVoid=Kullan\u00C4\u00B1lan ''return'' say\u00C4\u00B1s\u00C4\u00B1 {0,number,integer} (void y\u00C3\u00B6ntemleri / kurucu / lambdas i\u00C3\u00A7in izin verilen maksimum say\u00C4\u00B1 {1,number,integer}).
simplify.boolReturn=Ko\u00C5\u009Ful mant\u00C4\u00B1\u00C4\u009F\u00C4\u00B1 kald\u00C4\u00B1r\u00C4\u00B1labilir.
simplify.expression=\u00C4\u00B0fade sadele\u00C5\u009Ftirilebilir.
string.literal.equality=''String'' ifadeleri ''{0}'' kullanarak de\u00C4\u009Fil, equals() metodu kullanarak kar\u00C5\u009F\u00C4\u00B1la\u00C5\u009Ft\u00C4\u00B1r\u00C4\u00B1lmal\u00C4\u00B1.
super.constructor.call=S\u00C3\u00BCper s\u00C4\u00B1n\u00C4\u00B1f yap\u00C4\u00B1c\u00C4\u00B1s\u00C4\u00B1na, arg\u00C3\u00BCman olmadan gereksiz \u00C3\u00A7a\u00C4\u009Fr\u00C4\u00B1.
unnecessary.paren.assign=Atama ifadesinin sa\u00C4\u009F taraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.paren.expr=\u00C4\u00B0fadenin etraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.paren.ident=''{0}'' belirte\u00C3\u00A7inin etraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.paren.lambda=Lamba de\u00C4\u009Feri etraf\u00C4\u00B1nda gereksiz parantezler var.
unnecessary.paren.literal=''{0}'' etraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.paren.return=Geri d\u00C3\u00B6n\u00C3\u00BC\u00C5\u009F de\u00C4\u009Feri etraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.paren.string=''{0}'' etraf\u00C4\u00B1nda gereksiz parantez mevcut.
unnecessary.semicolon=Gereksiz noktal\u00C4\u00B1 virg\u00C3\u00BCl.
unused.local.var=Kullan\u00C4\u00B1lmayan yerel de\u00C4\u009Fi\u00C5\u009Fken ''{0}''.
variable.declaration.usage.distance=De\u00C4\u009Fi\u00C5\u009Fken aras\u00C4\u00B1ndaki mesafe ''{0}'' beyan\u00C4\u00B1 ve ilk kullan\u00C4\u00B1m oldu\u00C4\u009Fu {1} ancak izin verilen {2}
variable.declaration.usage.distance.extend=De\u00C4\u009Fi\u00C5\u009Fken aras\u00C4\u00B1ndaki mesafe ''{0}'' beyan\u00C4\u00B1 ve ilk kullan\u00C4\u00B1m oldu\u00C4\u009Fu {1} ancak izin verilen {2} Hala (Orijinal de\u00C4\u009Ferine yan etkisi yapabilir y\u00C3\u00B6ntem \u00C3\u00A7a\u00C4\u009Fr\u00C4\u00B1lar\u00C4\u00B1 \u00C3\u00B6ncesi) pe\u00C5\u009Fin de\u00C4\u009Ferini saklamak gerekiyorsa son olarak bu de\u00C4\u009Fi\u00C5\u009Fken yapmak d\u00C3\u00BC\u00C5\u009F\u00C3\u00BCn\u00C3\u00BCn.
