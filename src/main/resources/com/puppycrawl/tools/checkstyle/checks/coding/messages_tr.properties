#Generated by ResourceBundle Editor (http://eclipse-rbe.sourceforge.net)

array.trailing.comma = Dizi, takip eden bir virg\u00FCl i\u00E7ermelidir.

assignment.inner.avoid = Dahili atamalar kullan\u0131lmamal\u0131d\u0131r.

avoid.clone.method     = ''clone'' metodu kullan\u0131lmamal\u0131d\u0131r.
avoid.finalizer.method = ''finalize'' metodu kullan\u0131lmamal\u0131d\u0131r.

covariant.equals = java.lang.Object s\u0131n\u0131f\u0131n\u0131n ''equals'' metodundan ba\u015Fka bir ''equals'' metodu tan\u0131mlanm\u0131\u015F, java.lang.Object s\u0131n\u0131f\u0131ndan gelen ''equals'' metodu da ezilmelidir (override).

declaration.order.access      = De\u011Fi\u015Fken, eri\u015Fim seviyesine g\u00F6re yanl\u0131\u015F s\u0131rada tan\u0131mlanm\u0131\u015F.
declaration.order.constructor = ''constructor'' tan\u0131m\u0131 yanl\u0131\u015F s\u0131rada yap\u0131lm\u0131\u015F.
declaration.order.instance    = De\u011Fi\u015Fken tan\u0131m\u0131 yanl\u0131\u015F s\u0131rada yap\u0131lm\u0131\u015F.
declaration.order.method      = Metot tan\u0131m\u0131 yanl\u0131\u015F s\u0131rada yap\u0131lm\u0131\u015F.
declaration.order.static      = ''static'' de\u011Fi\u015Fken tan\u0131m\u0131 yanl\u0131\u015F s\u0131rada yap\u0131lm\u0131\u015F.

default.comes.last = ''switch'' i\u00E7erisindeki ''default'' ifadesi son durum olarak yer almal\u0131d\u0131r.

doublechecked.locking.avoid = Double-Checked Locking (DCL - lock mekanizmas\u0131nda ikili kontrol) yap\u0131lmam\u0131\u015F.

empty.statement = Bo\u015F ifade.

equals.avoid.null           = ''equals'' metodunda kullan\u0131lan harflerden olu\u015Fan ifadeler ''equals'' metodunun sol taraf\u0131nda yer almal\u0131d\u0131r.
equals.noHashCode           = ''equals'' metodu tan\u0131mlayan s\u0131n\u0131flar ''hashCode'' metodunu da tan\u0131mlamal\u0131d\u0131r.

equalsIgnoreCase.avoid.null = ''equalsIgnoreCase'' metodunda kullan\u0131lan harflerden olu\u015Fan ifadeler ''equalsIgnoreCase'' metodunun sol taraf\u0131nda yer almal\u0131d\u0131r.

explicit.init = ''{0}'' de\u011Fi\u015Fkeni (verilmese bile zaten ilklendirme de\u011Feri olan) ''{1}'' de\u011Feriyle ilklendirilmi\u015F.

fall.through      = ''switch'' ifadesinin bir \u00F6nceki durumundan a\u015Fa\u011F\u0131 d\u00FC\u015Fme mevcut (''break'' kullan\u0131lmam\u0131\u015F olabilir).
fall.through.last = ''switch'' ifadesinin son durumundan a\u015Fa\u011F\u0131 d\u00FC\u015Fme mevcut (''break'' kullan\u0131lmam\u0131\u015F olabilir).

final.variable = ''{0}'' de\u011Fi\u015Fkeni ''final'' olarak tan\u0131mlanmal\u0131d\u0131r.

hidden.field = ''{0}'', ba\u015Fka bir alan\u0131 gizliyor.

illegal.catch      = ''{0}'' istisnas\u0131n\u0131/hatas\u0131n\u0131 yakalamaya izin verilmiyor.
illegal.throw      = ''{0}'' istisnas\u0131n\u0131/hatas\u0131n\u0131 f\u0131rlatmaya izin verilmiyor.
illegal.token      = ''{0}'' kullan\u0131m\u0131na izin verilmiyor.
illegal.token.text = \u0130zin verilmeyen bir kal\u0131p kullan\u0131lm\u0131\u015F ''{0}''.
illegal.type       = ''{0}'' tipinde de\u011Fi\u015Fken, d\u00F6n\u00FC\u015F de\u011Feri ya da parametre tan\u0131mlanmamal\u0131d\u0131r.

inline.conditional.avoid = Sat\u0131r i\u00E7i ko\u015Fullu ifadeler kullan\u0131lmamal\u0131d\u0131r.

instantiation.avoid = {0} s\u0131n\u0131f\u0131n\u0131n yeni nesnesi \u00FCretilmemelidir.

junit.method.name                = ''{0}'' metodu ''{1}'' olarak adland\u0131r\u0131lmal\u0131d\u0131r.
junit.method.parameters          = ''{0}'' metodu parametresiz olarak tan\u0131mlanmal\u0131.
junit.method.protected.or.public = ''{0}'' metodu ''public'' ya da ''protected'' olmal\u0131.
junit.method.public.and.static   = ''{0}'' metodu ''static'' olarak tan\u0131mlanmal\u0131.
junit.method.return.type         = ''{0}'' metodunun d\u00F6n\u00FC\u015F tipi ''{1}'' olmal\u0131.
junit.method.static              = ''{0}'' metodu ''static'' olarak tan\u0131mlanmamal\u0131.

magic.number = ''{0}'' say\u0131s\u0131 ''magic number''d\u0131r. \u00D6nce tan\u0131mlanmal\u0131, sonra kullan\u0131lmal\u0131.

missing.ctor                = S\u0131n\u0131f, bir ''constructor'' tan\u0131mlamal\u0131.
missing.package.declaration = Paket tan\u0131m\u0131 yap\u0131lmam\u0131\u015F.
missing.super.call          = ''{0}'' metodu ''super.{0}'' metodunu \u00E7a\u011F\u0131rmal\u0131.
missing.switch.default      = ''default'' olmadan ''switch'' kullan\u0131lm\u0131\u015F.

modified.control.variable = Kontrol de\u011Fi\u015Fkeninin de\u011Feri de\u011Fi\u015Ftirilmi\u015F.

multiple.statements.line             = Her sat\u0131rda sadece bir ifade olmal\u0131d\u0131r.
multiple.string.literal              = ''{0}'' de\u011Feri dosyada {1} defa kullan\u0131lm\u0131\u015F.
multiple.variable.declarations       = Her sat\u0131rda sadece bir de\u011Fi\u015Fken tan\u0131mlanmal\u0131.
multiple.variable.declarations.comma = Her de\u011Fi\u015Fken tan\u0131m\u0131 kendi ifadesinde yer almal\u0131.

nested.for.depth = \u0130\u00E7 i\u00E7e kullan\u0131lan ''for'' say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011Fer {1,number,integer}).
nested.if.depth  = \u0130\u00E7 i\u00E7e kullan\u0131lan ''if-else'' say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011Fer {1,number,integer}).
nested.try.depth = \u0130\u00E7 i\u00E7e kullan\u0131lan ''try'' say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011Fer {1,number,integer}).

package.dir.mismatch = Paket tan\u0131m\u0131 ''{0}'' klas\u00F6r\u00FCyle e\u015Fle\u015Fmiyor.

parameter.assignment = ''{0}'' parametresine atama yap\u0131lamaz.

redundant.throws.classInfo = {0} i\u00E7in s\u0131n\u0131f bilgisi al\u0131nam\u0131yor.
redundant.throws.duplicate = ''throws'' ifadesinde ''{0}'' tekrardan kullan\u0131lm\u0131\u015F.
redundant.throws.subclass  = ''{0}'', ''{1}'' s\u0131n\u0131f\u0131n\u0131n alt s\u0131n\u0131f\u0131d\u0131r, ''throws'' kullan\u0131m\u0131 gereksizdir.
redundant.throws.unchecked = ''{0}'' ''unchecked'' bir istisnad\u0131r, ''throws'' kullan\u0131m\u0131 gereksizdir.

require.this.method           = ''{0}'' metoduna eri\u015Fim "this." kullan\u0131larak yap\u0131lmal\u0131d\u0131r.
require.this.unfound.variable = ''{0}'' ifadesinin nerede tan\u0131mland\u0131\u011F\u0131 bilinmiyor.
require.this.variable         = ''{0}'' de\u011Fi\u015Fkenine eri\u015Fim "this." kullan\u0131larak yap\u0131lmal\u0131d\u0131r.

return.count = Kullan\u0131lan ''return'' say\u0131s\u0131 {0,number,integer} (maksimum izin verilen de\u011Fer {1,number,integer}).

simplify.boolreturn = Ko\u015Ful mant\u0131\u011F\u0131 kald\u0131r\u0131labilir.
simplify.expression = \u0130fade sadele\u015Ftirilebilir.

string.literal.equality = ''String'' ifadeleri ''{0}'' kullanarak de\u011Fil, equals() metodu kullanarak kar\u015F\u0131la\u015Ft\u0131r\u0131lmal\u0131.

unnecessary.paren.assign  = Atama ifadesinin sa\u011F taraf\u0131nda gereksiz parantez mevcut.
unnecessary.paren.expr    = \u0130fadenin etraf\u0131nda gereksiz parantez mevcut.
unnecessary.paren.ident   = ''{0}'' belirte\u00E7inin etraf\u0131nda gereksiz parantez mevcut.
unnecessary.paren.literal = ''{0}'' etraf\u0131nda gereksiz parantez mevcut.
unnecessary.paren.return  = Geri d\u00F6n\u00FC\u015F de\u011Feri etraf\u0131nda gereksiz parantez mevcut.
unnecessary.paren.string  = ''{0}'' etraf\u0131nda gereksiz parantez mevcut.
