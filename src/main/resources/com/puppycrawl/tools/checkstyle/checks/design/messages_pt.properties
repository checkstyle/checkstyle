arrangement.members.before.inner=Blocos de inicialização, construtores, campos e métodos devem aparecer antes dos tipos internos.
design.forExtension=A classe ''{0}'' parece ter sido projetada para extensão (permite subclasses), \
  mas o método ''{1}'' não tem um Javadoc que explique como fazer isso de forma segura. \
  Se a classe ''{0}'' não é projetada para extensão, considere fazê-la ser final, ou então tornar \
  o método ''{1}'' estático, final, abstrato ou vazio ou ainda adicione a anotação permitida ao método.
final.class=A classe ''{0}'' deveria ser declarada como ''final''.
hide.utility.class=Classes utilitárias não deveriam ter construtores públicos ou com visibilidade de pacote.
interface.type=As interfaces deveriam descrever um tipo e portanto devem ter métodos.
mutable.exception=O campo ''{0}'' deveria ser declarado como ''final''.
one.top.level.class=A classe de nível superior ''{0}'' deveria residir no seu próprio arquivo de origem.
throws.count=O número de cláusulas \"throws\" é de {0,number,integer}, mas o máximo permitido é de {1,number,integer}.
variable.notPrivate=A variável ''{0}'' deveria ser privada e ter métodos acessores.
