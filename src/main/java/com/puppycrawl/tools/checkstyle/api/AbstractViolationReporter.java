////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code for adherence to a set of rules.
// Copyright (C) 2001-2021 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

package com.puppycrawl.tools.checkstyle.api;

import com.puppycrawl.tools.checkstyle.utils.CommonUtil;
import java.io.File;
import java.util.Map;
import java.util.SortedSet;
import java.util.TreeSet;
import java.util.regex.Pattern;

/**
 * Serves as an abstract base class for all modules that report inspection
 * findings. Such modules have a Severity level which is used for the
 * {@link Violation violations} that are created by the module.
 *
 * @noinspection NoopMethodInAbstractClass
 */
public abstract class AbstractViolationReporter
    extends AutomaticBean {

    /** Pattern matching any file extension with dot included. */
    private static final Pattern FILE_EXTENSION_PATTERN = Pattern.compile("\\.[^.]*$");

    /**
     * The check context.
     *
     * @noinspection ThreadLocalNotStaticFinal
     */
    private final ThreadLocal<FileContext> context = ThreadLocal.withInitial(FileContext::new);

    /** The severity level of any violations found. */
    private SeverityLevel severityLevel = SeverityLevel.ERROR;

    /** The identifier of the reporter. */
    private String id;

    /** The tab width for column reporting. */
    private int tabWidth = CommonUtil.DEFAULT_TAB_WIDTH;

    private FileContext getContext() {
        return context.get();
    }

    /**
     * Destroy the check. It is being retired from service.
     */
    public void destroy() {
        context.remove();
    }

    /**
     * Clears the sorted set of {@link Violation} of the check.
     */
    public final void clearViolations() {
        getContext().violations.clear();
    }

    /**
     * Returns the sorted set of {@link Violation}.
     *
     * @return the sorted set of {@link Violation}.
     */
    public SortedSet<Violation> getViolations() {
        return new TreeSet<>(getContext().violations);
    }

    /**
     * Set the file contents associated with the tree.
     *
     * @param contents the manager
     */
    public final void setFileContents(FileContents contents) {
        getContext().fileContents = contents;
    }

    /**
     * Returns the file contents associated with the file.
     *
     * @return the file contents
     */
    protected final FileContents getFileContents() {
        return getContext().fileContents;
    }

    /**
     * Get source file name.
     *
     * @return source file name.
     */
    public final String getSimpleFileName() {
        String name = getFileName();
        name = name.substring(name.lastIndexOf(File.separatorChar) + 1);
        name = FILE_EXTENSION_PATTERN.matcher(name).replaceAll("");
        return name;
    }

    /**
     * Returns the file name associated with the tree.
     *
     * @return the file name
     * @noinspection WeakerAccess
     */
    public final String getFileName() {
        return getContext().getFileName();
    }

    /**
     * Adds the {@link Violation} to the message collector.
     *
     * @param violation the {@link Violation} to add.
     */
    protected void addViolation(Violation violation) {
        getContext().violations.add(violation);
    }

    /**
     * Adds the sorted set of {@link Violation} to the message collector.
     *
     * @param violations the sorted set of {@link Violation}.
     */
    protected void addViolations(SortedSet<Violation> violations) {
        getContext().violations.addAll(violations);
    }

    /**
     * Returns the lines associated with the tree.
     *
     * @return the file contents
     */
    public final String[] getLines() {
        return getFileContents().getLines();
    }

    /**
     * Returns the line associated with the tree.
     *
     * @param index index of the line
     * @return the line from the file contents
     */
    public final String getLine(int index) {
        return getFileContents().getLine(index);
    }

    /**
     * Returns the severity level of the violations generated by this module.
     *
     * @return the severity level
     * @see SeverityLevel
     * @see Violation#getSeverityLevel
     * @noinspection WeakerAccess
     */
    public final SeverityLevel getSeverityLevel() {
        return severityLevel;
    }

    /**
     * Sets the severity level.  The string should be one of the names
     * defined in the {@code SeverityLevel} class.
     *
     * @param severity  The new severity level
     * @see SeverityLevel
     */
    public final void setSeverity(String severity) {
        severityLevel = SeverityLevel.getInstance(severity);
    }

    /**
     *  Get the severity level's name.
     *
     *  @return  the check's severity level name.
     *  @noinspection WeakerAccess
     */
    public final String getSeverity() {
        return severityLevel.getName();
    }

    /**
     * Returns the identifier of the reporter. Can be null.
     *
     * @return the id
     */
    public final String getId() {
        return id;
    }

    /**
     * Sets the identifier of the reporter. Can be null.
     *
     * @param id the id
     */
    public final void setId(final String id) {
        this.id = id;
    }

    /**
     * Get tab width to report audit events with.
     *
     * @return the tab width to report audit events with
     */
    public final int getTabWidth() {
        return tabWidth;
    }

    /**
     * Set the tab width to report audit events with.
     *
     * @param tabWidth an {@code int} value
     */
    public final void setTabWidth(int tabWidth) {
        this.tabWidth = tabWidth;
    }

    /**
     * Returns an unmodifiable map instance containing the custom messages
     * for this configuration.
     *
     * @return unmodifiable map containing custom messages
     */
    protected Map<String, String> getCustomMessages() {
        return getConfiguration().getMessages();
    }

    /**
     * Returns the message bundle name resource bundle that contains the messages
     * used by this module.
     * <p>
     * The default implementation expects the resource files to be named
     * messages.properties, messages_de.properties, etc. The file must
     * be placed in the same package as the module implementation.
     * </p>
     * <p>
     * Example: If you write com/foo/MyCoolCheck, create resource files
     * com/foo/messages.properties, com/foo/messages_de.properties, etc.
     * </p>
     *
     * @return name of a resource bundle that contains the messages
     *     used by this module.
     */
    protected String getMessageBundle() {
        final String className = getClass().getName();
        return getMessageBundle(className);
    }

    /**
     * For unit tests, especially with a class with no package name.
     *
     * @param className class name of the module.
     * @return name of a resource bundle that contains the messages
     *     used by the module.
     */
    private static String getMessageBundle(final String className) {
        final String messageBundle;
        final int endIndex = className.lastIndexOf('.');
        final String messages = "messages";
        if (endIndex == -1) {
            messageBundle = messages;
        }
        else {
            final String packageName = className.substring(0, endIndex);
            messageBundle = packageName + "." + messages;
        }
        return messageBundle;
    }

    @Override
    protected void finishLocalSetup() throws CheckstyleException {
        // No code by default
    }

    /**
     * Log a message that has no column information.
     *
     * @param line the line number where the audit event was found
     * @param key the message that describes the audit event
     * @param args the details of the message
     *
     * @see java.text.MessageFormat
     */
    // -@cs[CustomDeclarationOrder] CustomDeclarationOrder does not treat groups of
    // overloaded methods. See https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/414
    public void log(int line, String key, Object... args) {
        addViolation(
                Violation.createDetailedViolation(
                        line,
                        0, // columnNo
                        0, // columnCharIndex
                        0, // tokenType
                        getMessageBundle(),
                        key,
                        args,
                        getSeverityLevel(),
                        getId(),
                        getClass(),
                        getCustomMessages().get(key)));
    }

    /**
     * Log a message that has column information.
     *
     * @param line the line number where the audit event was found
     * @param col the column number where the audit event was found
     * @param key the message that describes the audit event
     * @param args the details of the message
     *
     * @see java.text.MessageFormat
     */
    // -@cs[CustomDeclarationOrder] CustomDeclarationOrder does not treat groups of
    // overloaded methods. See https://github.com/sevntu-checkstyle/sevntu.checkstyle/issues/414
    public void log(int line, int col, String key, Object... args) {
        final int colFixed = 1 + CommonUtil.lengthExpandedTabs(getLines()[line - 1], col, tabWidth);
        addViolation(
                Violation.createDetailedViolation(
                        line,
                        colFixed,
                        0, // columnCharIndex
                        0, // tokenType
                        getMessageBundle(),
                        key,
                        args,
                        getSeverityLevel(),
                        getId(),
                        getClass(),
                        getCustomMessages().get(key)));
    }

    /**
     * The actual context holder.
     */
    private static final class FileContext {

        /** The sorted set for collecting violations. */
        private final SortedSet<Violation> violations = new TreeSet<>();

        /** The current file contents. */
        private FileContents fileContents;

        public String getFileName() {
            if (fileContents == null) return "";
            return fileContents.getFileName();
        }
    }

}
