///////////////////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code and other text files for adherence to a set of rules.
// Copyright (C) 2001-2024 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
///////////////////////////////////////////////////////////////////////////////////////////////

package com.puppycrawl.tools.checkstyle;

import java.lang.annotation.ElementType;
import java.lang.annotation.Retention;
import java.lang.annotation.RetentionPolicy;
import java.lang.annotation.Target;

/**
 * The {@code Generated} annotation is used to indicate that the annotated
 * element (class, method, or constructor) has been automatically generated.
 * This annotation helps to distinguish between code that is hand-written
 * and code that is generated by tools or frameworks.
 *
 * <p>Usage:
 * <ul>
 *   <li>Apply this annotation to classes, methods, or constructors.</li>
 *   <li>Generated code can be identified at runtime using reflection.</li>
 * </ul>
 *
 * <p>Example:
 * <pre>
 * {@code
 *   \@Generated
 *   public class GeneratedClass {
 *       // ... generated code ...
 *   }
 *
 *   \@Generated
 *   public void generatedMethod() {
 *       // ... generated code ...
 *   }
 * }
 * </pre>
 *
 * <p>{@code @Retention(RetentionPolicy.RUNTIME)} ensures that the annotation
 * is retained at runtime, allowing it to be accessed and processed through
 * reflection.
 *
 * <p>{@code @Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR})}
 * specifies the types of elements to which this annotation can be applied.
 *
 * @since 1.0
 */
@Retention(RetentionPolicy.RUNTIME)
@Target({ElementType.TYPE, ElementType.METHOD, ElementType.CONSTRUCTOR})
public @interface Generated {
}
