{
  "$schema": "https://raw.githubusercontent.com/oasis-tcs/sarif-spec/master/Schemata/sarif-schema-2.1.0.json",
  "version": "2.1.0",
  "runs": [
    {
      "tool": {
        "driver": {
          "downloadUri": "https://github.com/checkstyle/checkstyle/releases/",
          "fullName": "Checkstyle",
          "informationUri": "https://checkstyle.org/",
          "language": "en",
          "name": "Checkstyle",
          "organization": "Checkstyle",
          "rules": [
            {
              "id": "com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck",
              "messageStrings": {
                "import.unused": {
                  "text": "Unused import - {0}."
                }
              },
              "shortDescription": {
                "text": "UnusedImports"
              },
              "fullDescription": {
                "text": "<div>\n Checks for unused import statements. An import statement\n is considered unused if:\n <\/div>\n\n <ul>\n <li>\n It is not referenced in the file. The algorithm does not support wild-card\n imports like <code>import java.io.*;<\/code>. Most IDE's provide very sophisticated\n checks for imports that handle wild-card imports.\n <\/li>\n <li>\n The class imported is from the <code>java.lang<\/code> package. For example\n importing <code>java.lang.String<\/code>.\n <\/li>\n <li>\n The class imported is from the same package.\n <\/li>\n <li>\n A static method is imported when used as method reference. In that case,\n only the type needs to be imported and that's enough to resolve the method.\n <\/li>\n <li>\n <b>Optionally:<\/b> it is referenced in Javadoc comments. This check is on by\n default, but it is considered bad practice to introduce a compile-time\n dependency for documentation purposes only. As an example, the import\n <code>java.util.List<\/code> would be considered referenced with the Javadoc\n comment <code>{@link List}<\/code>. The alternative to avoid introducing a compile-time\n dependency would be to write the Javadoc comment as <code>{&#64;link java.util.List}<\/code>.\n <\/li>\n <\/ul>\n\n <p>\n The main limitation of this check is handling the cases where:\n <\/p>\n <ul>\n <li>\n An imported type has the same name as a declaration, such as a member variable.\n <\/li>\n <li>\n There are two or more static imports with the same method name\n (javac can distinguish imports with same name but different parameters, but checkstyle can not\n due to <a href=\"https:\/\/checkstyle.org\/writingchecks.html#Limitations\">limitation.<\/a>)\n <\/li>\n <\/ul>"
              }
            }
          ],
          "semanticVersion": "null",
          "version": "null"
        }
      },
      "results": [
        {
          "level": "error",
          "locations": [
            {
              "physicalLocation": {
                "artifactLocation": {
                  "uri": "file:src/test/resources/com/puppycrawl/tools/checkstyle/sariflogger/InputSarifLoggerSingleError.java"
                },
                "region": {
                  "startColumn": 8,
                  "startLine": 11
                }
              }
            }
          ],
          "message": {
            "id": "import.unused",
            "text": "Unused import - java.util.List."
          },
          "ruleId": "com.puppycrawl.tools.checkstyle.checks.imports.UnusedImportsCheck"
        }
      ]
    }
  ]
}
