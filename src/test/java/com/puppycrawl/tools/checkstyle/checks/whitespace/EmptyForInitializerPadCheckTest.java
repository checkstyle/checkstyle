///////////////////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code and other text files for adherence to a set of rules.
// Copyright (C) 2001-2025 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
///////////////////////////////////////////////////////////////////////////////////////////////

package com.puppycrawl.tools.checkstyle.checks.whitespace;

import static com.google.common.truth.Truth.assertWithMessage;
import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_NOT_PRECEDED;
import static com.puppycrawl.tools.checkstyle.checks.whitespace.EmptyForInitializerPadCheck.MSG_PRECEDED;

import org.junit.jupiter.api.Test;

import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
import com.puppycrawl.tools.checkstyle.api.TokenTypes;
import com.puppycrawl.tools.checkstyle.utils.CommonUtil;

class EmptyForInitializerPadCheckTest
        extends AbstractModuleTestSupport {

    @Override
    protected String getPackageLocation() {
        return "com/puppycrawl/tools/checkstyle/checks/whitespace/emptyforinitializerpad";
    }

    @Test
    void getRequiredTokens() {
        final EmptyForInitializerPadCheck checkObj = new EmptyForInitializerPadCheck();
        final int[] expected = {TokenTypes.FOR_INIT};
        assertWithMessage("Default required tokens are invalid")
            .that(checkObj.getRequiredTokens())
            .isEqualTo(expected);
    }

    @Test
    void testDefault() throws Exception {
        final String[] expected = {
            "51:15: " + getCheckMessage(MSG_PRECEDED, ";"),
        };
        verifyWithInlineConfigParser(
                getPath("InputEmptyForInitializerPadDefaultConfig.java"), expected);
    }

    @Test
    void spaceOption() throws Exception {
        final String[] expected = {
            "54:14: " + getCheckMessage(MSG_NOT_PRECEDED, ";"),
        };
        verifyWithInlineConfigParser(
                getPath("InputEmptyForInitializerPad.java"), expected);
    }

    @Test
    void getAcceptableTokens() {
        final EmptyForInitializerPadCheck emptyForInitializerPadCheckObj =
            new EmptyForInitializerPadCheck();
        final int[] actual = emptyForInitializerPadCheckObj.getAcceptableTokens();
        final int[] expected = {
            TokenTypes.FOR_INIT,
        };
        assertWithMessage("Default acceptable tokens are invalid")
            .that(actual)
            .isEqualTo(expected);
    }

    /* Additional test for jacoco, since valueOf()
     * is generated by javac and jacoco reports that
     * valueOf() is uncovered.
     */
    @Test
    void padOptionValueOf() {
        final PadOption option = PadOption.valueOf("NOSPACE");
        assertWithMessage("Result of valueOf is invalid")
            .that(option)
            .isEqualTo(PadOption.NOSPACE);
    }

    /* Additional test for jacoco, since valueOf()
     * is generated by javac and jacoco reports that
     * valueOf() is uncovered.
     */
    @Test
    void wrapOptionValueOf() {
        final WrapOption option = WrapOption.valueOf("EOL");
        assertWithMessage("Result of valueOf is invalid")
            .that(option)
            .isEqualTo(WrapOption.EOL);
    }

    @Test
    void withEmoji() throws Exception {
        final String[] expected = {
            "23:13: " + getCheckMessage(MSG_NOT_PRECEDED, ";"),
            "28:25: " + getCheckMessage(MSG_NOT_PRECEDED, ";"),
        };
        verifyWithInlineConfigParser(
                getPath("InputEmptyForInitializerPadWithEmoji.java"), expected);
    }

    @Test
    void invalidOption() throws Exception {
        final DefaultConfiguration checkConfig =
                createModuleConfig(EmptyForInitializerPadCheck.class);
        checkConfig.addProperty("option", "invalid_option");

        try {
            final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;

            verifyWithInlineConfigParser(
                    getPath("InputEmptyForInitializerPad2.java"), expected);
            assertWithMessage("exception expected").fail();
        }
        catch (CheckstyleException exc) {
            assertWithMessage("Invalid exception message")
                .that(exc.getMessage())
                .isEqualTo("cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
                    + "cannot initialize module com.puppycrawl.tools.checkstyle.checks."
                    + "whitespace.EmptyForInitializerPadCheck - "
                    + "Cannot set property 'option' to 'invalid_option'");
        }
    }

    @Test
    void trimOptionProperty() throws Exception {
        final String[] expected = {
            "15:14: " + getCheckMessage(MSG_NOT_PRECEDED, ";"),
        };
        verifyWithInlineConfigParser(
                getPath("InputEmptyForInitializerPadSetOptionTrim.java"), expected);
    }
}
