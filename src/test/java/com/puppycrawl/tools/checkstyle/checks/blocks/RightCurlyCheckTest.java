////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code for adherence to a set of rules.
// Copyright (C) 2001-2021 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

package com.puppycrawl.tools.checkstyle.checks.blocks;

import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_ALONE;
import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_BREAK_BEFORE;
import static com.puppycrawl.tools.checkstyle.checks.blocks.RightCurlyCheck.MSG_KEY_LINE_SAME;
import static org.junit.jupiter.api.Assertions.assertEquals;
import static org.junit.jupiter.api.Assertions.fail;

import org.junit.jupiter.api.Test;

import com.puppycrawl.tools.checkstyle.AbstractModuleTestSupport;
import com.puppycrawl.tools.checkstyle.DefaultConfiguration;
import com.puppycrawl.tools.checkstyle.api.CheckstyleException;
import com.puppycrawl.tools.checkstyle.utils.CommonUtil;

public class RightCurlyCheckTest extends AbstractModuleTestSupport {

    @Override
    protected String getPackageLocation() {
        return "com/puppycrawl/tools/checkstyle/checks/blocks/rightcurly";
    }

    /* Additional test for jacoco, since valueOf()
     * is generated by javac and jacoco reports that
     * valueOf() is uncovered.
     */
    @Test
    public void testRightCurlyOptionValueOf() {
        final RightCurlyOption option = RightCurlyOption.valueOf("ALONE");
        assertEquals(RightCurlyOption.ALONE, option, "Invalid valueOf result");
    }

    @Test
    public void testDefault() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        final String[] expected = {
            "20:17: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 17),
            "23:17: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 17),
            "35:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
            "39:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
            "88:27: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 27),
        };
        verify(checkConfig, getPath("InputRightCurlyLeftTestDefault.java"), expected);
    }

    @Test
    public void testSame() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, "
                + "LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO, "
                + "ANNOTATION_DEF, ENUM_DEF");
        final String[] expected = {
            "23:17: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 17),
            "26:17: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 17),
            "38:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
            "42:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
            "84:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "91:27: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 27),
            "186:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "187:53: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 53),
        };
        verify(checkConfig, getPath("InputRightCurlyLeftTestSame.java"), expected);
    }

    @Test
    public void testSameOmitOneLiners() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig, getPath("InputRightCurlyTestSameOmitOneLiners.java"), expected);
    }

    @Test
    public void testSameDoesNotComplainForNonMultilineConstructs() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "LITERAL_DO, LITERAL_FOR, LITERAL_WHILE, STATIC_INIT,"
                + "INSTANCE_INIT, CLASS_DEF, METHOD_DEF, CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, "
                + "INTERFACE_DEF");
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig, getPath("InputRightCurlyTestSame.java"), expected);
    }

    @Test
    public void testAlone() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, "
                + "LITERAL_IF, LITERAL_ELSE, LITERAL_FOR, LITERAL_WHILE, LITERAL_DO");
        final String[] expected = {
            "54:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
            "91:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27),
            "95:72: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 72),
            "171:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "173:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "175:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "176:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "181:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "186:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "187:53: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 53),
        };
        verify(checkConfig, getPath("InputRightCurlyLeftTestAlone.java"), expected);
    }

    @Test
    public void testNewLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF, "
                + "ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "84:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "109:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "109:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "120:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "120:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "134:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "134:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "142:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "147:50: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 50),
            "150:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31),
            "152:39: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 39),
            "195:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "200:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "203:39: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 39),
            "209:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "209:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
        };
        verify(checkConfig, getPath("InputRightCurlyLeftTestNewLine.java"), expected);
    }

    @Test
    public void testShouldStartLine2() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, "
                + "ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "83:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "108:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "108:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "119:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "119:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "133:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "133:6: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 6),
            "194:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "199:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "208:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "208:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
        };
        verify(checkConfig, getPath("InputRightCurlyLeftTestShouldStartLine2.java"), expected);
    }

    @Test
    public void testForceLineBreakBefore() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "LITERAL_FOR,"
                + "LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT");
        final String[] expected = {
            "35:43: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 43),
            "38:17: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 17),
            "41:71: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 71),
            "43:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38),
            "47:25: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 25),
        };
        verify(checkConfig, getPath("InputRightCurlyTestForceLineBreakBefore.java"), expected);
    }

    @Test
    public void testForceLineBreakBefore2() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig, getPath("InputRightCurlyTestForceLineBreakBefore2.java"), expected);
    }

    @Test
    public void testNullPointerException() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, "
            + "LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, "
                + "INTERFACE_DEF");
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig, getPath("InputRightCurlyTestNullPointerException.java"), expected);
    }

    @Test
    public void testWithAnnotations() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, "
            + "LITERAL_IF, LITERAL_ELSE, CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, "
            + "LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF");
        final String[] expected = {
            "15:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "18:65: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 65),
            "29:46: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 46),
            "33:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31),
            "36:35: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 35),
            "39:36: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 36),
            "45:73: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 73),
            "47:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "52:66: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 66),
            "55:96: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 96),
            "58:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "61:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "64:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "68:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38),
            "69:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31),
            "75:62: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 62),
            "84:28: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 28),
            "86:21: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 21),
            "88:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
            "90:14: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 14),
            "101:26: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 26),
            "102:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
            "111:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "111:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38),
            "115:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "115:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38),
            "119:40: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 40),
            "119:88: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 88),
            "122:18: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 18),
            "126:23: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 23),
            "129:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "131:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "135:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "144:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "146:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "146:33: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 33),
            "158:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
            "159:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58),
            "159:74: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 74),
            "160:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58),
            "161:58: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 58),
            "161:74: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 74),
            "167:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "174:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "189:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "196:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "196:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
            "205:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "205:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
            "209:54: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 54),
            "209:55: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 55),
            "212:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
            "212:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76),
            "212:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "216:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76),
            "224:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27),
            "228:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31),
            "231:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "233:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "236:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "239:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "242:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "245:38: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 38),
            "247:56: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 56),
            "250:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "260:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "262:40: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 40),
            "266:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "269:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "271:61: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 61),
        };
        verify(checkConfig, getPath("InputRightCurlyTestWithAnnotations.java"), expected);
    }

    @Test
    public void testAloneOrSingleLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        checkConfig.addAttribute("tokens", "LITERAL_TRY, LITERAL_CATCH, LITERAL_FINALLY, "
            + "LITERAL_IF, LITERAL_ELSE, CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR, "
            + "LITERAL_WHILE, LITERAL_DO, STATIC_INIT, INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, "
                + "INTERFACE_DEF");
        final String[] expected = {
            "68:26: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 26),
            "82:42: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 42),
            "85:18: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 18),
            "93:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "97:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "105:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "107:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "118:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
            "120:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "120:93: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 93),
            "122:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "124:64: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 64),
            "124:80: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 80),
            "130:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "137:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "152:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "159:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "159:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
            "168:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "168:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
            "172:54: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 54),
            "172:55: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 55),
            "175:75: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 75),
            "175:76: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 76),
            "175:77: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 77),
            "187:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27),
            "193:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "196:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "199:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "205:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "207:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "209:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "210:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "215:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "220:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "221:53: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 53),
            "229:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "241:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
        };
        verify(checkConfig, getPath("InputRightCurlyTestAloneOrSingleline.java"), expected);
    }

    @Test
    public void testCatchWithoutFinally() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        final String[] expected = {
            "14:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
        };
        verify(checkConfig, getPath("InputRightCurlyTestWithoutFinally.java"), expected);
    }

    @Test
    public void testSingleLineClass() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF");
        final String[] expected = {
            "26:56: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 56),
        };
        verify(checkConfig, getPath("InputRightCurlyTestSingleLineClass.java"), expected);
    }

    @Test
    public void testInvalidOption() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", "invalid_option");

        try {
            final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;

            verify(checkConfig, getPath("InputRightCurlyTestInvalidOption.java"), expected);
            fail("exception expected");
        }
        catch (CheckstyleException ex) {
            assertEquals("cannot initialize module com.puppycrawl.tools.checkstyle.TreeWalker - "
                    + "cannot initialize module com.puppycrawl.tools.checkstyle.checks."
                    + "blocks.RightCurlyCheck - "
                    + "Cannot set property 'option' to 'invalid_option'",
                ex.getMessage(), "Invalid exception message");
        }
    }

    @Test
    public void testRightCurlySameAndLiteralDo() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "LITERAL_DO");
        final String[] expected = {
            "66:9: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 9),
            "71:13: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 13),
            "87:9: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 9),
        };
        verify(checkConfig, getPath("InputRightCurlyTestSameAndLiteralDo.java"), expected);
    }

    @Test
    public void testTryWithResourceSame() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        final String[] expected = {
            "15:9: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 9),
            "28:67: " + getCheckMessage(MSG_KEY_LINE_SAME, "}", 67),
            "39:15: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 15),
            "41:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
        };
        verify(checkConfig, getPath("InputRightCurlyTestTryWithResourceSame.java"), expected);
    }

    @Test
    public void testTryWithResourceAlone() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        final String[] expected = {
            "23:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "28:67: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 67),
            "29:35: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 35),
            "32:64: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 64),
            "32:92: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 92),
            "38:67: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 67),
            "40:15: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 15),
            "42:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
        };
        verify(checkConfig, getPath("InputRightCurlyTestTryWithResourceAlone.java"), expected);
    }

    @Test
    public void testTryWithResourceAloneSingle() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        final String[] expected = {
            "23:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "32:64: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 64),
            "40:15: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 15),
            "42:13: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 13),
        };
        verify(checkConfig, getPath("InputRightCurlyTryWithResourceAloneSingle.java"), expected);
    }

    @Test
    public void testBracePolicyAloneAndSinglelineIfBlocks() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        final String[] expected = {
            "9:32: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 32),
            "11:45: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 45),
            "11:47: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 47),
        };
        verify(checkConfig, getPath("InputRightCurlyTestSinglelineIfBlocks.java"), expected);
    }

    @Test
    public void testRightCurlyIsAloneLambda() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig, getPath("InputRightCurlyTestIsAloneLambda.java"), expected);
    }

    @Test
    public void testRightCurlyIsAloneOrSinglelineLambda() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option",
            RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig,
            getPath("InputRightCurlyTestIsAloneOrSinglelineLambda.java"), expected);
    }

    @Test
    public void testRightCurlyIsSameLambda() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig,
            getPath("InputRightCurlyTestIsSameLambda.java"), expected);
    }

    @Test
    public void testOptionAlone() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, LITERAL_IF, LITERAL_ELSE, "
                + "LITERAL_DO, LITERAL_WHILE, LITERAL_FOR, STATIC_INIT, "
                + "INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "14:15: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 15),
            "15:21: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 21),
            "19:26: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 26),
            "28:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "45:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "49:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "52:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "54:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27),
            "56:17: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 17),
            "58:53: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 53),
            "60:27: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 27),
            "60:52: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 52),
            "73:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "73:11: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 11),
            "77:39: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 39),
            "79:56: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 56),
            "82:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "94:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "97:39: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 39),
            "103:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "103:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
        };
        verify(checkConfig, getPath("InputRightCurlyTestOptionAlone.java"),
                expected);
    }

    @Test
    public void testOptionAloneOrSingleLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, LITERAL_IF, LITERAL_ELSE, "
                + "LITERAL_DO, LITERAL_WHILE, LITERAL_FOR, STATIC_INIT, "
                + "INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "19:26: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 26),
            "28:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "36:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "45:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "49:37: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 37),
            "70:24: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 24),
            "75:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "84:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "84:10: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 10),
        };
        verify(checkConfig, getPath(
                "InputRightCurlyTestOptionAloneOrSingleLine.java"), expected);
    }

    @Test
    public void testBlocksEndingWithSemiOptionSame() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, "
                + "CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "13:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "18:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "24:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "32:29: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 29),
            "38:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "41:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "48:20: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 20),
            "54:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "57:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "62:30: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 30),
            "71:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "71:11: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 11),
            "75:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
        };
        verify(checkConfig, getPath("InputRightCurlyTestOptSameBlocksWithSemi.java"), expected);
    }

    @Test
    public void testBlocksEndingWithSemiOptionAlone() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, "
                + "CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "10:31: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 31),
            "13:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "15:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "18:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "21:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "24:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "32:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "34:40: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 40),
            "38:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "41:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "43:61: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 61),
            "45:19: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 19),
            "48:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
            "50:34: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 34),
            "54:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "57:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "62:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "68:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "68:11: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 11),
            "72:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
        };
        verify(checkConfig, getPath("InputRightCurlyTestOptAloneBlocksWithSemi.java"), expected);
    }

    @Test
    public void testBlocksEndingWithSemiOptionAloneOrSingleLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option",
                RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, "
                + "CTOR_DEF, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF");
        final String[] expected = {
            "13:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "18:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "24:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "32:29: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 29),
            "38:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "41:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "48:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
            "54:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "57:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
            "62:30: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 30),
            "71:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "71:11: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 11),
            "75:5: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 5),
        };
        verify(checkConfig,
                getPath("InputRightCurlyTestOptAloneOrSingleLineBlocksWithSemi.java"), expected);
    }

    @Test
    public void testNewTokensAlone() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "ENUM_DEF");
        final String[] expected = {
            "10:19: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 19),
            "13:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
            "15:34: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 34),
        };
        verify(checkConfig, getPath("InputRightCurlyTestNewTokensAlone.java"), expected);
    }

    @Test
    public void testNewTokensAloneOrSingleLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option",
                RightCurlyOption.ALONE_OR_SINGLELINE.toString());
        checkConfig.addAttribute("tokens", "ENUM_DEF");
        final String[] expected = {
            "13:20: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 20),
        };
        verify(checkConfig, getPath("InputRightCurlyNewTokensAloneOrSingleLine.java"), expected);
    }

    @Test
    public void testNewTokensSame() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "ENUM_DEF");
        final String[] expected = {
            "13:20: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 20),
        };
        verify(checkConfig, getPath("InputRightCurlyTestSameNewTokens.java"), expected);
    }

    @Test
    public void testRightCurlyDoubleBrace() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.ALONE.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR,"
                + "LITERAL_WHILE, STATIC_INIT,"
                + "INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,"
                + "COMPACT_CTOR_DEF");
        final String[] expected = {
            "12:1: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 1),
            "12:2: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 2),
        };
        verify(checkConfig,
                getPath("InputRightCurlyTestDoubleBrace.java"), expected);
    }

    @Test
    public void testRightCurlyEmptyOnSingleLine() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF, LITERAL_FOR,"
                + "LITERAL_WHILE, STATIC_INIT,"
                + "INSTANCE_INIT, ANNOTATION_DEF, ENUM_DEF, INTERFACE_DEF, RECORD_DEF,"
                + "COMPACT_CTOR_DEF");
        final String[] expected = CommonUtil.EMPTY_STRING_ARRAY;
        verify(checkConfig,
                getPath("InputRightCurlyTestEmptyOnSingleLine.java"), expected);
    }

    @Test
    public void testRightCurlyEndOfFile() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "CLASS_DEF, METHOD_DEF, CTOR_DEF,"
                + "LITERAL_FOR, LITERAL_WHILE, STATIC_INIT, INSTANCE_INIT");
        final String[] expected = {
            "14:2: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 2),
            "14:3: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 3),
        };
        verify(checkConfig,
                getPath("InputRightCurlyTestEndOfFile.java"), expected);
    }

    @Test
    public void testRightCurlyRecordsAndCompactCtors() throws Exception {
        final DefaultConfiguration checkConfig = createModuleConfig(RightCurlyCheck.class);
        checkConfig.addAttribute("option", RightCurlyOption.SAME.toString());
        checkConfig.addAttribute("tokens", "RECORD_DEF, COMPACT_CTOR_DEF,"
            + " CTOR_DEF, METHOD_DEF");

        final String[] expected = {
            "20:9: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 9),
            "20:11: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 11),
            "24:21: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 21),
            "29:23: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 23),
            "31:43: " + getCheckMessage(MSG_KEY_LINE_BREAK_BEFORE, "}", 43),
            "38:68: " + getCheckMessage(MSG_KEY_LINE_ALONE, "}", 68),
            };
        verify(checkConfig,
            getNonCompilablePath("InputRightCurlyTestRecordsAndCompactCtors.java"), expected);
    }
}
