////////////////////////////////////////////////////////////////////////////////
// checkstyle: Checks Java source code for adherence to a set of rules.
// Copyright (C) 2001-2022 the original author or authors.
//
// This library is free software; you can redistribute it and/or
// modify it under the terms of the GNU Lesser General Public
// License as published by the Free Software Foundation; either
// version 2.1 of the License, or (at your option) any later version.
//
// This library is distributed in the hope that it will be useful,
// but WITHOUT ANY WARRANTY; without even the implied warranty of
// MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the GNU
// Lesser General Public License for more details.
//
// You should have received a copy of the GNU Lesser General Public
// License along with this library; if not, write to the Free Software
// Foundation, Inc., 59 Temple Place, Suite 330, Boston, MA  02111-1307  USA
////////////////////////////////////////////////////////////////////////////////

package com.puppycrawl.tools.checkstyle.api;

import static com.google.common.truth.Truth.assertWithMessage;

import org.junit.jupiter.api.Test;
import org.junitpioneer.jupiter.DefaultLocale;

import com.puppycrawl.tools.checkstyle.Scope;

/**
 * Test cases for {@link AccessModifier} enumeration.
 */
public class ScopeTest {

    /* Additional test for jacoco, since valueOf()
     * is generated by javac and jacoco reports that
     * valueOf() is uncovered.
     */
    @Test
    public void testScopeValueOf() {
        final AccessModifier scope = AccessModifier.valueOf("PRIVATE");
        assertWithMessage("Invalid scope")
            .that(scope)
            .isEqualTo(AccessModifier.PRIVATE);
    }

    @Test
    public void testMisc() {
        final Scope scope = AccessModifier.getInstance("public");
        assertWithMessage("AccessModifier must not be null")
            .that(scope)
            .isNotNull();
        assertWithMessage("Invalid scope toString")
            .that(scope.toString())
            .isEqualTo("public");
        assertWithMessage("Invalid scope name")
            .that(scope.getName())
            .isEqualTo("public");

        try {
            AccessModifier.getInstance("unknown");
            assertWithMessage("exception expected").fail();
        }
        catch (IllegalArgumentException ex) {
            assertWithMessage("Invalid error message")
                .that(ex.getMessage())
                .isEqualTo("No enum constant com.puppycrawl.tools.checkstyle.AccessModifier.UNKNOWN");
        }
    }

    @Test
    public void testMixedCaseSpaces() {
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("NothinG "))
            .isEqualTo(AccessModifier.NOTHING);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance(" PuBlic"))
            .isEqualTo(AccessModifier.PUBLIC);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance(" ProteCted"))
            .isEqualTo(AccessModifier.PROTECTED);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("    PackAge "))
            .isEqualTo(AccessModifier.PACKAGE);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("privaTe   "))
            .isEqualTo(AccessModifier.PRIVATE);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("AnonInner"))
            .isEqualTo(Scope.ANONINNER);
    }

    @DefaultLocale(language = "tr", country = "TR")
    @Test
    public void testMixedCaseSpacesWithDifferentLocale() {
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("NothinG "))
            .isEqualTo(AccessModifier.NOTHING);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance(" PuBlic"))
            .isEqualTo(AccessModifier.PUBLIC);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance(" ProteCted"))
            .isEqualTo(AccessModifier.PROTECTED);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("    PackAge "))
            .isEqualTo(AccessModifier.PACKAGE);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("privaTe   "))
            .isEqualTo(AccessModifier.PRIVATE);
        assertWithMessage("Invalid scope")
            .that(AccessModifier.getInstance("AnonInner"))
            .isEqualTo(Scope.ANONINNER);
    }

    @Test
    public void testIsInAnonInner() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(Scope.ANONINNER))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(Scope.ANONINNER))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(Scope.ANONINNER))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(Scope.ANONINNER))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(Scope.ANONINNER))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(Scope.ANONINNER))
                .isTrue();
    }

    @Test
    public void testIsInPrivate() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(AccessModifier.PRIVATE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(AccessModifier.PRIVATE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(AccessModifier.PRIVATE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(AccessModifier.PRIVATE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(AccessModifier.PRIVATE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(AccessModifier.PRIVATE))
                .isFalse();
    }

    @Test
    public void testIsInPackage() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(AccessModifier.PACKAGE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(AccessModifier.PACKAGE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(AccessModifier.PACKAGE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(AccessModifier.PACKAGE))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(AccessModifier.PACKAGE))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(AccessModifier.PACKAGE))
                .isFalse();
    }

    @Test
    public void testIsInProtected() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(AccessModifier.PROTECTED))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(AccessModifier.PROTECTED))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(AccessModifier.PROTECTED))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(AccessModifier.PROTECTED))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(AccessModifier.PROTECTED))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(AccessModifier.PROTECTED))
                .isFalse();
    }

    @Test
    public void testIsInPublic() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(AccessModifier.PUBLIC))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(AccessModifier.PUBLIC))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(AccessModifier.PUBLIC))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(AccessModifier.PUBLIC))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(AccessModifier.PUBLIC))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(AccessModifier.PUBLIC))
                .isFalse();
    }

    @Test
    public void testIsInNothing() {
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.NOTHING.isIn(AccessModifier.NOTHING))
                .isTrue();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PUBLIC.isIn(AccessModifier.NOTHING))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PROTECTED.isIn(AccessModifier.NOTHING))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PACKAGE.isIn(AccessModifier.NOTHING))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(AccessModifier.PRIVATE.isIn(AccessModifier.NOTHING))
                .isFalse();
        assertWithMessage("Invalid subscope")
                .that(Scope.ANONINNER.isIn(AccessModifier.NOTHING))
                .isFalse();
    }

}
