<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>RegexpSinglelineJava</title>
  </head>
  <body>
    <section name="RegexpSinglelineJava">
      <p>Since Checkstyle 6.0</p>
      <subsection name="Description" id="Description">
        <div>
          Checks that a specified pattern matches a single-line in Java files.
        </div>
        <p>
          This class is variation on
          <a href="regexpsingleline.html#RegexpSingleline">RegexpSingleline</a> for detecting
          single-lines that match a supplied regular expression in Java files. It supports
          suppressing matches in Java comments.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify the format of the regular expression to match.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>&quot;$.&quot;</code></td>
              <td>5.0</td>
            </tr>
            <tr>
              <td>ignoreCase</td>
              <td>Control whether to ignore case when searching.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.0</td>
            </tr>
            <tr>
              <td>ignoreComments</td>
              <td>Control whether to ignore text in comments when searching.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>5.0</td>
            </tr>
            <tr>
              <td>maximum</td>
              <td>Specify the maximum number of matches required in each file.</td>
              <td><a href="../../property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>5.0</td>
            </tr>
            <tr>
              <td>message</td>
              <td>Specify the message which is used to notify about violations, if empty then default (hard-coded) message is used.</td>
              <td><a href="../../property_types.html#String">String</a></td>
              <td><code>null</code></td>
              <td>6.0</td>
            </tr>
            <tr>
              <td>minimum</td>
              <td>Specify the minimum number of matches required in each file.</td>
              <td><a href="../../property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>5.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example1-config">
          To configure the default check:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example1-code">Example1:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example1 {

  private void testMethod1() {
    int debug = 0;
    System.out.println("");
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example1.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth");
    logger.info("fifth");
  }
}
</code></pre></div>
        <p id="Example2-config">
          To configure the check for calls to <code>System.out.println</code>, except in comments:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;!-- . matches any character, so we need to
           escape it and use \. to match dots. --&gt;
      &lt;property name="format" value="System\.out\.println"/&gt;
      &lt;property name="ignoreComments" value="true"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example2-code">Example2:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example2 {

  private void testMethod1() {
    int debug = 0;
    System.out.println(""); // violation, 'Line matches the illegal pattern'
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example2.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth"); // violation, 'Line matches the illegal pattern'
    logger.info("fifth");
  }
}
</code></pre></div>
        <p id="Example3-config">
          To configure the check to find case-insensitive occurrences of
          &quot;debug&quot;:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;property name="format" value="debug"/&gt;
      &lt;property name="ignoreCase" value="true"/&gt;
      &lt;property name="ignoreComments" value="true"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example3-code">Example3:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example3 {

  private void testMethod1() {
    int debug = 0; // violation, 'Line matches the illegal pattern'
    System.out.println("");
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example3.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth");
    logger.info("fifth");
  }
}
</code></pre></div>
        <p id="Example4-config">
          To configure the check to find occurrences of
          &quot;\.read(.*)|\.write(.*)&quot;
          and display &quot;IO found&quot; for each violation.
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;property name="format" value="\.read(.*)|\.write(.*)"/&gt;
      &lt;property name="message" value="IO found"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example4-code">Example4:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example4 {

  private void testMethod1() {
    int debug = 0;
    System.out.println("");
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read(); // violation, 'IO found'
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read(); // violation, 'IO found'
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something"); // violation, 'IO found'
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example3.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth");
    logger.info("fifth");
  }
}
</code></pre></div>
        <p id="Example5-config">
          To configure the check to find occurrences of
          &quot;\.log(.*)&quot;. We want to allow a maximum of 2 occurrences.
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;property name="format" value="\.info(.*)"/&gt;
      &lt;property name="maximum" value="2"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example5-code">Example5:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example5 {

  private void testMethod1() {
    int debug = 0;
    System.out.println("");
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example5.class.getName());
    logger.info("first");
    logger.info("second"); // violation, 'Line matches the illegal pattern'
    logger.info("third");  // violation, 'Line matches the illegal pattern'
    System.out.println("fourth");
    logger.info("fifth");  // violation, 'Line matches the illegal pattern'
  }
}
</code></pre></div>
        <p id="Example6-config">
          To configure the check to find all occurrences of
          &quot;public&quot;. We want to ignore comments,
          display &quot;public member found&quot; for each violation
          and say if less than 1 occurrences.
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;property name="format" value="public"/&gt;
      &lt;property name="minimum" value="1"/&gt;
      &lt;property name="message" value="public member found"/&gt;
      &lt;property name="ignoreComments" value="true"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example6-code">Example6:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example6 {

  private void testMethod1() {
    int debug = 0;
    System.out.println("");
    System.out.
    println("");
  }

  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }
  // violation below, 'public member found'
  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example1.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth");
    logger.info("fifth");
  }
}
</code></pre></div>
        <p id="Example7-config">
          To configure the check to find all occurrences of
          &quot;private&quot;. We want to ignore comments,
          display &quot;private member found&quot; for each violation
          and say if less than 2 occurrences.
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="RegexpSinglelineJava"&gt;
      &lt;property name="format" value="private"/&gt;
      &lt;property name="minimum" value="2"/&gt;
      &lt;property name="message" value="private member found"/&gt;
      &lt;property name="ignoreComments" value="true"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>
        <p id="Example7-code">Example7:</p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class Example7 {
  // violation below, 'private member found'
  private void testMethod1() {
    int debug = 0;
    System.out.println("");
    System.out.
    println("");
  }
  // violation below, 'private member found'
  private void testMethod2() throws IOException {
    FileReader in = new FileReader("path/to/input");
    int ch = in.read();
    while(ch != -1) {
      System.out.print((char)ch);
      ch = in.read();
    }

    FileWriter out = new FileWriter("path/to/output");
    out.write("something");
  }

  public void testMethod3(){
    final Logger logger = Logger.getLogger(Example1.class.getName());
    logger.info("first");
    logger.info("second");
    logger.info("third");
    System.out.println("fourth");
    logger.info("fifth");
  }
}
</code></pre></div>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+RegexpSinglelineJava">
            Checkstyle Style</a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%20path%3A**%2Fgoogle_checks.xml+repo%3Acheckstyle%2Fcheckstyle+RegexpSinglelineJava">
            Google Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fregexp%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22regexp.exceeded%22">
              regexp.exceeded
            </a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fregexp%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22regexp.minimum%22">
              regexp.minimum
            </a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.regexp
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
