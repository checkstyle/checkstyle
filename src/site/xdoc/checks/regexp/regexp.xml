<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>Regexp</title>
  </head>
  <body>
    <section name="Regexp">
      <p>Since Checkstyle 4.0</p>
      <subsection name="Description" id="Description">
        <div>
          Checks that a specified pattern exists, exists less
          than a set number of times, or does not exist in the file.
        </div>
        <p>
          This check combines all the functionality provided by
          <a href="../header/regexpheader.html#RegexpHeader">RegexpHeader</a>
          except supplying the regular expression from a file.
        </p>
        <p>
          It differs from them in that it works in multiline mode.
          Its regular expression can span multiple lines and it checks this
          against the whole file at once.
          The others work in single-line mode.
          Their single or multiple regular expressions can only span one line.
          They check each of these against each line in the file in turn.
        </p>
        <p>
          <b>Note:</b> Because of the different mode of operation there may be
          some changes in the regular expressions used to achieve a particular end.
        </p>
        <p>In multiline mode...</p>
        <ul>
          <li> <code>^</code> means the beginning of a line, as opposed to beginning of the
              input.</li>
          <li> For beginning of the input use <code>\A</code>.</li>
          <li> <code>$</code> means the end of a line, as opposed to the end of the input.</li>
          <li> For end of input use <code>\Z</code>.</li>
          <li> Each line in the file is terminated with a line feed character.</li>
        </ul>
        <p>
          <b>Note:</b> Not all regular expression engines are created equal. Some provide extra
          functions that others do not and some elements of the syntax may vary.
          This check makes use of the
          <a href="https://docs.oracle.com/en/java/javase/11/docs/api/java.base/java/util/regex/package-summary.html">
          java.util.regex package</a>; please check its documentation for
          details of how to construct a regular expression to achieve a particular
          goal.
        </p>
        <p>
          <b>Note:</b> When entering a regular expression as a parameter in the
          XML config file you must also take into account the XML rules. e.g. if
          you want to match a &lt; symbol you need to enter &amp;lt;. The regular
          expression should be entered on one line.
        </p>
        <p><b>Note:</b> To search for parentheses () in a regular expression
          you must escape them like \(\). This is required by the regexp engine,
          otherwise it will think they are special instruction characters.
        </p>
        <p><b>Note:</b> To search for things that mean something in XML, like
          &lt; you need to escape them like &amp;lt;. This is required so the
          XML parser does not act on them, but instead passes the correct
          character to the regexp engine.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>duplicateLimit</td>
              <td>Control whether to check for duplicates of a required pattern, any negative value means no checking for duplicates, any positive value is used as the maximum number of allowed duplicates, if the limit is exceeded violations will be logged.</td>
              <td><a href="../../property_types.html#int">int</a></td>
              <td><code>0</code></td>
              <td>4.0</td>
            </tr>
            <tr>
              <td>errorLimit</td>
              <td>Specify the maximum number of violations before the check will abort.</td>
              <td><a href="../../property_types.html#int">int</a></td>
              <td><code>100</code></td>
              <td>4.0</td>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify the pattern to match against.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>&quot;^$&quot;</code></td>
              <td>4.0</td>
            </tr>
            <tr>
              <td>ignoreComments</td>
              <td>Control whether to ignore matches found within comments.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>4.0</td>
            </tr>
            <tr>
              <td>illegalPattern</td>
              <td>Control whether the pattern is required or illegal.</td>
              <td><a href="../../property_types.html#boolean">boolean</a></td>
              <td><code>false</code></td>
              <td>4.0</td>
            </tr>
            <tr>
              <td>message</td>
              <td>Specify message which is used to notify about violations, if empty then the default (hard-coded) message is used.</td>
              <td><a href="../../property_types.html#String">String</a></td>
              <td><code>null</code></td>
              <td>4.0</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example0-config"> Default configuration does nothing: </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;/&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example1-config">
          An example of how to configure the check to make sure a copyright
          statement is included in the file:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;// This code is copyrighted\.&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example1-code"> Example1: </p>
        <source>
// This code is copyrighted.
public class Example1 {}
        </source>
        <p id="Example2-code">Example2 with violation:</p>
        <source>
/* violation on first line 'Required pattern missing in a file.' */
/*
 * Some Copyright
 */
public class Example2 {}
        </source>
        <p id="Example3-config"> Your statement may be multiline. </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot;
        value=&quot;// This code is copyrighted\n// \(c\) MyCompany&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example3-code">Example3:</p>
        <source>
// This code is copyrighted
// (c) MyCompany
public class Example3 {}
        </source>
        <p id="Example4-config">Configure Check to make sure that it appear only once:</p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot;
        value=&quot;// This code is copyrighted\n// \(c\) MyCompany&quot;/&gt;
      &lt;property name=&quot;duplicateLimit&quot; value=&quot;0&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example4-code">Example4:</p>
        <source>
// This code is copyrighted
// (c) MyCompany
public class Example4 {}

// violation below 'Found duplicate pattern'
// This code is copyrighted
// (c) MyCompany
class Example41 {}
        </source>
        <p id="Example5-config">Instead of printing whole regexp that might be unnecessary for
          user, you can substitute it to some static text:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot;
        value=&quot;// This code is copyrighted\n// \(c\) MyCompany&quot;/&gt;
      &lt;property name=&quot;message&quot; value=&quot;Copyright&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example5-code">Example5 with violation:</p>
        <source>
/*
 * violation on first line 'Required pattern 'Copyright' missing in file.'
*/
public class Example5 {}
        </source>

        <p id="Example6-config">
          Configure the check to make sure there are no calls to <code>System.out.println</code>:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;System\.out\.println&quot;/&gt;
      &lt;property name=&quot;illegalPattern&quot; value=&quot;true&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example6-code">Example6:</p>
        <source>
public class Example6 {
  private void foo() {
    System.out.println(&quot;&quot;); // violation, 'Line matches the illegal pattern'
    System.out.
      println(&quot;&quot;);
    // System.out.println(&quot;debug&quot;);
    // violation above, 'Line matches the illegal pattern'
  }
}
        </source>
        <p id="Example7-config">Configure to ignore comments:</p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;System\.out\.println&quot;/&gt;
      &lt;property name=&quot;illegalPattern&quot; value=&quot;true&quot;/&gt;
      &lt;property name=&quot;ignoreComments&quot; value=&quot;true&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example7-code">Example7:</p>
        <source>
public class Example7 {
  private void foo() {
    System.out.println(&quot;&quot;); // violation, 'Line matches the illegal pattern'
    System.out.
            println(&quot;&quot;);
    // System.out.println(&quot;debug&quot;);

  }
}
        </source>
        <p id="Example8-config">
          Configure the check to find trailing whitespace at the end of a line:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;[ \t]+$&quot;/&gt;
      &lt;property name=&quot;illegalPattern&quot; value=&quot;true&quot;/&gt;
      &lt;property name=&quot;message&quot; value=&quot;Trailing whitespace&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example8-code">Example8:</p>
        <source>
public class Example8 {
  private void foo() { 
    // violation above 'Trailing whitespace'
  }
}
        </source>
        <p id="Example9-config">
          Configure the check to find case-insensitive occurrences of &quot;debug&quot;:
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;(?i)fix me\.&quot;/&gt;
      &lt;property name=&quot;illegalPattern&quot; value=&quot;true&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p>
          <b>Note:</b> The (?i) at the beginning of the regular expression
          tells the regexp engine to ignore the case.
        </p>
        <p id="Example9-code">Example9:</p>
        <source>
public class Example9 {
  private void foo() {
    // fix me.
    // violation above, 'Line matches the illegal pattern.'
  }
}
        </source>
        <p id="Example10-config">
          There is also a feature to limit the number of violations reported.
          When the limit is reached the check aborts with a message
          reporting that the limit has been reached.
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property name=&quot;format&quot; value=&quot;(?i)fix me\.&quot;/&gt;
      &lt;property name=&quot;illegalPattern&quot; value=&quot;true&quot;/&gt;
      &lt;property name=&quot;errorLimit&quot; value=&quot;1&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example10-code">Example10:</p>
        <source>
public class Example10 {
  private void foo() {
    // fix me.
    // violation above, 'Line matches the illegal pattern'
  }
  private void foo1() {
    // fix me.

  }
}
        </source>
        <p id="Example11-config">
          To configure the check to verify that each file has the
          multiline header where year could be any digits.
        </p>
        <source>
&lt;module name=&quot;Checker&quot;&gt;
  &lt;module name=&quot;TreeWalker&quot;&gt;
    &lt;module name=&quot;Regexp&quot;&gt;
      &lt;property
        name=&quot;format&quot;
        value=&quot;// Copyright \(C\) \d\d\d\d MyCompany\n// All rights reserved&quot;/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
        </source>
        <p id="Example11-code">Example:</p>
        <source>
// Copyright (C) 2004 MyCompany
// All rights reserved
public class Example11 {}
        </source>
        <p>
          To configure the check to verify that each file start with the
          multiline header, you should append '\A' to 'regexp' at left.
        </p>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+Regexp">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fregexp%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22duplicate.regexp%22">
              duplicate.regexp
            </a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fregexp%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22illegal.regexp%22">
              illegal.regexp
            </a>
          </li>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%2Fregexp%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22required.regexp%22">
              required.regexp
            </a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.regexp
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
