<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>TrailingComment</title>
  </head>
  <body>
    <section name="TrailingComment">
      <p>Since Checkstyle 3.4</p>
      <subsection name="Description" id="Description">
        <div>
          The check to ensure that lines with code do not end with comment.
          For the case of <code>//</code> comments that means that the only thing
          that should precede it is whitespace. It doesn't check comments if
          they do not end a line; for example, it accepts the following:
          <code>Thread.sleep( 10 /*some comment here*/ );</code> Format
          property is intended to deal with the <code>} // while</code> example.
        </div>

        <p>
          Rationale: Steve McConnell in <cite>Code Complete</cite> suggests that
          endline comments are a bad practice. An end line comment would be
          one that is on the same line as actual code. For example:
        </p>

        <source>
a = b + c;      // Some insightful comment
d = e / f;        // Another comment for this line
        </source>

        <p>
          Quoting <cite>Code Complete</cite> for the justification:
        </p>

        <ul>
          <li> &quot;The comments have to be aligned so that they do not
          interfere with the visual structure of the code. If you don't align
          them neatly, they'll make your listing look like it's been through a
          washing machine.&quot;
          </li>
          <li> &quot;Endline comments tend to be hard to format...It takes
          time to align them. Such time is not spent learning more about the
          code; it's dedicated solely to the tedious task of pressing the
          spacebar or tab key.&quot;
          </li>
          <li> &quot;Endline comments are also hard to maintain. If the code
          on any line containing an endline comment grows, it bumps the
          comment farther out, and all the other endline comments will have to
          bumped out to match. Styles that are hard to maintain aren't
          maintained....&quot;
          </li>
          <li> &quot;Endline comments also tend to be cryptic. The right side
          of the line doesn't offer much room and the desire to keep the
          comment on one line means the comment must be short. Work then goes
          into making the line as short as possible instead of as clear as
          possible. The comment usually ends up as cryptic as
          possible....&quot;
          </li>
          <li> &quot;A systemic problem with endline comments is that it's
          hard to write a meaningful comment for one line of code. Most
          endline comments just repeat the line of code, which hurts more than
          it helps.&quot;
          </li>
        </ul>

        <p>
          McConnell's comments on being hard to maintain when the size of the line
          changes are even more important in the age of automated
          refactorings.
        </p>
      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <table>
            <tr>
              <th>name</th>
              <th>description</th>
              <th>type</th>
              <th>default value</th>
              <th>since</th>
            </tr>
            <tr>
              <td>format</td>
              <td>Specify pattern for strings allowed before the comment.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>&quot;^[\s});]*$&quot;</code></td>
              <td>3.4</td>
            </tr>
            <tr>
              <td>legalComment</td>
              <td>Define pattern for text allowed in trailing comments. This pattern will not be applied to multiline comments.</td>
              <td><a href="../../property_types.html#Pattern">Pattern</a></td>
              <td><code>null</code></td>
              <td>4.2</td>
            </tr>
          </table>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p id="Example1-config">
          To configure the check:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="TrailingComment"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>

        <p id="Example1-code">
          Example:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
public class Example1 {
  public static void main(String[] args) {
    int x = 10;
    // OK
    if (/* OK */ x &gt; 5) {}
    int a = 5; // violation
    doSomething(
            "param1"
    ); // OK, by default such trailing of method/code-block ending is allowed

  }

  private static void doSomething(String param) {
  }
}
</code></pre></div>

        <p id="Example2-config">
          To configure the check to enforce only comment on a line:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="TrailingComment"&gt;
      &lt;property name="format" value="^\s*$"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>

        <p id="Example2-code">
          Example:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
public class Example2 {
  public static void main(String[] args) {
    int x = new Random().nextInt(100);
    // OK
    if (/* OK, this comment does not end the line */ x &gt; 5) {}
    int a = 5; // violation, line content before comment should match pattern "^\s*$"
    doSomething(
            "param1"
    ); // violation, line content before comment should match pattern "^\s*$"
  }

  private static void doSomething(String param) {
  }
}
</code></pre></div>

        <p id="Example3-config">
          To configure check so that trailing comment with exact comments like
          &quot;SUPPRESS CHECKSTYLE&quot;, &quot;NOPMD&quot;, &quot;NOSONAR&quot;
          are suppressed:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="TrailingComment"/&gt;
    &lt;module name="SuppressionXpathSingleFilter"&gt;
      &lt;property name="checks" value="TrailingCommentCheck"/&gt;
      &lt;property name="query" value="//SINGLE_LINE_COMMENT
        [./COMMENT_CONTENT[@text=' NOSONAR\n' or @text=' NOPMD\n'
        or @text=' SUPPRESS CHECKSTYLE\n']]"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>

        <p id="Example3-code">
          Example for trailing comments check to suppress specific trailing comment:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
public class Example3 {
  int a; // SUPPRESS CHECKSTYLE
  int b; // NOPMD
  int c; // NOSONAR
  int d; // violation, not suppressed
}
</code></pre></div>

        <p id="Example4-config">
          To configure check so that trailing comment starting with &quot;SUPPRESS CHECKSTYLE&quot;,
          &quot;NOPMD&quot;, &quot;NOSONAR&quot; are suppressed:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="TrailingComment"/&gt;
    &lt;module name="SuppressionXpathSingleFilter"&gt;
      &lt;property name="checks" value="TrailingCommentCheck"/&gt;
      &lt;property name="query" value="//SINGLE_LINE_COMMENT
        [./COMMENT_CONTENT[starts-with(@text, ' NOPMD')]]"/&gt;
      &lt;property name="query" value="//SINGLE_LINE_COMMENT
        [./COMMENT_CONTENT[starts-with(@text, ' SUPPRESS CHECKSTYLE')]]"/&gt;
      &lt;property name="query" value="//SINGLE_LINE_COMMENT
        [./COMMENT_CONTENT[starts-with(@text, ' NOSONAR')]]"/&gt;
    &lt;/module&gt;
  &lt;/module&gt;
&lt;/module&gt;
</code></pre></div>

        <p id="Example4-code">
          Example:
        </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
public class Example4 {
  int a; // SUPPRESS CHECKSTYLE - OK, comment starts with " SUPPRESS CHECKSTYLE"
  int b; // NOPMD - OK, comment starts with " NOPMD"
  int c; // NOSONAR - OK, comment starts with " NOSONAR"
  int d; // violation, not suppressed
}
</code></pre></div>

      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+TrailingComment">
            Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fresources%2Fcom%2Fpuppycrawl%2Ftools%2Fcheckstyle%2Fchecks%20path%3A**%2Fmessages*.properties+repo%3Acheckstyle%2Fcheckstyle+%22trailing.comments%22">
              trailing.comments
            </a>
          </li>
        </ul>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <p>
          <a href="../../config.html#TreeWalker">TreeWalker</a>
        </p>
      </subsection>
    </section>
  </body>
</document>
