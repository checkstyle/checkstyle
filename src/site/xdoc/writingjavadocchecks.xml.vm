<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

  <head>
    <title>Writing Javadoc Checks</title>
  </head>

  <body>
    <section name="Content">
      <macro name="toc">
        <param name="fromDepth" value="1"/>
        <param name="toDepth" value="1"/>
      </macro>
    </section>

    <section name="What is Javadoc comment">
      <p>
      Javadoc comment is a multiline comment <code>/*  */</code> that starts with the <b>*</b>
      character and placed above the class definition, interface definition, enum definition,
      method definition or field definition.
      If an annotation precedes any of the definitions listed above, then the javadoc comment
      should be placed before the annotation.
      If several multiline comments with javadoc identifiers are placed sequentially, only
      the one closest to the definition, right above it, with the javadoc identifier will be used.
      </p>
      <p>
        Javadoc comments should contain: a short summary (the first sentence), an optional
        documentation section, an optional tag section. The first sentence has a special meaning
        and should be clear, punchy, short, and is ended by a period symbol.
        Immediately after the first sentence, the main description could begin,
        which may be followed by the tag section. The tag section starts with the first block tag,
        which is defined by the first <code>@</code> character that begins a line
        (ignoring leading asterisks, white space, and leading separator <code>/**</code>).
      </p>
      <p>For example, here is java file:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
/**
 * My <b>class</b>.
 *
 * @see Annotation
 */
public class MyClass {

  /** Not a javadoc (ignored). */

  /**
   * Doubles the value.
   * The long and detailed explanation what the method does.
   *
   * @param value for doubling.
   * @return double value.
   */

  /*
   Multiline comment (ignored).
  */
  @Annotation
  /** Extra javadoc (ignored). */
  // Single line comment (ignored).
  public int method(int value) {
    /** Inner javadoc (ignored). */
    return value * 2;
  }
}
      ]]></code></pre></div>
      <p>Javadoc content for the MyClass will be:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
    My <b>class</b>.

    @see Annotation
      ]]></code></pre></div>
      <p>Javadoc content for the MyClass.method will be:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
    Doubles the value.
    The long and detailed explanation what the method does.

    @param value for doubling.
    @return double value.
      ]]></code></pre></div>
      <p>
      Attention that java comment starts with <code>/*</code>, following with Identifier of
      comment type. Javadoc Identifier is <code>*</code>. All symbols after Javadoc
      Identifier till <code>*/</code> are part of javadoc comment.
      </p>
      <p>Please note that javadoc-like (multiline comment with javadoc identifier) comment inside
      a method is not a javadoc comment and skipped by Sun/Oracle javadoc tool and by our javadoc
      comment matcher, but such comment will be in AST.
      </p>
      <p>
        You can find different types of documentation generation tools similar to javadoc on the
        Internet. Such tools rely on specific Identifier: "!", "#", "$".
        Comments look like <code>"/*! some comment */"</code> , <code>"/*# some comment */"</code> ,
        <code>"/*$ some comment */"</code>. Such multiline comments are not a javadoc.
      </p>
    </section>

    <section name="Limitations">
      <p>
      Since Oracle itself does not provide a comprehensive language specification for Javadocs,
      we have interpreted the existing behavior of the Javadoc tool and accepted standards
      to form our Javadoc grammar and Abstract Syntax Tree (AST). For this reason, we must
      impose the following limitations on Javadoc parsing and checks.
      </p>
      <p>
      The comment should be written in <a href="#Tight-HTML_rules">Tight-HTML</a>
          to build ASTs that most Checks expect.
      </p>
      <p>
        For more details about parsing of HTML into AST read
        <a href="#HTML_Code_In_Javadoc_Comments">HTML Code In Javadoc Comments</a>
        and <a href="#Javadoc_parser_behavior_for_current_HTML_version_and_new_HTML_version">
          Javadoc parser behavior
        </a>  section.
      </p>
    </section>

    <section name="Tight-HTML rules">
      <p>
        Every HTML tag should have matching end HTML tag or it is a
        <a href="https://www.w3.org/TR/html/syntax.html#void-elements">void element</a>.
      </p>
      <p>
        The only exceptions are HTML 4 tags whose end tag is optional (omittable) by
        HTML specification (example is
        <a href="https://www.w3.org/TR/html5/tabular-data.html#the-tr-element">TR</a>), so,
        Checkstyle won't show an error about missing end tags, however,
        it leads to broken Tight-HTML structure and as a result leads to non-nested content
        of the HTML tags in the Abstract Syntax Tree of the Javadoc comment.
        <br/>
        In other words, if HTML tags are not closed in Javadoc, our parser cannot determine the
        content of these tags, so structure of the parse tree will not be nested like it is while
        using <a href="#Tight-HTML_rules">Tight-HTML</a>.
      </p>
      <p>
        When a non-tight tag is encountered, the parser treats all subsequent text up to
        the next opening tag as the content of that unclosed tag. Once a new tag appears,
        it starts a new subtree instead of nesting inside the previous one,
        breaking the expected hierarchical structure of the AST.
      </p>
      <p>
      Other rules:
      </p>
      <ul>
        <li>Document Structure elements (DOCTYPE, &lt;html&gt;, &lt;body&gt;, etc) are
            not mandatory.</li>
        <li>Elements must always be closed, except HTML4 elements whose end tag is optional
          (omittable) and HTML4
          <a href="https://www.w3.org/TR/html/syntax.html#void-elements">void elements</a>.
          See <a href="#HTML_Code_In_Javadoc_Comments">HTML Code In Javadoc Comments</a>
          section
        </li>
        <li>HTML elements can be either in lowercase or in uppercase</li>
        <li>Attribute names can be either in lowercase or in uppercase</li>
        <li>Attribute values can be either quoted or not be quoted</li>
      </ul>
    </section>

    <section name="How to create Javadoc Check">
      <p>
        Writing Javadoc Checks is similar to writing Java Checks, however you should extend
        AbstractJavadocCheck and use JavadocCommentsTokenTypes.
      </p>
      <p>
      To start implementing new Check create a new class and extend <a
      href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html">
          AbstractJavadocCheck</a>.
      It has two abstract methods you should implement:
      </p>
      <ul>
        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getDefaultJavadocTokens--">
              getDefaultJavadocTokens()</a> - return int array of
          javadoc token types your Check is going to process.
          The array should contain int constants from
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html">
          JavadocCommentsTokenTypes</a> class. (There is also
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html">
              TokenTypes</a> class in Checkstyle. Make sure you use
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html">
              JavadocCommentsTokenTypes</a> class in your Check, because the
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/TokenTypes.html">
              TokenTypes</a> is used to describe standard Java
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/DetailAST.html">
              DetailAST</a> token type.)
        </li>
        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#visitJavadocToken-com.puppycrawl.tools.checkstyle.api.DetailNode-">
          visitJavadocToken(DetailNode)</a> - it's a place you should put tree nodes processing.
          The argument is Javadoc tree node of type you described before in
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getDefaultJavadocTokens--">
              getDefaultJavadocTokens()</a> method.
        </li>
      </ul>
    </section>

    <section name="Difference between Java Grammar and Javadoc comments Grammar">
      <p>
        Our Java parser parses all multiline comments (C-style comments and Javadoc comments)
        as block comments, whether they are Javadocs or not. Our Javadoc parser then transforms
        these block comment ASTs into our Javadoc AST.
      </p>
      <p>
        Our Java grammar ignores whitespace and newlines in most cases, since java
        itself does not care about whitespace; however, whitespace is critical in Javadocs.
         For this reason, our Javadoc AST retains most whitespace that is present in the Javadoc.
        (Empty
          <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html#TEXT">
          TEXT</a>,
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html#NEWLINE">
            NEWLINE</a>).
      </p>
    </section>

    <section name="Tool to print Javadoc tree structure">
      <p>
      Checkstyle can print a combined Java and Javadoc Abstract Syntax Tree. You need to run the
      checkstyle jar file with the <b>-J</b> argument, providing a java file.
      </p>
      <p>For example, here is MyClass.java file:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
/**
 * My <b>class</b>.
 * @see AbstractClass
 */
public class MyClass {

}
      ]]></code></pre></div>
      <p>Command:</p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -jar checkstyle-X.XX-all.jar -J MyClass.java
        </code></pre></div>
      </div>
      <p>Output:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
COMPILATION_UNIT -> COMPILATION_UNIT [5:0]
`--CLASS_DEF -> CLASS_DEF [5:0]
    |--MODIFIERS -> MODIFIERS [5:0]
    |--BLOCK_COMMENT_BEGIN -> /* [1:0]
    |   |--COMMENT_CONTENT -> *\r\n * My <b>class</b>.\r\n * @see AbstractClass\r\n  [1:2]
    |   |   `--JAVADOC_CONTENT -> JAVADOC_CONTENT [1:3]
    |   |       |--NEWLINE -> \r\n [1:3]
    |   |       |--LEADING_ASTERISK ->  * [2:0]
    |   |       |--TEXT ->  My  [2:2]
    |   |       |--HTML_ELEMENT -> HTML_ELEMENT [2:6]
    |   |       |   |--HTML_TAG_START -> HTML_TAG_START [2:6]
    |   |       |   |   |--TAG_OPEN -> < [2:6]
    |   |       |   |   |--TAG_NAME -> b [2:7]
    |   |       |   |   `--TAG_CLOSE -> > [2:8]
    |   |       |   |--HTML_CONTENT -> HTML_CONTENT [2:9]
    |   |       |   |   `--TEXT -> class [2:9]
    |   |       |   `--HTML_TAG_END -> HTML_TAG_END [2:14]
    |   |       |       |--TAG_OPEN -> < [2:14]
    |   |       |       |--TAG_SLASH -> / [2:15]
    |   |       |       |--TAG_NAME -> b [2:16]
    |   |       |       `--TAG_CLOSE -> > [2:17]
    |   |       |--TEXT -> . [2:18]
    |   |       |--NEWLINE -> \r\n [2:19]
    |   |       |--LEADING_ASTERISK ->  * [3:0]
    |   |       |--TEXT ->   [3:2]
    |   |       |--JAVADOC_BLOCK_TAG -> JAVADOC_BLOCK_TAG [3:3]
    |   |       |   `--SEE_BLOCK_TAG -> SEE_BLOCK_TAG [3:3]
    |   |       |       |--AT_SIGN -> @ [3:3]
    |   |       |       |--TAG_NAME -> see [3:4]
    |   |       |       |--TEXT ->   [3:7]
    |   |       |       `--REFERENCE -> REFERENCE [3:8]
    |   |       |           `--IDENTIFIER -> AbstractClass [3:8]
    |   |       |--NEWLINE -> \r\n [3:21]
    |   |       `--TEXT ->   [4:0]
    |   `--BLOCK_COMMENT_END -> */ [4:1]
    |--LITERAL_CLASS -> class [5:0]
    |--IDENT -> MyClass [5:6]
    `--OBJBLOCK -> OBJBLOCK [5:14]
        |--LCURLY -> { [5:14]
        `--RCURLY -> } [7:0]
      ]]></code></pre></div>
      <p>
        In most cases while developing Javadoc Checks, you need to only parse the tree of the exact
        Javadoc comment. To do that just copy Javadoc comment to a separate file and remove
        <b>/**</b> at the beginning and <b>*/</b> at the end. After that, run checkstyle with
        <b>-j</b> argument.
      </p>
      <p>MyJavadocComment.javadoc file:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
 * My <b>class</b>.
 * @see AbstractClass
      ]]></code></pre></div>
      <p>Command:</p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -jar checkstyle-X.XX-all.jar \
          &#xa0;&#xa0;&#xa0;&#xa0;-j MyJavadocComment.javadoc
        </code></pre></div>
      </div>
      <p>Output:</p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
|--LEADING_ASTERISK -> * [0:0]
|--TEXT ->  My  [0:1]
|--HTML_ELEMENT -> HTML_ELEMENT [0:5]
|   |--HTML_TAG_START -> HTML_TAG_START [0:5]
|   |   |--TAG_OPEN -> < [0:5]
|   |   |--TAG_NAME -> b [0:6]
|   |   `--TAG_CLOSE -> > [0:7]
|   |--HTML_CONTENT -> HTML_CONTENT [0:8]
|   |   `--TEXT -> class [0:8]
|   `--HTML_TAG_END -> HTML_TAG_END [0:13]
|       |--TAG_OPEN -> < [0:13]
|       |--TAG_SLASH -> / [0:14]
|       |--TAG_NAME -> b [0:15]
|       `--TAG_CLOSE -> > [0:16]
|--TEXT -> . [0:17]
|--NEWLINE -> \r\n [0:18]
|--LEADING_ASTERISK -> * [1:0]
|--TEXT ->   [1:1]
`--JAVADOC_BLOCK_TAG -> JAVADOC_BLOCK_TAG [1:2]
    `--SEE_BLOCK_TAG -> SEE_BLOCK_TAG [1:2]
        |--AT_SIGN -> @ [1:2]
        |--TAG_NAME -> see [1:3]
        |--TEXT ->   [1:6]
        `--REFERENCE -> REFERENCE [1:7]
            `--IDENTIFIER -> AbstractClass [1:7]
      ]]></code></pre></div>
    </section>

    <section name="Access Java AST from Javadoc Check">
      <p>
        As you already know the Javadoc AST is a result of parsing a block comment.
        There is a method to get the original block comment from a Javadoc Check.
        You may need this block comment to check its position in the
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/DetailAST.html">DetailAST</a> tree.
      </p>
      <p>
        For example, to write a JavadocCheck that verifies @param tags in the Javadoc comment of
        a method definition, you also need all of the method's parameter names. To get a method
        definition AST you should access the
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/DetailAST.html">DetailAST</a> tree
        from a javadoc Check. For this purpose use the
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getBlockCommentAst--">
            getBlockCommentAst()</a>
        method that returns a
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/DetailAST.html">DetailAST</a> node.
      </p>
      <p>
        Example:
      </p>
      <div class="wrapper"><pre class="prettyprint"><code class="language-java">
class MyCheck extends AbstractJavadocCheck {

    @Override
    public int[] getDefaultJavadocTokens() {
        return new int[]{JavadocCommentsTokenTypes.PARAMETER_NAME};
    }

    @Override
    public void visitJavadocToken(DetailNode paramNameNode) {
        String javadocParamName = paramNameNode.getText();
        DetailAST blockCommentAst = getBlockCommentAst();

        if (BlockCommentPosition.isOnMethod(blockCommentAst)) {

            DetailAST methodDef = blockCommentAst.getParent();
            DetailAST methodParam = findMethodParameter(methodDef);
            String methodParamName = methodParam.getText();

            if (!javadocParamName.equals(methodParamName)) {
                log(methodParam, "params.dont.match");
            }

        }
    }
}
      </code></pre></div>
    </section>

    <section name="HTML Code In Javadoc Comments">
      <p>
        Checkstyle supports all HTML tags in Javadoc comments, including
        <a href="https://www.w3.org/TR/html4/index/elements.html">HTML4 elements</a>
        and newer HTML5 tags.
        All tags are recognized by the Javadoc parser and represented using a generic
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html#HTML_ELEMENT">
          HTML_ELEMENT
        </a>
        token type, instead of specific token types for individual tags.
      </p>
      <p>
        HTML4 defines two important categories of tags:
        elements whose end tag is optional (omittable) and
        <a href="https://www.w3.org/TR/html/syntax.html#void-elements">void elements</a>
        (also known as <a href="https://www.w3schools.com/html/html_elements.asp">empty HTML tags</a>,
        such as the
        <a href="https://www.w3.org/TR/html4/struct/text.html#edef-BR">BR tag</a>).
      </p>
      <p>
        HTML4 elements whose end tag is optional (omittable): &lt;P&gt;, &lt;LI&gt;, &lt;TR&gt;,
        &lt;TD&gt;, &lt;TH&gt;, &lt;BODY&gt;, &lt;COLGROUP&gt;, &lt;DD&gt;, &lt;DT&gt;,
        &lt;HEAD&gt;, &lt;HTML&gt;, &lt;OPTION&gt;, &lt;TBODY&gt;, &lt;THEAD&gt;, &lt;TFOOT&gt;.
      </p>
      <p>
        Void HTML4 elements: &lt;AREA&gt;, &lt;BASE&gt;, &lt;BASEFONT&gt;, &lt;BR&gt;, &lt;COL&gt;,
        &lt;FRAME&gt;, &lt;HR&gt;, &lt;IMG&gt;, &lt;INPUT&gt;, &lt;ISINDEX&gt;, &lt;LINK&gt;,
        &lt;META&gt;, &lt;PARAM&gt;.
      </p>
      <p>
        If a tag is unclosed and not a void element, it is considered
        <strong>non-tight</strong>. Non-tight tags prevent the Checkstyle Javadoc parser
        from creating nested AST structures. Always follow
        <a href="#Tight-HTML_rules">Tight-HTML rules</a> to make the
        Checkstyle javadoc parser create nested ASTs.
      </p>

        <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<audio><source src="horse.ogg" type="audio/ogg"/></audio>
        ]]></code></pre></div>

        <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
`--HTML_ELEMENT -> HTML_ELEMENT [0:0]
    |--HTML_TAG_START -> HTML_TAG_START [0:0]
    |   |--TAG_OPEN -> < [0:0]
    |   |--TAG_NAME -> audio [0:1]
    |   `--TAG_CLOSE -> > [0:6]
    |--HTML_CONTENT -> HTML_CONTENT [0:7]
    |   `--HTML_ELEMENT -> HTML_ELEMENT [0:7]
    |       `--VOID_ELEMENT -> VOID_ELEMENT [0:7]
    |           |--TAG_OPEN -> < [0:7]
    |           |--TAG_NAME -> source [0:8]
    |           |--HTML_ATTRIBUTES -> HTML_ATTRIBUTES [0:14]
    |           |   |--HTML_ATTRIBUTE -> HTML_ATTRIBUTE [0:14]
    |           |   |   |--TEXT ->   [0:14]
    |           |   |   |--TAG_ATTR_NAME -> src [0:15]
    |           |   |   |--EQUALS -> = [0:18]
    |           |   |   `--ATTRIBUTE_VALUE -> "horse.ogg" [0:19]
    |           |   `--HTML_ATTRIBUTE -> HTML_ATTRIBUTE [0:30]
    |           |       |--TEXT ->   [0:30]
    |           |       |--TAG_ATTR_NAME -> type [0:31]
    |           |       |--EQUALS -> = [0:35]
    |           |       `--ATTRIBUTE_VALUE -> "audio/ogg" [0:36]
    |           `--TAG_SLASH_CLOSE -> /> [0:47]
    `--HTML_TAG_END -> HTML_TAG_END [0:49]
        |--TAG_OPEN -> < [0:49]
        |--TAG_SLASH -> / [0:50]
        |--TAG_NAME -> audio [0:51]
        `--TAG_CLOSE -> > [0:56]
        ]]></code></pre></div>

      <p>
        This is an example of parsing an unknown tag that doesn't have a matching end tag (for
        example, HTML5 tag &lt;audio&gt;): <br/>
        Input:
      </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
        &lt;audio&gt;test
        </code></pre></div>
        Output:
      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
`--HTML_ELEMENT -> HTML_ELEMENT [0:0]
    |--HTML_TAG_START -> HTML_TAG_START [0:0]
    |   |--TAG_OPEN -> < [0:0]
    |   |--TAG_NAME -> audio [0:1]
    |   `--TAG_CLOSE -> > [0:6]
    `--HTML_CONTENT -> HTML_CONTENT [0:7]
        `--TEXT -> test [0:7]
      ]]></code></pre></div>
      <p>
        As shown above, the parser successfully recognizes all HTML tags, even if they are not
        explicitly defined in the HTML4 specification.
      </p>

      <p>
        There are also HTML tags that are marked as "Not supported in HTML5"
        (<a href='https://www.w3schools.com/tags/default.asp'>HTML Element Reference</a>).
        Checkstyle Javadoc parser can parse those tags too.
        <br/>
        Example:
        <br/>
        Input:
      </p>
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<acronym title="as soon as possible">ASAP</acronym>
]]>
        </code></pre></div>
        <br/>
        Output:
        <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
`--HTML_ELEMENT -> HTML_ELEMENT [0:0]
    |--HTML_TAG_START -> HTML_TAG_START [0:0]
    |   |--TAG_OPEN -> < [0:0]
    |   |--TAG_NAME -> acronym [0:1]
    |   |--HTML_ATTRIBUTES -> HTML_ATTRIBUTES [0:8]
    |   |   `--HTML_ATTRIBUTE -> HTML_ATTRIBUTE [0:8]
    |   |       |--TEXT ->   [0:8]
    |   |       |--TAG_ATTR_NAME -> title [0:9]
    |   |       |--EQUALS -> = [0:14]
    |   |       `--ATTRIBUTE_VALUE -> "as soon as possible" [0:15]
    |   `--TAG_CLOSE -> > [0:36]
    |--HTML_CONTENT -> HTML_CONTENT [0:37]
    |   `--TEXT -> ASAP [0:37]
    `--HTML_TAG_END -> HTML_TAG_END [0:41]
        |--TAG_OPEN -> < [0:41]
        |--TAG_SLASH -> / [0:42]
        |--TAG_NAME -> acronym [0:43]
        `--TAG_CLOSE -> > [0:50]
]]>
        </code></pre></div>

      <p>More examples:</p>

      <div class="wrapper">
        <table style="table-layout: fixed;">
          <tr>
            <td>
              1) Unclosed paragraph HTML tag. As you see in the tree,
              the content of the paragraph (&lt;code&gt; tag) tag is not nested within this tag.
              That is because HTML tag are not closed by &lt;/p&gt;, and Checkstyle
              requires <a href="#Tight-HTML_rules">Tight-HTML</a> code to predictably parse
              Javadoc comments.
            </td>
            <td>
              2) Here is a correct example with open and closed HTML tag.
            </td>
          </tr>

          <tr>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<p> First  <code>Second</code>
]]>
              </code></pre></div>
            </td>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<p> First  <code>Second</code> </p>
]]>
              </code></pre></div>
            </td>
          </tr>

          <tr>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
|--HTML_ELEMENT -> HTML_ELEMENT [0:0]
|   |--HTML_TAG_START -> HTML_TAG_START [0:0]
|   |   |--TAG_OPEN -> < [0:0]
|   |   |--TAG_NAME -> p [0:1]
|   |   `--TAG_CLOSE -> > [0:2]
|   `--HTML_CONTENT -> HTML_CONTENT [0:3]
|       `--TEXT ->  First   [0:3]
`--HTML_ELEMENT -> HTML_ELEMENT [0:11]
    |--HTML_TAG_START -> HTML_TAG_START [0:11]
    |   |--TAG_OPEN -> < [0:11]
    |   |--TAG_NAME -> code [0:12]
    |   `--TAG_CLOSE -> > [0:16]
    |--HTML_CONTENT -> HTML_CONTENT [0:17]
    |   `--TEXT -> Second [0:17]
    `--HTML_TAG_END -> HTML_TAG_END [0:23]
        |--TAG_OPEN -> < [0:23]
        |--TAG_SLASH -> / [0:24]
        |--TAG_NAME -> code [0:25]
        `--TAG_CLOSE -> > [0:29]
]]>
              </code></pre></div>
            </td>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
JAVADOC_CONTENT -> JAVADOC_CONTENT [0:0]
`--HTML_ELEMENT -> HTML_ELEMENT [0:0]
    |--HTML_TAG_START -> HTML_TAG_START [0:0]
    |   |--TAG_OPEN -> < [0:0]
    |   |--TAG_NAME -> p [0:1]
    |   `--TAG_CLOSE -> > [0:2]
    |--HTML_CONTENT -> HTML_CONTENT [0:3]
    |   |--TEXT ->  First   [0:3]
    |   `--HTML_ELEMENT -> HTML_ELEMENT [0:11]
    |       |--HTML_TAG_START -> HTML_TAG_START [0:11]
    |       |   |--TAG_OPEN -> < [0:11]
    |       |   |--TAG_NAME -> code [0:12]
    |       |   `--TAG_CLOSE -> > [0:16]
    |       |--HTML_CONTENT -> HTML_CONTENT [0:17]
    |       |   `--TEXT -> Second [0:17]
    |       `--HTML_TAG_END -> HTML_TAG_END [0:23]
    |           |--TAG_OPEN -> < [0:23]
    |           |--TAG_SLASH -> / [0:24]
    |           |--TAG_NAME -> code [0:25]
    |           `--TAG_CLOSE -> > [0:29]
    |--TEXT ->   [0:30]
    `--HTML_TAG_END -> HTML_TAG_END [0:31]
        |--TAG_OPEN -> < [0:31]
        |--TAG_SLASH -> / [0:32]
        |--TAG_NAME -> p [0:33]
        `--TAG_CLOSE -> > [0:34]
]]>
              </code></pre></div>
            </td>
          </tr>
        </table>
      </div>

      <p>
        Checks can also be configured to log violations upon encountering non-tight HTML tags.
        The <tt>violateExecutionOnNonTightHtml</tt> property can be used for this purpose in the
        checks that support it. A custom check needs to extend <tt>AbstractJavadocCheck</tt> to
        have this functionality readily available. Do note that a check which has this property set
        to true, will log violations only for the first not-tight HTML tag found. To allow a check
        to skip processing of javadocs with non-tight HTML, the
        <tt>acceptJavadocWithNonTightHtml</tt> method in class <tt>AbstractJavadocCheck</tt> can be
        overridden in the check. The following example illustrates how to use this property.
      </p>

      <p>
        Input:
      </p>

      <div class="wrapper"><pre class="prettyprint"><code class="language-java"><![CDATA[
/**
  * <body>
  * <p> This class is only meant for testing. </p>
  * <p> This p tag is not closed. It is non-tight. Will lead to violations if
  * <tt>violateExecutionOnNonTightHtml</tt> is set to true for the check.
  * <li>tight li tag <p>non-tight p tag, but only the 1st non-tight tag is logged in violation</li>
  * </body>
  */
 public class Test {
     /**
      <p><p>
      paraception. Will result in a violation from the <tt>JavadocParagraph</tt> check due to
      redundant tags.
      </p></p>
      */
     private int field1;

     /**<tr> `tr` tag is closed </tr>*/
     private int field2;

     /**
      * <p> this paragraph is closed and would be nested in javadoc tree </p>
      * <li> this list has an <p> unclosed para, but still the list would get nested </li>
      */
     private int field3;

     /**
      * <li> Complete <p> nesting </p> </li>
      */
     private int field4;
}
]]>
      </code></pre></div>

      <p>
        Output with <tt>violateExecutionOnNonTightHtml</tt> set to false:
      </p>

      <div class="wrapper">
        <table>
          <tr>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <module name="TreeWalker">
    <module name="JavadocParagraph">
      <property name="violateExecutionOnNonTightHtml" value="false"/>
    </module>
  </module>
</module>
              ]]></code></pre></div>
            </td>

            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-bash"><![CDATA[
Starting audit...
[ERROR] Test.java:11:7: <p> tag should not precede HTML block-tag '<p>'.
[ERROR] Test.java:11:7: Redundant <p> tag.
[ERROR] Test.java:22:9: <p> tag should be placed immediately before the first word.
[ERROR] Test.java:22:9: Redundant <p> tag.
Audit done.
Checkstyle ends with 4 errors.
              ]]></code></pre></div>
            </td>
          </tr>
        </table>
      </div>

      <p>
        Output with <tt>violateExecutionOnNonTightHtml</tt> set to true:
      </p>

      <div class="wrapper">
        <table>
          <tr>
            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-xml"><![CDATA[
<!DOCTYPE module PUBLIC
          "-//Checkstyle//DTD Checkstyle Configuration 1.3//EN"
          "https://checkstyle.org/dtds/configuration_1_3.dtd">
<module name="Checker">
  <module name="TreeWalker">
    <module name="JavadocParagraph">
      <property name="violateExecutionOnNonTightHtml" value="true"/>
    </module>
  </module>
</module>
              ]]></code></pre></div>
            </td>

            <td>
              <div class="wrapper"><pre class="prettyprint"><code class="language-bash"><![CDATA[
Starting audit...
[ERROR] Test.java:4: Unclosed HTML tag found: p
[ERROR] Test.java:11:7: <p> tag should not precede HTML block-tag '<p>'.
[ERROR] Test.java:11:7: Redundant <p> tag.
[ERROR] Test.java:22:9: <p> tag should be placed immediately before the first word.
[ERROR] Test.java:22:9: Redundant <p> tag.
[ERROR] Test.java:23: Unclosed HTML tag found: p
Audit done.
Checkstyle ends with 6 errors.
              ]]></code></pre></div>
            </td>
          </tr>
        </table>
      </div>
    </section>

    <section name="Checkstyle SDK GUI">
      <p>
       The Checkstyle GUI provides us with a way to show javadoc trees in java files. To run it,
       use
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -cp checkstyle-${projectVersion}-all.jar com.puppycrawl.tools.checkstyle.gui.Main
        </code></pre></div>
      </div>
      <p>
       and choose "JAVA WITH COMMENTS AND JAVADOC MODE" in dropdown list in bottom of frame.
      </p>
      <p>
       Now you can see a parsed javadoc tree as a child of comment block.
      </p>
      <p>
        <span class="wrapper block">
          <img alt="screenshot" src="images/gui_javadoc_screenshot.png"/>
        </span>
      </p>
      <p>
       Notice that only files with ".java" extension can be opened.
      </p>
      <p>
        For detail reference you can see
        <a href="./writingchecks.html#The_Checkstyle_SDK_Gui">
          Checkstyle GUI documentation
        </a>.
      </p>
    </section>

    <section name="Customize token types in Javadoc Checks">
      <p>
        Java checks are controlled by methods <a href="writingchecks.html#Understanding_token_sets">
          setTokens(), getDefaultTokens(), getAccessibleTokens(), getRequiredTokens(). </a>
        JavaDoc checks use the same model plus 4 additional methods for Javadoc tokens.
        As Java AST and Javadoc AST are not bound,
        it is highly recommended for Javadoc checks to not use customization of java tokens and
        except to be executed only on javadoc tokens.
      </p>
      <p>
        There are four methods in the AbstractJavadocCheck class to control the processed
        <a href="apidocs/index.html">JavadocCommentsTokenTypes</a> -
        one setter
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#setJavadocTokens-java.lang.String...-">
        setJavadocTokens()</a>, which is used to define a custom set (which is different
        from the default one) of the processed JavadocCommentsTokenTypes via config file and
        three getters, which have to be overridden:
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getDefaultJavadocTokens--">
        getDefaultJavadocTokens()</a>,
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getAcceptableJavadocTokens--">
        getAcceptableJavadocTokens()</a>,
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getRequiredJavadocTokens--">
        getRequiredJavadocTokens()</a>.
      </p>

      <ul>

        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#setJavadocTokens-java.lang.String...-">
          setJavadocTokens()</a> - method then define actual set of tokens to run on.
        </li>
        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getDefaultJavadocTokens--">
          getDefaultJavadocTokens()</a> - returns a set of
          JavadocCommentsTokenTypes which are processed in
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#visitToken-com.puppycrawl.tools.checkstyle.api.DetailAST-">
          visitToken()</a> method by default.
        </li>

        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getRequiredJavadocTokens--">
          getRequiredJavadocTokens()</a> - returns a set of JavadocCommentsTokenTypes which Check
          must be subscribed to for a valid execution. If the user wants to specify a custom set of
          JavadocCommentsTokenTypes then this set must contain all the JavadocCommentsTokenTypes
          from RequiredJavadocTokens.
        </li>

        <li>
          <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html#getAcceptableJavadocTokens--">
          getAcceptableJavadocTokens()</a> - returns a set, which contains all the
          JavadocCommentsTokenTypes that can be processed by the check. Both DefaultJavadocTokens
          and RequiredJavadocTokens and any custom set of JavadocCommentsTokenTypes are subsets of
          AcceptableJavadocTokens.
        </li>

      </ul>
    </section>

    <section name="Integrating new Javadoc Check">
      <p>
      Javadoc Checks as well as regular Checks extend
        <a href="apidocs/com/puppycrawl/tools/checkstyle/checks/javadoc/AbstractJavadocCheck.html">
        AbstractCheck</a> class. So integrating a new Javadoc Check is similar to
        <a href="writingchecks.html#Integrating_Checks">integrating other Checks</a>.
      </p>
    </section>

    <section name="Declare check's external resource locations">
      <p>
      See <a href="writingchecks.html#Declare_check.27s_external_resource_locations">Declare check's
      external resource locations</a>.
      </p>
    </section>

    <section name="Examples of Javadoc Checks">
      <p>
        The best source knowledge on how to write Javadoc Checks
        can be taken from
        <a href="https://github.com/search?q=path%3Asrc%2Fmain%2Fjava+repo%3Acheckstyle%2Fcheckstyle+%22extends+AbstractJavadocCheck%22">
          existing Checks
        </a>.
      </p>
    </section>

    <section name="Javadoc parser behavior for current HTML version and new HTML version">
      <p>
        This section describes how the Javadoc parser handles HTML elements
        inside Javadoc comments. The parser now treats all HTML elements
        according to the same logic, there are no special token types
        and no version-specific parsing rules. All elements are parsed as GeneralToken
        which is represented in the AST as
        <a href="apidocs/com/puppycrawl/tools/checkstyle/api/JavadocCommentsTokenTypes.html#HTML_ELEMENT">
          HTML_ELEMENT
        </a>.
      </p>
      <p>
        This unified behavior means that all HTML elements, including those introduced in newer
        HTML versions such as HTML5, are handled consistently without requiring special-case logic.
        The parser does not assign any <em>special token types</em>
        (such as PARAGRAPH or LIST_ITEM); instead, every tag
        is represented as a single <code>HTML_ELEMENT</code> node in the AST
      </p>
    </section>

  </body>
</document>
