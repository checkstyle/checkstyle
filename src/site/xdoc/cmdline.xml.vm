<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

  <head>
    <title>Command Line</title>
  </head>

  <body>
    <section name="Content">
      <macro name="toc">
        <param name="fromDepth" value="1"/>
        <param name="toDepth" value="1"/>
      </macro>
    </section>

    <section name="Description">
      <p>
        This document describes how to run Checkstyle using the command line
        tool. The latest version of Checkstyle can be downloaded as described at
        <a href="./index.html#Download">Download section</a>.
        This command line tool is included in the Checkstyle distribution.
      </p>
    </section>

    <section name="Command line usage">
      <p>

        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
java -D&lt;property&gt;=&lt;value&gt;  \
     com.puppycrawl.tools.checkstyle.Main \
     -c &lt;configurationFile&gt; \
     [-f &lt;format&gt;] [-p &lt;propertiesFile&gt;] [-o &lt;file&gt;] \
     [-s &lt;line:column&gt;] [-g | --generate-xpath-suppression] [-w | --tabWidth &lt;length&gt;] \
     [-t | --tree] [-T | --treeWithComments] [-J | --treeWithJavadoc] [-j | --javadocTree] \
     [-V | --version] [-b | --branch-matching-xpath &lt;xpathQuery&gt;] [-h | --help] \
     [-e | --exclude &lt;excludedPath&gt;] [-E | --executeIgnoredModules] [-d | --debug] \
     [-x | --exclude-regexp &lt;excludedPathPattern&gt;] \
     file(s) or folder(s) ...
        </code></pre></div>
      </p>

      <p>
        Checkstyle will process the specified files and by default report
        violations to standard out in plain format. Checkstyle requires a <a
        href="config.html">configuration XML file</a> that configures the
        checks to apply. Command line options are:
      </p>

      <subsection name="Command Line Options" id="Command_line_usage_Command_Line_Options">
        <div class="wrapper">
          <table>
            <thead>
              <tr>
                <th/>
                <th>Option</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody id="body">
              <tr>
                <td>
                  <a name="c"/>
                  <a href="#c">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-c configurationFile</code>
                </td>
                <td>
                  Specifies the location of the file that defines the configuration modules.
                  The location can either be a filesystem location, or a
                  <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_names">
                  name</a> passed to the ClassLoader.getResource() method.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="f"/>
                  <a href="#f">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-f format</code>
                </td>
                <td>
                  Specifies the output format. Valid values: <code>xml</code>,
                  <code>sarif</code>, <code>plain</code>
                  for <a href="apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html">
                  XMLLogger</a>,
                  <a href="apidocs/com/puppycrawl/tools/checkstyle/SarifLogger.html">
                  SarifLogger</a>, and
                  <a href="apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger.html">
                  DefaultLogger</a> respectively. Defaults to <code>plain</code>.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="p"/>
                  <a href="#p">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-p propertiesFile</code>
                </td>
                <td>
                  Sets the property files to load.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="o"/>
                  <a href="#o">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-o file</code>
                </td>
                <td>
                  Sets the output file. Defaults to stdout.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="s"/>
                  <a href="#s">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-s line:column</code>
                </td>
                <td>
                  Prints xpath suppressions at the file's line and column position. Argument is the
                  line and column number (separated by a : ) in the file that the suppression
                  should be generated for. The option cannot be used with other options and
                  requires exactly one file to run on to be specified. Note that the generated
                  result will have few queries, joined by pipe(|). Together they will match all
                  AST nodes on specified line and column. You need to choose only one and recheck
                  that it works. Usage of all of them is also ok, but might result in undesirable
                  matching and suppress other issues.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="g"/>
                  <a href="#g">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-g--generate-xpath-suppression</code>
                </td>
                <td>
                  Generates to output a suppression xml to use to suppress all violations from
                  user's config. Instead of printing every violation, all violations will be
                  catched and single suppressions xml file will be printed out. Used only with
                  <code>-c</code> option. Output location can be specified
                  with <code>-o</code> option.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="w"/>
                  <a href="#w">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-w, --tabWidth length</code>
                </td>
                <td>
                  Sets the length of the tab character. Used only with <code>-s</code> option.
                  Default value is 8.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="t"/>
                  <a href="#t">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-t, --tree</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>without any comments</b> of the specified file. It can only be used
                  on a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="T"/>
                  <a href="#T">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-T, --treeWithComments</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>with comment nodes excluding Javadoc</b> of the specified file.
                  It can only be used on a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="J"/>
                  <a href="#J">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-J, --treeWithJavadoc</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>with Javadoc nodes</b> of the specified file. It can only be used on
                  a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="j"/>
                  <a href="#j">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-j, --javadocTree</code>
                </td>
                <td>
                  This option is used to print the Parse Tree of the Javadoc comment. The file has
                  to contain <b>only Javadoc comment content</b> excluding '/**' and '*/'
                  at the beginning and at the end respectively. It can only be used on a
                  single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="d"/>
                  <a href="#d">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-d, --debug</code>
                </td>
                <td>
                  Prints all debug logging of CheckStyle utility.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="e"/>
                  <a href="#e">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-e, --exclude excludedPath</code>
                </td>
                <td>
                  Directory/file to exclude from CheckStyle. The path can be the full,
                  absolute path, or relative to the current path. Multiple excludes are allowed.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="x"/>
                  <a href="#x">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-x, --exclude-regexp excludedPathPattern</code>
                </td>
                <td>
                  Directory/file pattern to exclude from CheckStyle. Multiple excludes are allowed.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="V"/>
                  <a href="#V">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-V, --version</code>
                </td>
                <td>
                  Prints product version and exits. Any other option is ignored.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="b"/>
                  <a href="#b">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-b, --branch-matching-xpath xpathQuery</code>
                </td>
                <td>
                  Shows Abstract Syntax Tree(AST) branches that match given XPath query.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="h"/>
                  <a href="#h">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-h, --help</code>
                </td>
                <td>
                  Prints usage help message and exits. Any other option is ignored.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="E"/>
                  <a href="#E">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-E, --executeIgnoredModules</code>
                </td>
                <td>
                  Allows ignored modules to be run.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </subsection>

      <p>
        Note that the <code>-n packageNamesFile</code>
        option has been dropped for Checkstyle 5.0, because of significant changes regarding
        package name file handling. See <a href="config.html#Packages">this link</a> for details.
      </p>
      <p>
        To define system property for execution look at
        <a href="config_system_properties.html">system properties</a>.
      </p>
      <p>
        Set the properties for <a href="config.html#Properties">expanded
        property values</a> by either by assigning system properties using the
        <code>-D&lt;property&gt;=&lt;value&gt;</code> arguments to java or
        specifying a property file using the <code>-p</code> option.  If a
        property file is specified, the system properties are ignored.
      </p>
      <p>
        CLI is implemented by means of <a href="https://picocli.info">picocli</a>
        library. Our CLI supports definition of arguments in file
        by means of <a href="https://picocli.info/#AtFiles">AtFiles</a> feature
        and also command line completion in Bash or ZSH Unix shells, see how to make it
        <a href="https://picocli.info/autocomplete.html">here</a>.
      </p>
    </section>

    <section name="Download and Run">
      <p>
        It is possible to run Checkstyle directly from the JAR file using
        the <code>-jar</code> option. Download latest
        <a href="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
        checkstyle-${projectVersion}-all.jar</a>.
        An example of run would be:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -jar checkstyle-${projectVersion}-all.jar -c /sun_checks.xml MyClass.java
          java -jar checkstyle-${projectVersion}-all.jar -c /google_checks.xml MyClass.java
        </code></pre></div>
      </div>
      <p>
        It is recommended to use configuration files that are embedded in jar files, but latest
        configuration files are there:
        <a href=
          "https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/sun_checks.xml">
            sun_checks.xml</a>
        <a href=
          "https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml">
            google_checks.xml</a>
      </p>
      <p>
        To run <a href="writingchecks.html#The_Checkstyle_SDK_Gui">Checkstyle UI viewer</a>
        for AST tree directly from the JAR file using
        the <code>-jar</code> option. Download latest
        <a href="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
        checkstyle-${projectVersion}-all.jar</a>.
        An example of run would be (path to java file is optional):
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -cp checkstyle-${projectVersion}-all.jar com.puppycrawl.tools.checkstyle.gui.Main \
          &#xa0;&#xa0;&#xa0;&#xa0;MyClass.java
        </code></pre></div>
      </div>
    </section>

<section name="Examples">
<h4><span>
1. Using Configuration File (<span class="no-transform">-c, --configurationFile</span>)
</span></h4>
<p><strong>Goal:</strong> Run Checkstyle using the settings defined in the specified XML
configuration file (config.xml) to check the provided Java source files.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
[ERROR] Test.java:17:17: Fall through from previous branch of the switch statement.
[FallThrough]
Audit done.
Checkstyle ends with 1 errors.
  </code></pre>
</div>

<h4><span>
2. Specifying Output Format (<span class="no-transform">-f, --format</span>)
</span></h4>
<p><strong>Goal:</strong> Output the audit results in a Xml Format
instead of the default plain text.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml -f xml Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;checkstyle version="${projectVersion}"&gt;
    &lt;file name="Test.java"&gt;
        &lt;error line="17" column="17" severity="error"
            message="Fall through from previous branch of switch statement"
            source="com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck"/&gt;
    &lt;/file&gt;
&lt;/checkstyle&gt;
Checkstyle ends with 1 errors.
  </code></pre>
</div>

<h4><span>
3. Using a Properties File (<span class="no-transform">-p, --propertiesFile</span>)
</span></h4>
<p><strong>Goal:</strong>
Load custom properties into Checkstyle from a properties file to enforce a header check.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml -p checkstyle.properties Test.java
</code></span>


<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="Header"&gt;
    &lt;property name="headerFile" value="${checkstyle.header.file}"/&gt;
    &lt;property name="charset" value="${checkstyle.header.charset}"/&gt;
  &lt;/module&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of checkstyle.properties:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-properties">
checkstyle.header.file=file:header.txt
checkstyle.header.charset=UTF-8
  </code></pre>
</div>

<p><strong>Content of header.txt:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-text">
/**
 * This is the required header for all source files.
 */
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 * Note: This file intentionally does not contain the required header.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void bar() {
    System.out.println("Configured with properties!");
  }
}
  </code></pre>
</div>

<p><strong>Output:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
[ERROR] Test.java:2: Line does not match expected header line of ' * This is the
required header for all source files.'. [Header]
Audit done.
Checkstyle ends with 1 errors.
  </code></pre>
</div>

<h4><span>
4. Specifying an Output File (<span class="no-transform">-o, --outputPath</span>)
</span></h4>
<p><strong>Goal:</strong>
Direct the Checkstyle output into a designated file rather than printing to standard output.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml -o results.txt Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Content of results.txt:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
[ERROR] Test.java:17:17: Fall through from previous branch of the switch statement. [FallThrough]
Audit done.
  </code></pre>
</div>

<h4><span>
5. Printing XPath Suppressions (<span class="no-transform">-s, --suppressionLineColumnNumber</span>)
</span></h4>
<p><strong>
Goal:</strong>
Generate XPath suppressions for the violation at the specified line and column.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -s 17:17 Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output:</strong></p>
<div class="wrapper">
<pre><code>
 java -jar checkstyle-${projectVersion}-all.jar -s 17:17 Test.java
/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='Test']]/OBJBLOCK/METHOD_DEF[
./IDENT[@text='foo']]/SLIST/LITERAL_WHILE/SLIST/LITERAL_SWITCH/CASE_GROUP
[./LITERAL_CASE/EXPR/NUM_INT[@text='3']]/COMPILATION_UNIT/CLASS_DEF
[./IDENT[@text='Test']]/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]
/SLIST/LITERAL_WHILE/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE
  </code></pre>
</div>

<h4><span>
6. Generating Suppressions XML (<span class="no-transform">-g, --generate-xpath-suppression</span>)
</span></h4>
<p><strong>Goal:</strong> Generate an XML file containing suppressions for all
violations using the experimental XPath suppression filter.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml -g -o suppressions.xml Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Content of suppressions.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0" encoding="UTF-8"?&gt;
&lt;!DOCTYPE suppressions PUBLIC
    "-//Checkstyle//DTD SuppressionXpathFilter Experimental Configuration 1.2//EN"
    "https://checkstyle.org/dtds/suppressions_1_2_xpath_experimental.dtd"&gt;
&lt;suppressions&gt;
&lt;suppress-xpath
       files="Test.java"
       checks="FallThroughCheck"
       query="/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='Test']]/OBJBLOCK/METHOD_DEF
       ./IDENT[@text='foo']]/SLIST/LITERAL_WHILE/SLIST/LITERAL_SWITCH/CASE_GROUP[
       ./LITERAL_CASE/EXPR/NUM_INT[@text='3']]"/&gt;
&lt;/suppressions&gt;
  </code></pre>
</div>

<h4><span>
7. Setting Tab Width (<span class="no-transform">-w, --tabWidth</span>)
</span></h4>
<p>
<strong>Goal:</strong>
Set the length of the tab character when using the <code>-s</code> option,
and generate the suppression XPath query for the violation.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -s 17:17 --tabWidth 4 Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
/COMPILATION_UNIT/CLASS_DEF[./IDENT[@text='Test']]/OBJBLOCK/METHOD_DEF
./IDENT[@text='foo']]/SLIST/LITERAL_WHILE/SLIST/LITERAL_SWITCH/CASE_GROUP
[./LITERAL_CASE/EXPR/NUM_INT[@text='3']]/COMPILATION_UNIT/CLASS_DEF[./IDENT
[@text='Test']]/OBJBLOCK/METHOD_DEF[./IDENT[@text='foo']]/SLIST/LITERAL_WHILE
/SLIST/LITERAL_SWITCH/CASE_GROUP/LITERAL_CASE
  </code></pre>
</div>

<h4><span>
8. Displaying Abstract Syntax Tree (<span class="no-transform">-t, --tree</span>)
</span></h4>
<p><strong>Goal:</strong>
Display the Abstract Syntax Tree (AST) of a file without comments.</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -t Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
COMPILATION_UNIT -> COMPILATION_UNIT [6:0]
`--CLASS_DEF -> CLASS_DEF [6:0]
    |--MODIFIERS -> MODIFIERS [6:0]
    |--LITERAL_CLASS -> class [6:0]
    |--IDENT -> Test [6:6]
    `--OBJBLOCK -> OBJBLOCK [6:11]
        |--LCURLY -> { [6:11]
        |--METHOD_DEF -> METHOD_DEF [10:4]
        |   |--MODIFIERS -> MODIFIERS [10:4]
        |   |   `--LITERAL_PUBLIC -> public [10:4]
        |   |--TYPE -> TYPE [10:11]
        |   |   `--LITERAL_VOID -> void [10:11]
        |   |--IDENT -> foo [10:16]
        |   |--LPAREN -> ( [10:19]
        |   |--PARAMETERS -> PARAMETERS [10:20]
        |   |--RPAREN -> ) [10:20]
        |   `--SLIST -> { [10:22]
        |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]
        |       |   |--MODIFIERS -> MODIFIERS [11:8]
        |       |   |--TYPE -> TYPE [11:8]
        |       |   |   `--LITERAL_INT -> int [11:8]
        |       |   |--IDENT -> i [11:12]
        |       |   `--ASSIGN -> = [11:14]
        |       |       `--EXPR -> EXPR [11:16]
        |       |           `--NUM_INT -> 0 [11:16]
        |       |--SEMI -> ; [11:17]
        |       |--LITERAL_WHILE -> while [12:8]
        |       |   |--LPAREN -> ( [12:14]
        |       |   |--EXPR -> EXPR [12:17]
        |       |   |   `--GE -> >= [12:17]
        |       |   |       |--IDENT -> i [12:15]
        |       |   |       `--NUM_INT -> 0 [12:20]
        |       |   |--RPAREN -> ) [12:21]
        |       |   `--SLIST -> { [12:23]
        |       |       |--LITERAL_SWITCH -> switch [13:12]
        |       |       |   |--LPAREN -> ( [13:19]
        |       |       |   |--EXPR -> EXPR [13:20]
        |       |       |   |   `--IDENT -> i [13:20]
        |       |       |   |--RPAREN -> ) [13:21]
        |       |       |   |--LCURLY -> { [13:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [14:16]
        |       |       |   |   |--LITERAL_CASE -> case [14:16]
        |       |       |   |   |   |--EXPR -> EXPR [14:21]
        |       |       |   |   |   |   `--NUM_INT -> 1 [14:21]
        |       |       |   |   |   `--COLON -> : [14:22]
        |       |       |   |   |--LITERAL_CASE -> case [15:16]
        |       |       |   |   |   |--EXPR -> EXPR [15:21]
        |       |       |   |   |   |   `--NUM_INT -> 2 [15:21]
        |       |       |   |   |   `--COLON -> : [15:22]
        |       |       |   |   `--SLIST -> SLIST [16:21]
        |       |       |   |       |--EXPR -> EXPR [16:21]
        |       |       |   |       |   `--POST_INC -> ++ [16:21]
        |       |       |   |       |       `--IDENT -> i [16:20]
        |       |       |   |       `--SEMI -> ; [16:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [17:16]
        |       |       |   |   |--LITERAL_CASE -> case [17:16]
        |       |       |   |   |   |--EXPR -> EXPR [17:21]
        |       |       |   |   |   |   `--NUM_INT -> 3 [17:21]
        |       |       |   |   |   `--COLON -> : [17:22]
        |       |       |   |   `--SLIST -> SLIST [18:21]
        |       |       |   |       |--EXPR -> EXPR [18:21]
        |       |       |   |       |   `--POST_INC -> ++ [18:21]
        |       |       |   |       |       `--IDENT -> i [18:20]
        |       |       |   |       `--SEMI -> ; [18:23]
        |       |       |   `--RCURLY -> } [19:12]
        |       |       `--RCURLY -> } [20:8]
        |       `--RCURLY -> } [21:4]
        `--RCURLY -> } [22:0]
  </code></pre>
</div>

<h4><span>
9. Displaying AST with Comments (<span class="no-transform">-T, --treeWithComments</span>)
</span></h4>
<p><strong>Goal:</strong>
Display the AST including comment nodes, but excluding Javadoc.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --treeWithComments Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
COMPILATION_UNIT -> COMPILATION_UNIT [6:0]
`--CLASS_DEF -> CLASS_DEF [6:0]
    |--MODIFIERS -> MODIFIERS [6:0]
    |--BLOCK_COMMENT_BEGIN -> /* [1:0]
    |   |--COMMENT_CONTENT -> *\r\n * Javadoc summary.\r\n *\r\n * Some description.\r\n [1:2]
    |   `--BLOCK_COMMENT_END -> */ [5:1]
    |--LITERAL_CLASS -> class [6:0]
    |--IDENT -> Test [6:6]
    `--OBJBLOCK -> OBJBLOCK [6:11]
        |--LCURLY -> { [6:11]
        |--METHOD_DEF -> METHOD_DEF [10:4]
        |   |--MODIFIERS -> MODIFIERS [10:4]
        |   |   |--BLOCK_COMMENT_BEGIN -> /* [7:4]
        |   |   |   |--COMMENT_CONTENT -> *\r\n     * Some summary on method.\r\n [7:6]
        |   |   |   `--BLOCK_COMMENT_END -> */ [9:5]
        |   |   `--LITERAL_PUBLIC -> public [10:4]
        |   |--TYPE -> TYPE [10:11]
        |   |   `--LITERAL_VOID -> void [10:11]
        |   |--IDENT -> foo [10:16]
        |   |--LPAREN -> ( [10:19]
        |   |--PARAMETERS -> PARAMETERS [10:20]
        |   |--RPAREN -> ) [10:20]
        |   `--SLIST -> { [10:22]
        |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]
        |       |   |--MODIFIERS -> MODIFIERS [11:8]
        |       |   |--TYPE -> TYPE [11:8]
        |       |   |   `--LITERAL_INT -> int [11:8]
        |       |   |--IDENT -> i [11:12]
        |       |   `--ASSIGN -> = [11:14]
        |       |       `--EXPR -> EXPR [11:16]
        |       |           `--NUM_INT -> 0 [11:16]
        |       |--SEMI -> ; [11:17]
        |       |--LITERAL_WHILE -> while [12:8]
        |       |   |--LPAREN -> ( [12:14]
        |       |   |--EXPR -> EXPR [12:17]
        |       |   |   `--GE -> >= [12:17]
        |       |   |       |--IDENT -> i [12:15]
        |       |   |       `--NUM_INT -> 0 [12:20]
        |       |   |--RPAREN -> ) [12:21]
        |       |   `--SLIST -> { [12:23]
        |       |       |--LITERAL_SWITCH -> switch [13:12]
        |       |       |   |--LPAREN -> ( [13:19]
        |       |       |   |--EXPR -> EXPR [13:20]
        |       |       |   |   `--IDENT -> i [13:20]
        |       |       |   |--RPAREN -> ) [13:21]
        |       |       |   |--LCURLY -> { [13:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [14:16]
        |       |       |   |   |--LITERAL_CASE -> case [14:16]
        |       |       |   |   |   |--EXPR -> EXPR [14:21]
        |       |       |   |   |   |   `--NUM_INT -> 1 [14:21]
        |       |       |   |   |   `--COLON -> : [14:22]
        |       |       |   |   |--LITERAL_CASE -> case [15:16]
        |       |       |   |   |   |--EXPR -> EXPR [15:21]
        |       |       |   |   |   |   `--NUM_INT -> 2 [15:21]
        |       |       |   |   |   `--COLON -> : [15:22]
        |       |       |   |   `--SLIST -> SLIST [16:21]
        |       |       |   |       |--EXPR -> EXPR [16:21]
        |       |       |   |       |   `--POST_INC -> ++ [16:21]
        |       |       |   |       |       `--IDENT -> i [16:20]
        |       |       |   |       `--SEMI -> ; [16:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [17:16]
        |       |       |   |   |--LITERAL_CASE -> case [17:16]
        |       |       |   |   |   |--EXPR -> EXPR [17:21]
        |       |       |   |   |   |   `--NUM_INT -> 3 [17:21]
        |       |       |   |   |   `--COLON -> : [17:22]
        |       |       |   |   `--SLIST -> SLIST [18:21]
        |       |       |   |       |--EXPR -> EXPR [18:21]
        |       |       |   |       |   `--POST_INC -> ++ [18:21]
        |       |       |   |       |       |--SINGLE_LINE_COMMENT -> // [17:24]
        |       |       |   |       |       |   `--COMMENT_CONTENT ->  violation\r\n [17:26]
        |       |       |   |       |       `--IDENT -> i [18:20]
        |       |       |   |       `--SEMI -> ; [18:23]
        |       |       |   `--RCURLY -> } [19:12]
        |       |       `--RCURLY -> } [20:8]
        |       `--RCURLY -> } [21:4]
        `--RCURLY -> } [22:0]
  </code></pre>
</div>

<h4><span>
10. Displaying AST with Javadoc (<span class="no-transform">-J, --treeWithJavadoc</span>)
</span></h4>
<p><strong>Goal:</strong>
Display the AST including Javadoc comment nodes.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --treeWithJavadoc Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
COMPILATION_UNIT -> COMPILATION_UNIT [6:0]
`--CLASS_DEF -> CLASS_DEF [6:0]
    |--MODIFIERS -> MODIFIERS [6:0]
    |--BLOCK_COMMENT_BEGIN -> /* [1:0]
    |   |--COMMENT_CONTENT -> *\r\n * Javadoc summary.\r\n *\r\n * Some description.\r\n [1:2]
    |   |   `--JAVADOC -> JAVADOC [1:3]
    |   |       |--NEWLINE -> \r\n [1:3]
    |   |       |--LEADING_ASTERISK ->  * [2:0]
    |   |       |--TEXT ->  Javadoc summary. [2:2]
    |   |       |--NEWLINE -> \r\n [2:19]
    |   |       |--LEADING_ASTERISK ->  * [3:0]
    |   |       |--NEWLINE -> \r\n [3:2]
    |   |       |--LEADING_ASTERISK ->  * [4:0]
    |   |       |--TEXT ->  Some description. [4:2]
    |   |       |--NEWLINE -> \r\n [4:20]
    |   |       |--TEXT ->   [5:0]
    |   |       `--EOF -> &lt;EOF&gt; [5:1]
    |   `--BLOCK_COMMENT_END -> */ [5:1]
    |--LITERAL_CLASS -> class [6:0]
    |--IDENT -> Test [6:6]
    `--OBJBLOCK -> OBJBLOCK [6:11]
        |--LCURLY -> { [6:11]
        |--METHOD_DEF -> METHOD_DEF [10:4]
        |   |--MODIFIERS -> MODIFIERS [10:4]
        |   |   |--BLOCK_COMMENT_BEGIN -> /* [7:4]
        |   |   |   |--COMMENT_CONTENT -> *\r\n     * Some summary on method.\r\n [7:6]
        |   |   |   |   `--JAVADOC -> JAVADOC [7:7]
        |   |   |   |       |--NEWLINE -> \r\n [7:7]
        |   |   |   |       |--LEADING_ASTERISK ->      * [8:0]
        |   |   |   |       |--TEXT ->  Some summary on method. [8:6]
        |   |   |   |       |--NEWLINE -> \r\n [8:30]
        |   |   |   |       |--TEXT ->       [9:0]
        |   |   |   |       `--EOF -> &lt;EOF&gt; [9:5]
        |   |   |   `--BLOCK_COMMENT_END -> */ [9:5]
        |   |   `--LITERAL_PUBLIC -> public [10:4]
        |   |--TYPE -> TYPE [10:11]
        |   |   `--LITERAL_VOID -> void [10:11]
        |   |--IDENT -> foo [10:16]
        |   |--LPAREN -> ( [10:19]
        |   |--PARAMETERS -> PARAMETERS [10:20]
        |   |--RPAREN -> ) [10:20]
        |   `--SLIST -> { [10:22]
        |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]
        |       |   |--MODIFIERS -> MODIFIERS [11:8]
        |       |   |--TYPE -> TYPE [11:8]
        |       |   |   `--LITERAL_INT -> int [11:8]
        |       |   |--IDENT -> i [11:12]
        |       |   `--ASSIGN -> = [11:14]
        |       |       `--EXPR -> EXPR [11:16]
        |       |           `--NUM_INT -> 0 [11:16]
        |       |--SEMI -> ; [11:17]
        |       |--LITERAL_WHILE -> while [12:8]
        |       |   |--LPAREN -> ( [12:14]
        |       |   |--EXPR -> EXPR [12:17]
        |       |   |   `--GE -> >= [12:17]
        |       |   |       |--IDENT -> i [12:15]
        |       |   |       `--NUM_INT -> 0 [12:20]
        |       |   |--RPAREN -> ) [12:21]
        |       |   `--SLIST -> { [12:23]
        |       |       |--LITERAL_SWITCH -> switch [13:12]
        |       |       |   |--LPAREN -> ( [13:19]
        |       |       |   |--EXPR -> EXPR [13:20]
        |       |       |   |   `--IDENT -> i [13:20]
        |       |       |   |--RPAREN -> ) [13:21]
        |       |       |   |--LCURLY -> { [13:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [14:16]
        |       |       |   |   |--LITERAL_CASE -> case [14:16]
        |       |       |   |   |   |--EXPR -> EXPR [14:21]
        |       |       |   |   |   |   `--NUM_INT -> 1 [14:21]
        |       |       |   |   |   `--COLON -> : [14:22]
        |       |       |   |   |--LITERAL_CASE -> case [15:16]
        |       |       |   |   |   |--EXPR -> EXPR [15:21]
        |       |       |   |   |   |   `--NUM_INT -> 2 [15:21]
        |       |       |   |   |   `--COLON -> : [15:22]
        |       |       |   |   `--SLIST -> SLIST [16:21]
        |       |       |   |       |--EXPR -> EXPR [16:21]
        |       |       |   |       |   `--POST_INC -> ++ [16:21]
        |       |       |   |       |       `--IDENT -> i [16:20]
        |       |       |   |       `--SEMI -> ; [16:23]
        |       |       |   |--CASE_GROUP -> CASE_GROUP [17:16]
        |       |       |   |   |--LITERAL_CASE -> case [17:16]
        |       |       |   |   |   |--EXPR -> EXPR [17:21]
        |       |       |   |   |   |   `--NUM_INT -> 3 [17:21]
        |       |       |   |   |   `--COLON -> : [17:22]
        |       |       |   |   `--SLIST -> SLIST [18:21]
        |       |       |   |       |--EXPR -> EXPR [18:21]
        |       |       |   |       |   `--POST_INC -> ++ [18:21]
        |       |       |   |       |       |--SINGLE_LINE_COMMENT -> // [17:24]
        |       |       |   |       |       |   `--COMMENT_CONTENT ->  violation\r\n [17:26]
        |       |       |   |       |       `--IDENT -> i [18:20]
        |       |       |   |       `--SEMI -> ; [18:23]
        |       |       |   `--RCURLY -> } [19:12]
        |       |       `--RCURLY -> } [20:8]
        |       `--RCURLY -> } [21:4]
        `--RCURLY -> } [22:0]
</code></pre>
</div>

<h4><span>
11. Printing Javadoc Parse Tree (<span class="no-transform">-j, --javadocTree</span>)
</span></h4>
<p><strong>Goal:</strong>
Print the full parse tree of a Javadoc comment extracted from a file.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --javadocTree Javadoc.txt
</code></span>

<p><strong>Content of Javadoc.txt:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * This is a sample Javadoc comment.
 * It spans multiple lines and includes tags.
 * @param value Input value for processing.
 * @return Processed result.
 */
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
JAVADOC -> JAVADOC [0:0]
 |--TEXT -> /** [0:0]
 |--NEWLINE -> \r\n [0:3]
 |--LEADING_ASTERISK ->  * [1:0]
 |--TEXT ->  This is a sample Javadoc comment. [1:2]
 |--NEWLINE -> \r\n [1:36]
 |--LEADING_ASTERISK ->  * [2:0]
 |--TEXT ->  It spans multiple lines and includes tags. [2:2]
 |--NEWLINE -> \r\n [2:45]
 |--LEADING_ASTERISK ->  * [3:0]
 |--WS ->   [3:2]
 |--JAVADOC_TAG -> JAVADOC_TAG [3:3]
 |   |--PARAM_LITERAL -> @param [3:3]
 |   |--WS ->   [3:9]
 |   |--PARAMETER_NAME -> value [3:10]
 |   |--WS ->   [3:15]
 |   `--DESCRIPTION -> DESCRIPTION [3:16]
 |       |--TEXT -> Input value for processing. [3:16]
 |       `--NEWLINE -> \r\n [3:43]
 |--LEADING_ASTERISK ->  * [4:0]
 |--WS ->   [4:2]
 |--JAVADOC_TAG -> JAVADOC_TAG [4:3]
 |   |--RETURN_LITERAL -> @return [4:3]
 |   |--WS ->   [4:10]
 |   `--DESCRIPTION -> DESCRIPTION [4:11]
 |       |--TEXT -> Processed result. [4:11]
 |       |--NEWLINE -> \r\n [4:28]
 |       |--LEADING_ASTERISK ->  * [5:0]
 |       `--TEXT -> / [5:2]
 `--EOF -> &lt;EOF&gt; [5:3]
  </code></pre>
</div>

<h4><span>
12. Debugging CheckStyle (<span class="no-transform">-d, --debug</span>)
</span></h4>
<p><strong>Goal:</strong>
Run Checkstyle in debug mode to produce detailed logging information and troubleshooting.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --debug -c config.xml Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Feb 17, 2025 11:55:59 PM com.puppycrawl.tools.checkstyle.Main runCli
FINE: Checkstyle debug logging enabled
Feb 17, 2025 11:55:59 PM com.puppycrawl.tools.checkstyle.Main runCli
FINE: Running Checkstyle with version: ${projectVersion}
Starting audit...
[ERROR] Test.java:17:17: Fall through from
previous branch of the switch statement. [FallThrough]
Audit done.
Checkstyle ends with 1 errors.
</code></pre>
</div>

<h4><span>
13. Excluding Specific Files/Directories (<span class="no-transform">-e, --exclude</span>)
</span></h4>
<p><strong>Goal:</strong>
Exclude designated files or directories from the Checkstyle audit so that they are not processed.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml -e Test.java Other.java Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
Skipping excluded file: Test.java
Audit done.
  </code></pre>
</div>

<h4><span>
14. Excluding Files Using Regular Expressions (<span class="no-transform">-x, --exclude-regexp
</span>)
</span></h4>
<p><strong>Goal:</strong>
Exclude files or directories that match a given regular expression pattern while
execution on folder 'src'.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml --exclude-regexp ".*Test.*\.java" src
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
Skipping excluded file: Test.java
Audit done.
  </code></pre>
</div>

<h4><span>
15. Displaying Checkstyle Version (<span class="no-transform">-V, --version</span>)
</span></h4>
<p><strong>Goal:</strong> Print the current Checkstyle version information.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --version
</code></span>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Checkstyle ${projectVersion}
  </code></pre>
</div>

<h4><span>
16. Matching AST Branches (<span class="no-transform">-b, --branch-matching-xpath</span>)
</span></h4>
<p><strong>Goal:</strong>
Show AST branches matching a given XPath query for the variable declaration of "x".
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --branch-matching-xpath"/COMPILATION_UNIT/CLASS_DEF
/OBJBLOCK/METHOD_DEF/SLIST/VARIABLE_DEF[./IDENT[@text='x']]" Test.java
</code></span>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  void foo() {
    int x = 10;
  }
}
  </code></pre>
</div>


<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
COMPILATION_UNIT -> COMPILATION_UNIT [6:0]
`--CLASS_DEF -> CLASS_DEF [6:0]
    `--OBJBLOCK -> OBJBLOCK [6:11]
        |--METHOD_DEF -> METHOD_DEF [10:4]
        |   `--SLIST -> { [10:15]
        |       |--VARIABLE_DEF -> VARIABLE_DEF [11:8]
  </code></pre>
</div>

<h4><span>
17. Displaying Help Message (<span class="no-transform">-h, --help</span>)
</span></h4>
<p><strong>Goal:</strong>
Display the full usage instructions for the Checkstyle CLI, detailing available options and syntax.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar --help
</code></span>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Usage: checkstyle [-dEghjJtTV] [-b=&lt;xpath&gt;] [-c=&lt;configurationFile&gt;]
                  [-f=&lt;format&gt;] [-o=&lt;outputPath&gt;] [-p=&lt;propertiesFile&gt;]
                  [-s=&lt;suppressionLineColumnNumber&gt;] [-w=&lt;tabWidth&gt;]
                  [-e=&lt;exclude&gt;]...[-x=&lt;excludeRegex&gt;]...
                  &lt;files&gt;...
Checkstyle verifies that the specified source code files adhere to the specified rules.
By default, violations are reported to standard out in plain format.
Checkstyle requires a configuration XML file that configures the checks to apply.
      &lt;files&gt;...            One or more source files to verify
  -b, --branch-matching-xpath=&lt;xpath&gt;
                            Shows Abstract Syntax Tree(AST) branches that match given XPath query.
  -c=&lt;configurationFile&gt;    Specifies the location of the file that defines the
                              configuration modules.
                              The location can either be a filesystem location, or a name
                              passed to the ClassLoader.getResource() method.
  -d, --debug               Prints all debug logging of CheckStyle utility.
  -e, --exclude=&lt;exclude&gt;   Directory/file to exclude from Checkstyle.
                              The path can be the full,absolute path,
                              or relative to the current path. Multiple excludes are
                              allowed.
  -E, --executeIgnoredModules
                            Allows ignored modules to be run.
  -f=&lt;format&gt;               Specifies the output format. Valid values: xml, sarif, plain for
                              XMLLogger, SarifLogger, and DefaultLogger respectively. Defaults to
                              plain.
  -g, --generate-xpath-suppression
                            Generates to output a suppression xml to use to suppress all violations
                              from user's config. Instead of printing every violation, all
                              violations will be catched and single suppressions xml file will be
                              printed out. Used only with -c option. Output location can be
                              specified with -o option.
  -h, --help                Show this help message and exit.
  -j, --javadocTree         This option is used to print the Parse Tree of the Javadoc comment. The
                              file has to contain only Javadoc comment content excluding '/**' and
                              '*/' at the beginning and at the end respectively. It can only be
                              used on a single file and cannot be combined with other options.
  -J, --treeWithJavadoc     This option is used to display the Abstract Syntax Tree (AST) with
                              Javadoc nodes of the specified file. It can only be used on a single
                              file and cannot be combined with other options.
  -o=&lt;outputPath&gt;           Sets the output file. Defaults to stdout.
  -p=&lt;propertiesFile&gt;       Sets the property files to load.
  -s=&lt;suppressionLineColumnNumber&gt;
                            Prints xpath suppressions at the file's line and column position.
                              Argument is the line and column number (separated by a : ) in the
                              file that the suppression should be generated for. The option cannot
                              be used with other options and requires exactly one file to run on to
                              be specified. Note that the generated result will have few queries,
                              joined by pipe(|). Together they will match all AST nodes on
                              specified line and column. You need to choose only one and recheck
                              that it works. Usage of all of them is also ok, but might result in
                              undesirable matching and suppress other issues.
  -t, --tree                This option is used to display the Abstract Syntax Tree (AST) without
                              any comments of the specified file. It can only be used on a single
                              file and cannot be combined with other options.
  -T, --treeWithComments    This option is used to display the Abstract Syntax Tree (AST) with
                              comment nodes excluding Javadoc of the specified file. It can only be
                              used on a single file and cannot be combined with other options.
  -V, --version             Print version information and exit.
  -w, --tabWidth=&lt;tabWidth&gt; Sets the length of the tab character.
                                  Used only with -s option. Default value is 8.
  -x, --exclude-regexp=&lt;excludeRegex&gt;
                            Directory/file pattern to exclude from Checkstyle. Multiple excludes
                              are allowed.
  </code></pre>
</div>

<h4><span>
18. Executing Ignored Modules (<span class="no-transform">-E, --executeIgnoredModules</span>)
</span></h4>
<p><strong>Goal:</strong>
Force execution of modules that are normally ignored (e.g., those set with severity "ignore")
so that any exceptions occurring within them are reported as errors.
</p>

<span class ="inline-command" ><strong>Command:</strong> <code class="prettyprint">
java -jar checkstyle-${projectVersion}-all.jar -c config.xml --executeIgnoredModules Test.java
</code></span>

<p><strong>Content of config.xml:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-xml">
&lt;?xml version="1.0"?&gt;
&lt;!DOCTYPE module PUBLIC
  "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
  "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
&lt;module name="Checker"&gt;
  &lt;property name="severity" value="ignore"/&gt;
  &lt;module name="TreeWalker"&gt;
    &lt;module name="FallThrough"/&gt;
    &lt;property name="severity" value="ignore"/&gt;
  &lt;/module&gt;
&lt;/module&gt;
  </code></pre>
</div>

<p><strong>Content of Test.java:</strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-java">
/**
 * Javadoc summary.
 *
 * Some description.
 */
class Test {
  /**
   * Some summary on method.
   */
  public void foo() {
    int i = 0;
    while (i >= 0) {
      switch (i) {
      case 1:
      case 2:
        i++;
      case 3: // violation
        i++;
      }
    }
  }
}
  </code></pre>
</div>

<p><strong>Output: </strong></p>
<div class="wrapper">
  <pre class="prettyprint"><code class="language-bash">
Starting audit...
Audit done.
  </code></pre>
</div>
</section>

    <section name="Run after compilation">
      <p>
        Download and compile:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          git clone https://github.com/checkstyle/checkstyle.git
          cd checkstyle
          mvn clean compile
        </code></pre></div>
      </div>
      <p>
        Run validation with arguments:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          mvn exec:java -Dexec.mainClass="com.puppycrawl.tools.checkstyle.Main" \
          &#xa0;&#xa0;&#xa0;&#xa0;-Dexec.args="-c /sun_checks.xml src/main/java"
        </code></pre></div>
      </div>
      <p>
        Run UI application for file :
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          mvn exec:java -Dexec.mainClass="com.puppycrawl.tools.checkstyle.gui.Main" -Dexec.args=\
          &#xa0;&#xa0;&#xa0;&#xa0;"src/main/java/com/puppycrawl/tools/checkstyle/Checker.java"
        </code></pre></div>
      </div>
      <p>
        Build all jars, and launch CLI from new build:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          mvn clean package -Passembly,no-validations
          java -jar target/checkstyle-X.X-SNAPSHOT-all.jar -c /sun_checks.xml MyClass.java
        </code></pre></div>
      </div>
    </section>

    <section name="Usage by Classpath update">
      <p>
        The easiest way is to include
        <a href=
          "https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
            checkstyle-${projectVersion}-all.jar</a>
        in the
        <a href=
          "https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html#sthref10">
            classpath</a>.
        Alternatively, you must include the
        <code>compile</code> third party dependencies listed in

        <a href="dependencies.html">Project Dependencies</a> in the
        classpath.

        <br/>
        <br/>
        <b>
          Run checkstyle with configuration file at
          <code>/sun_checks.xml</code> on a filesystem
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on all Java files in a directory
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml src/
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and provide a system
          property
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -Dcheckstyle.cache.file=target/cachefile com.puppycrawl.tools.checkstyle.Main \
          &#xa0;&#xa0;&#xa0;&#xa0;-c /sun_checks.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and use properties in a
          file
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml \
          &#xa0;&#xa0;&#xa0;&#xa0;-p myCheckstyle.properties Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and output to a file in
          XML format
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml -f xml \
          &#xa0;&#xa0;&#xa0;&#xa0;-o build/checkstyle_errors.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with <a href="extending.html">custom module(s)
          (Root module, Checks, etc)</a> in configuration file:
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -classpath MyCustom.jar;checkstyle-${projectVersion}-all.jar \
          &#xa0;&#xa0;&#xa0;&#xa0;com.puppycrawl.tools.checkstyle.Main -c config.xml Check.java
        </code></pre></div>
      </div>
      <p>
        <b>Note</b>: Custom modules should be specified with the class'
        <a href="writingchecks.html#Integrating_Checks">full classpath</a>
        in the configuration file and the compiled class be located in the custom
        JAR for Checkstyle to find.
      </p>
    </section>
  </body>
</document>
