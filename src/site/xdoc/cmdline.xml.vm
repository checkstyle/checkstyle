<?xml version="1.0" encoding="UTF-8"?>

<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">

  <head>
    <title>Command Line</title>
  </head>

  <body>
    <section name="Content">
      <macro name="toc">
        <param name="fromDepth" value="1"/>
        <param name="toDepth" value="1"/>
      </macro>
    </section>

    <section name="Description">
      <p>
        This document describes how to run Checkstyle using the command line
        tool. The latest version of Checkstyle can be downloaded as described at
        <a href="./index.html#Download">Download section</a>.
        This command line tool is included in the Checkstyle distribution.
      </p>
    </section>

    <section name="Command line usage">
      <p>

        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
java -D&lt;property&gt;=&lt;value&gt;  \
     com.puppycrawl.tools.checkstyle.Main \
     -c &lt;configurationFile&gt; \
     [-f &lt;format&gt;] [-p &lt;propertiesFile&gt;] [-o &lt;file&gt;] \
     [-s &lt;line:column&gt;] [-g | --generate-xpath-suppression] [-w | --tabWidth &lt;length&gt;] \
     [-t | --tree] [-T | --treeWithComments] [-J | --treeWithJavadoc] [-j | --javadocTree] \
     [-V | --version] [-b | --branch-matching-xpath &lt;xpathQuery&gt;] [-h | --help] \
     [-e | --exclude &lt;excludedPath&gt;] [-E | --executeIgnoredModules] [-d | --debug] \
     [-x | --exclude-regexp &lt;excludedPathPattern&gt;] \
     file(s) or folder(s) ...
        </code></pre></div>
      </p>

      <p>
        Checkstyle will process the specified files and by default report
        violations to standard out in plain format. Checkstyle requires a <a
        href="config.html">configuration XML file</a> that configures the
        checks to apply. Command line options are:
      </p>

      <subsection name="Command Line Options" id="Command_line_usage_Command_Line_Options">
        <div class="wrapper">
          <table>
            <thead>
              <tr>
                <th/>
                <th>Option</th>
                <th>Description</th>
              </tr>
            </thead>
            <tbody id="body">
              <tr>
                <td>
                  <a name="c"/>
                  <a href="#c">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-c configurationFile</code>
                </td>
                <td>
                  Specifies the location of the file that defines the configuration modules.
                  The location can either be a filesystem location, or a
                  <a href="https://docs.oracle.com/javase/8/docs/technotes/guides/lang/resources.html#res_names">
                  name</a> passed to the ClassLoader.getResource() method.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="f"/>
                  <a href="#f">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-f format</code>
                </td>
                <td>
                  Specifies the output format. Valid values: <code>xml</code>,
                  <code>sarif</code>, <code>plain</code>
                  for <a href="apidocs/com/puppycrawl/tools/checkstyle/XMLLogger.html">
                  XMLLogger</a>,
                  <a href="apidocs/com/puppycrawl/tools/checkstyle/SarifLogger.html">
                  SarifLogger</a>, and
                  <a href="apidocs/com/puppycrawl/tools/checkstyle/DefaultLogger.html">
                  DefaultLogger</a> respectively. Defaults to <code>plain</code>.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="p"/>
                  <a href="#p">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-p propertiesFile</code>
                </td>
                <td>
                  Sets the property files to load.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="o"/>
                  <a href="#o">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-o file</code>
                </td>
                <td>
                  Sets the output file. Defaults to stdout.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="s"/>
                  <a href="#s">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-s line:column</code>
                </td>
                <td>
                  Prints xpath suppressions at the file's line and column position. Argument is the
                  line and column number (separated by a : ) in the file that the suppression
                  should be generated for. The option cannot be used with other options and
                  requires exactly one file to run on to be specified. Note that the generated
                  result will have few queries, joined by pipe(|). Together they will match all
                  AST nodes on specified line and column. You need to choose only one and recheck
                  that it works. Usage of all of them is also ok, but might result in undesirable
                  matching and suppress other issues.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="g"/>
                  <a href="#g">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-g--generate-xpath-suppression</code>
                </td>
                <td>
                  Generates to output a suppression xml to use to suppress all violations from
                  user's config. Instead of printing every violation, all violations will be
                  catched and single suppressions xml file will be printed out. Used only with
                  <code>-c</code> option. Output location can be specified
                  with <code>-o</code> option.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="w"/>
                  <a href="#w">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-w, --tabWidth length</code>
                </td>
                <td>
                  Sets the length of the tab character. Used only with <code>-s</code> option.
                  Default value is 8.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="t"/>
                  <a href="#t">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-t, --tree</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>without any comments</b> of the specified file. It can only be used
                  on a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="T"/>
                  <a href="#T">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-T, --treeWithComments</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>with comment nodes excluding Javadoc</b> of the specified file.
                  It can only be used on a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="J"/>
                  <a href="#J">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-J, --treeWithJavadoc</code>
                </td>
                <td>
                  This option is used to display the Abstract Syntax Tree
                  (AST) <b>with Javadoc nodes</b> of the specified file. It can only be used on
                  a single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="j"/>
                  <a href="#j">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-j, --javadocTree</code>
                </td>
                <td>
                  This option is used to print the Parse Tree of the Javadoc comment. The file has
                  to contain <b>only Javadoc comment content</b> excluding '/**' and '*/'
                  at the beginning and at the end respectively. It can only be used on a
                  single file and cannot be combined with other options.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="d"/>
                  <a href="#d">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-d, --debug</code>
                </td>
                <td>
                  Prints all debug logging of CheckStyle utility.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="e"/>
                  <a href="#e">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-e, --exclude excludedPath</code>
                </td>
                <td>
                  Directory/file to exclude from CheckStyle. The path can be the full,
                  absolute path, or relative to the current path. Multiple excludes are allowed.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="x"/>
                  <a href="#x">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-x, --exclude-regexp excludedPathPattern</code>
                </td>
                <td>
                  Directory/file pattern to exclude from CheckStyle. Multiple excludes are allowed.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="V"/>
                  <a href="#V">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-V, --version</code>
                </td>
                <td>
                  Prints product version and exits. Any other option is ignored.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="b"/>
                  <a href="#b">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-b, --branch-matching-xpath xpathQuery</code>
                </td>
                <td>
                  Shows Abstract Syntax Tree(AST) branches that match given XPath query.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="h"/>
                  <a href="#h">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-h, --help</code>
                </td>
                <td>
                  Prints usage help message and exits. Any other option is ignored.
                </td>
              </tr>
              <tr>
                <td>
                  <a name="E"/>
                  <a href="#E">
                    <span class="wrapper inline">
                      <img src="images/anchor.png" alt=""/>
                    </span>
                  </a>
                </td>
                <td>
                  <code>-E, --executeIgnoredModules</code>
                </td>
                <td>
                  Allows ignored modules to be run.
                </td>
              </tr>
            </tbody>
          </table>
        </div>
      </subsection>

      <p>
        Note that the <code>-n packageNamesFile</code>
        option has been dropped for Checkstyle 5.0, because of significant changes regarding
        package name file handling. See <a href="config.html#Packages">this link</a> for details.
      </p>
      <p>
        To define system property for execution look at
        <a href="config_system_properties.html">system properties</a>.
      </p>
      <p>
        Set the properties for <a href="config.html#Properties">expanded
        property values</a> by either by assigning system properties using the
        <code>-D&lt;property&gt;=&lt;value&gt;</code> arguments to java or
        specifying a property file using the <code>-p</code> option.  If a
        property file is specified, the system properties are ignored.
      </p>
      <p>
        CLI is implemented by means of <a href="https://picocli.info">picocli</a>
        library. Our CLI supports definition of arguments in file
        by means of <a href="https://picocli.info/#AtFiles">AtFiles</a> feature
        and also command line completion in Bash or ZSH Unix shells, see how to make it
        <a href="https://picocli.info/autocomplete.html">here</a>.
      </p>
    </section>

    <section name="Download and Run">
      <p>
        It is possible to run Checkstyle directly from the JAR file using
        the <code>-jar</code> option. Download latest
        <a href="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
        checkstyle-${projectVersion}-all.jar</a>.
        An example of run would be:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -jar checkstyle-${projectVersion}-all.jar -c /sun_checks.xml MyClass.java
          java -jar checkstyle-${projectVersion}-all.jar -c /google_checks.xml MyClass.java
        </code></pre></div>
      </div>
      <p>
        It is recommended to use configuration files that are embedded in jar files, but latest
        configuration files are there:
        <a href=
          "https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/sun_checks.xml">
            sun_checks.xml</a>
        <a href=
          "https://raw.githubusercontent.com/checkstyle/checkstyle/master/src/main/resources/google_checks.xml">
            google_checks.xml</a>
      </p>
      <p>
        To run <a href="writingchecks.html#The_Checkstyle_SDK_Gui">Checkstyle UI viewer</a>
        for AST tree directly from the JAR file using
        the <code>-jar</code> option. Download latest
        <a href="https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
        checkstyle-${projectVersion}-all.jar</a>.
        An example of run would be (path to java file is optional):
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -cp checkstyle-${projectVersion}-all.jar com.puppycrawl.tools.checkstyle.gui.Main \
          &#xa0;&#xa0;&#xa0;&#xa0;MyClass.java
        </code></pre></div>
      </div>
    </section>

        <section name="Examples">
        <h3>1. Using a Configuration File (-c)</h3>
        <p><strong>Goal:</strong> Run Checkstyle using a specified configuration file.</p>

        <p><strong>Configuration File (config.xml):</strong></p>
     <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
    &lt;?xml version="1.0"?&gt;
    &lt;!DOCTYPE module PUBLIC
    "-//Puppy Crawl//DTD Check Configuration 1.3//EN"
    "https://checkstyle.org/dtds/configuration_1_3.dtd"&gt;
    &lt;module name="Checker"&gt;
        &lt;module name="TreeWalker"&gt;
            &lt;module name="FallThrough"/&gt;
        &lt;/module&gt;
    &lt;/module&gt;
    </code></pre></div>

        <p><strong>Test File (Test.java):</strong></p>
    <div class="wrapper"><pre class="prettyprint"><code class="language-java">
    class Test {
        public void foo() {
            int i = 0;
            while (i >= 0) {
                switch (i) {
                      case 1:
                      case 2:
                          i++;
                      case 3: // violation 'fall from previous branch of the switch'
                          i++;
                  }
              }
          }
      }
      </code></pre></div>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      [ERROR] Test.java:9:9: Fall through from previous branch of switch statement [FallThrough]
      Audit done.
      Checkstyle ends with 1 errors.
      </code></pre></div>

      <h3>2. Specifying Output Format (-f)</h3>
      <p><strong>Goal:</strong> Change the output format to XML or SARIF.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml -f xml Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;checkstyle version="10.18.1"&gt;
        &lt;file name="Test.java"&gt;
            &lt;error line="9" column="9" severity="error"
                message="Fall through from previous branch of switch statement"
                source="com.puppycrawl.tools.checkstyle.checks.coding.FallThroughCheck"/&gt;
        &lt;/file&gt;
    &lt;/checkstyle&gt;
    </code></pre></div>

      <h3>3. Specifying a Properties File (-p)</h3>
      <p><strong>Goal:</strong> Load custom properties into Checkstyle from a properties file.</p>

      <p><strong>Properties File (checkstyle.properties):</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-properties">
      checkstyle.header.file=header.txt
      </code></pre></div>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml -p checkstyle.properties Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      [ERROR] Test.java:1: File does not contain required header. [Header]
      Audit done.
      Checkstyle ends with 1 errors.
      </code></pre></div>

      <h3>4. Specifying an Output File (-o)</h3>
      <p><strong>Goal:</strong> Save Checkstyle results to a file.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml -o results.txt Test.java
      </code></pre></div>

      <p><strong>Output (inside results.txt):</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      [ERROR] Test.java:9:9: Fall through from previous branch of switch statement [FallThrough]
      Audit done.
      Checkstyle ends with 1 errors.
      </code></pre></div>

      <h3>5. Printing XPath Suppressions (-s)</h3>
      <p><strong>Goal:</strong> Generate XPath suppressions for a specific line and column.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -s 9:9 Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
      Suppression XPath query: &lt;suppress xpath="//CASE_GROUP" files="Test.java"/&gt;
      </code></pre></div>

      <h3>6. Generating Suppressions XML (-g)</h3>
      <p><strong>Goal:</strong> Generate an XML file containing suppressions for all violations.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml -g -o suppressions.xml Test.java
      </code></pre></div>

      <p><strong>Output (inside suppressions.xml):</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
    &lt;?xml version="1.0" encoding="UTF-8"?&gt;
    &lt;!DOCTYPE suppressions PUBLIC "-//Puppy Crawl//DTD Suppressions 1.1//EN"
        "https://checkstyle.org/dtds/suppressions_1_1.dtd"&gt;
    &lt;suppressions&gt;
        &lt;suppress files="Test.java" checks="FallThrough"/&gt;
    &lt;/suppressions&gt;
    </code></pre></div>

      <h3>7. Setting Tab Width (-w, --tabWidth)</h3>
      <p><strong>Goal:</strong> Set the length of the tab character when using the `-s` option.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -s 9:9 --tabWidth 4 Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
      Suppression XPath query:
      &lt;suppress xpath="//CASE_GROUP" files="Test.java"/&gt;
    </code></pre></div>

      <h3>8. Displaying Abstract Syntax Tree (-t, --tree)</h3>
      <p><strong>Goal:</strong> Display the Abstract Syntax Tree (AST) without comments.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --tree Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      CLASS_DEF -> Test [1:0]
       `--METHOD_DEF -> foo [2:2]
           `--SLIST -> { [3:22]
               |--VARIABLE_DEF -> int i [4:10]
               |--WHILE -> while [5:10]
               `--SWITCH -> switch [6:14]
      </code></pre></div>

      <h3>9. Displaying AST with Comments (-T, --treeWithComments)</h3>
      <p><strong>Goal:</strong> Display the AST including comment nodes, but excluding Javadoc.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --treeWithComments Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      CLASS_DEF -> Test [1:0]
       `--METHOD_DEF -> foo [2:2]
           `--SLIST -> { [3:22]
               |--VARIABLE_DEF -> int i [4:10]
               |--WHILE -> while [5:10]
               |--BLOCK_COMMENT_BEGIN -> /* [8:10]
               |--BLOCK_COMMENT_END -> */ [8:49]
               `--SWITCH -> switch [9:14]
      </code></pre></div>

      <h3>10. Displaying AST with Javadoc (-J, --treeWithJavadoc)</h3>
      <p><strong>Goal:</strong> Display the AST including Javadoc comment nodes.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --treeWithJavadoc Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      CLASS_DEF -> Test [1:0]
       `--METHOD_DEF -> foo [2:2]
           `--JAVADOC_COMMENT -> /** [3:0]
           |--JAVADOC_TAG -> @param [3:4]
           `--SLIST -> { [4:22]
      </code></pre></div>

      <h3>11. Printing Javadoc Parse Tree (-j, --javadocTree)</h3>
      <p><strong>Goal:</strong> Print the parse tree of a Javadoc comment.</p>

      <p><strong>Test File (Javadoc.txt):</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-java">
      /**
       * This is a sample Javadoc comment.
       * @param value input value
       * @return processed value
       */
      </code></pre></div>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --javadocTree Javadoc.txt
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      JAVADOC_COMMENT -> /**
       |--JAVADOC_TAG -> @param
       |--JAVADOC_TAG -> @return
      </code></pre></div>

      <h3>12. Debugging CheckStyle (-d, --debug)</h3>
      <p><strong>Goal:</strong> Print detailed debug logs for troubleshooting.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --debug -c config.xml Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      DEBUG: Starting audit...
      DEBUG: Checking file: Test.java
      DEBUG: Applying rule: FallThroughCheck
      [ERROR] Test.java:9:9: Fall through from previous branch of switch statement [FallThrough]
      DEBUG: Audit complete.
      Checkstyle ends with 1 errors.
      </code></pre></div>

      <h3>13. Excluding Specific Files or Directories (-e, --exclude)</h3>
      <p>
      <strong>Goal:</strong> Exclude specific files or directories from CheckStyle validation.
      </p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml --exclude src/test/java/Test.java src
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      Skipping excluded file: src/test/java/Test.java
      Audit done.
      </code></pre></div>

      <h3>14. Excluding Files Using Regular Expressions (-x, --exclude-regexp)</h3>
      <p><strong>Goal:</strong> Exclude files or directories using a regular expression pattern.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml --exclude-regexp ".*Test.*\\.java" src
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      Skipping excluded file: src/main/java/TestFile.java
      Audit done.
      </code></pre></div>

      <h3>15. Displaying Checkstyle Version (-V, --version)</h3>
      <p><strong>Goal:</strong> Print the CheckStyle version information.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --version
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Checkstyle 10.18.1
      </code></pre></div>

      <h3>16. Finding AST Nodes Matching XPath (-b, --branch-matching-xpath)</h3>
      <p><strong>Goal:</strong> Show AST branches matching a given XPath query.</p>

      <p><strong>Test.java:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-java">
      class Test {
          void foo() {
              int x = 10;
          }
      }
      </code></pre></div>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --branch-matching-xpath "//VARIABLE_DEF" Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Matching AST nodes:
      |--VARIABLE_DEF -> int x
      </code></pre></div>

      <h3>17. Displaying Help Message (-h, --help)</h3>
      <p><strong>Goal:</strong> Print usage instructions for CheckStyle CLI.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar --help
      </code></pre></div>

      <p><strong>Output (Partial):</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Usage: java -jar checkstyle-10.18.1-all.jar [OPTIONS]...
      -c &lt;config&gt;      Specifies configuration file.
      -f &lt;format&gt;      Sets output format (xml, plain, sarif).
      -t               Displays AST tree.
      -h, --help       Prints this message and exits.
    </code></pre></div>

      <h3>18. Executing Ignored Modules (-E, --executeIgnoredModules)</h3>
      <p><strong>Goal:</strong> Run CheckStyle even on ignored modules.</p>

      <p><strong>Command:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      $ java -jar checkstyle-10.18.1-all.jar -c config.xml --executeIgnoredModules Test.java
      </code></pre></div>

      <p><strong>Output:</strong></p>
       <div class="wrapper"><pre class="prettyprint"><code class="language-bash">
      Starting audit...
      [INFO] Executing ignored module: SomeIgnoredModule
      Audit done.
      </code></pre></div>

    </section>

    <section name="Run after compilation">
      <p>
        Download and compile:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          git clone https://github.com/checkstyle/checkstyle.git
          cd checkstyle
          mvn clean compile
        </code></pre></div>
      </div>
      <p>
        Run validation with arguments:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          mvn exec:java -Dexec.mainClass="com.puppycrawl.tools.checkstyle.Main" \
          &#xa0;&#xa0;&#xa0;&#xa0;-Dexec.args="-c /sun_checks.xml src/main/java"
        </code></pre></div>
      </div>
      <p>
        Run UI application for file :
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          mvn exec:java -Dexec.mainClass="com.puppycrawl.tools.checkstyle.gui.Main" -Dexec.args=\
          &#xa0;&#xa0;&#xa0;&#xa0;"src/main/java/com/puppycrawl/tools/checkstyle/Checker.java"
        </code></pre></div>
      </div>
      <p>
        Build all jars, and launch CLI from new build:
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-xml">
          mvn clean package -Passembly,no-validations
          java -jar target/checkstyle-X.X-SNAPSHOT-all.jar -c /sun_checks.xml MyClass.java
        </code></pre></div>
      </div>
    </section>

    <section name="Usage by Classpath update">
      <p>
        The easiest way is to include
        <a href=
          "https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${projectVersion}/checkstyle-${projectVersion}-all.jar">
            checkstyle-${projectVersion}-all.jar</a>
        in the
        <a href=
          "https://docs.oracle.com/javase/8/docs/technotes/tools/windows/classpath.html#sthref10">
            classpath</a>.
        Alternatively, you must include the
        <code>compile</code> third party dependencies listed in

        <a href="dependencies.html">Project Dependencies</a> in the
        classpath.

        <br/>
        <br/>
        <b>
          Run checkstyle with configuration file at
          <code>/sun_checks.xml</code> on a filesystem
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on all Java files in a directory
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml src/
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and provide a system
          property
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -Dcheckstyle.cache.file=target/cachefile com.puppycrawl.tools.checkstyle.Main \
          &#xa0;&#xa0;&#xa0;&#xa0;-c /sun_checks.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and use properties in a
          file
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml \
          &#xa0;&#xa0;&#xa0;&#xa0;-p myCheckstyle.properties Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with configuration file
          <code>/sun_checks.xml</code> on a file and output to a file in
          XML format
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java com.puppycrawl.tools.checkstyle.Main -c /sun_checks.xml -f xml \
          &#xa0;&#xa0;&#xa0;&#xa0;-o build/checkstyle_errors.xml Check.java
        </code></pre></div>
      </div>

      <p>
        <b>
          Run checkstyle with <a href="extending.html">custom module(s)
          (Root module, Checks, etc)</a> in configuration file:
        </b>
      </p>
      <div class="wrap-content">
        <div class="wrapper"><pre class="prettyprint"><code class="language-java">
          java -classpath MyCustom.jar;checkstyle-${projectVersion}-all.jar \
          &#xa0;&#xa0;&#xa0;&#xa0;com.puppycrawl.tools.checkstyle.Main -c config.xml Check.java
        </code></pre></div>
      </div>
      <p>
        <b>Note</b>: Custom modules should be specified with the class'
        <a href="writingchecks.html#Integrating_Checks">full classpath</a>
        in the configuration file and the compiled class be located in the custom
        JAR for Checkstyle to find.
      </p>
    </section>
  </body>
</document>
