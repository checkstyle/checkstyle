<?xml version="1.0" encoding="UTF-8"?>
<document xmlns="http://maven.apache.org/XDOC/2.0"
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xsi:schemaLocation="http://maven.apache.org/XDOC/2.0 https://maven.apache.org/xsd/xdoc-2.0.xsd">
  <head>
    <title>MatchXpath</title>
  </head>
  <body>
    <section name="MatchXpath">
      <p>Since Checkstyle 8.39</p>
      <subsection name="Description" id="Description">
        <p>
          Evaluates Xpath query and report violation on all matching AST nodes. This check allows
          user to implement custom checks using Xpath. If Xpath query is not specified explicitly,
          then the check does nothing.
        </p>
        <p>
          It is recommended to define custom message for violation to explain what is not allowed
          and what to use instead, default message might be too abstract. To customize a message
          you need to add <code>message</code> element with <b>matchxpath.match</b> as
          <code>key</code> attribute and desired message as <code>value</code> attribute.
        </p>
        <p>
          Please read more about Xpath syntax at
          <a href="https://www.saxonica.com/html/documentation10/expressions/index.html">
            Xpath Syntax</a>.
          Information regarding Xpath functions can be found at
          <a href="https://www.saxonica.com/html/documentation10/functions/fn/index.html">
            XSLT/XPath Reference</a>.
            Note, that <b>@text</b> attribute can be used only with token types that
          are listed in
          <a href="https://github.com/checkstyle/checkstyle/search?q=%22TOKEN_TYPES_WITH_TEXT_ATTRIBUTE+%3D+Arrays.asList%22">
            XpathUtil</a>.
        </p>

      </subsection>

      <subsection name="Properties" id="Properties">
        <div class="wrapper">
          <macro name="properties">
            <param name="modulePath"
              value="src/main/java/com/puppycrawl/tools/checkstyle/checks/coding/MatchXpathCheck.java"/>
          </macro>
        </div>
      </subsection>

      <subsection name="Examples" id="Examples">
        <p>
          Checkstyle provides <a href="https://checkstyle.org/cmdline.html">command line tool</a>
          and <a href="https://checkstyle.org/writingchecks.html#The_Checkstyle_SDK_Gui">GUI
          application</a> with options to show AST and to ease usage of Xpath queries.
        </p>
        <p><b>-T</b> option prints AST tree of the checked file.</p>
        <source>
$ java -jar checkstyle-X.XX-all.jar -T Main.java
CLASS_DEF -&gt; CLASS_DEF [1:0]
|--MODIFIERS -&gt; MODIFIERS [1:0]
|   `--LITERAL_PUBLIC -&gt; public [1:0]
|--LITERAL_CLASS -&gt; class [1:7]
|--IDENT -&gt; Main [1:13]
`--OBJBLOCK -&gt; OBJBLOCK [1:18]
|--LCURLY -&gt; { [1:18]
|--METHOD_DEF -&gt; METHOD_DEF [2:4]
|   |--MODIFIERS -&gt; MODIFIERS [2:4]
|   |   `--LITERAL_PUBLIC -&gt; public [2:4]
|   |--TYPE -&gt; TYPE [2:11]
|   |   `--IDENT -&gt; String [2:11]
|   |--IDENT -&gt; sayHello [2:18]
|   |--LPAREN -&gt; ( [2:26]
|   |--PARAMETERS -&gt; PARAMETERS [2:27]
|   |   `--PARAMETER_DEF -&gt; PARAMETER_DEF [2:27]
|   |       |--MODIFIERS -&gt; MODIFIERS [2:27]
|   |       |--TYPE -&gt; TYPE [2:27]
|   |       |   `--IDENT -&gt; String [2:27]
|   |       `--IDENT -&gt; name [2:34]
|   |--RPAREN -&gt; ) [2:38]
|   `--SLIST -&gt; { [2:40]
|       |--LITERAL_RETURN -&gt; return [3:8]
|       |   |--EXPR -&gt; EXPR [3:25]
|       |   |   `--PLUS -&gt; + [3:25]
|       |   |       |--STRING_LITERAL -&gt; "Hello, " [3:15]
|       |   |       `--IDENT -&gt; name [3:27]
|       |   `--SEMI -&gt; ; [3:31]
|       `--RCURLY -&gt; } [4:4]
`--RCURLY -&gt; } [5:0]
        </source>
        <p><b>-b</b> option shows AST nodes that match given Xpath query. This command can be
          used to validate accuracy of Xpath query against given file.</p>
        <source>
$ java -jar checkstyle-X.XX-all.jar Main.java -b "//METHOD_DEF[./IDENT[@text='sayHello']]"
CLASS_DEF -&gt; CLASS_DEF [1:0]
`--OBJBLOCK -&gt; OBJBLOCK [1:18]
|--METHOD_DEF -&gt; METHOD_DEF [2:4]
        </source>
        <p id="Example1-config">
          The following example demonstrates validation of methods order, so that public methods
          should come before the private ones:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example1.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example1-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example1.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example2-config">To violate if there are any parametrized constructors</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example2.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example2-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example2.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example3-config">To violate if method name is 'test' or 'foo'</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example3.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example3-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example3.txt"/>
          <param name="type" value="code"/>
        </macro>
        <p id="Example4-config">
          To violate if new instance creation was done without <b>var</b> type
        </p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example4.txt"/>
          <param name="type" value="config"/>
        </macro>
        <p id="Example4-code">Example:</p>
        <macro name="example">
          <param name="path"
                 value="resources/com/puppycrawl/tools/checkstyle/checks/coding/matchxpath/Example4.txt"/>
          <param name="type" value="code"/>
        </macro>
      </subsection>

      <subsection name="Example of Usage" id="Example_of_Usage">
        <ul>
          <li>
            <a href="https://github.com/search?q=path%3Aconfig%20path%3A**%2Fcheckstyle-checks.xml+repo%3Acheckstyle%2Fcheckstyle+MatchXpath">
              Checkstyle Style</a>
          </li>
        </ul>
      </subsection>

      <subsection name="Violation Messages" id="Violation_Messages">
        <macro name="violation-messages">
          <param name="checkName" value="MatchXpath"/>
        </macro>
        <p>
          All messages can be customized if the default message doesn't suit you.
          Please <a href="../../config.html#Custom_messages">see the documentation</a>
          to learn how to.
        </p>
      </subsection>

      <subsection name="Package" id="Package">
        <p>
          com.puppycrawl.tools.checkstyle.checks.coding
        </p>
      </subsection>

      <subsection name="Parent Module" id="Parent_Module">
        <macro name="parent-module">
          <param name="moduleName" value="MatchXpath"/>
        </macro>
      </subsection>
    </section>
  </body>
</document>
